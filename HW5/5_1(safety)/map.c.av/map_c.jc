
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag __anonstruct_Key_21 = {
  int32 a: 32; 
  int32 b: 32;
}

type __anonstruct_Key_21 = [__anonstruct_Key_21]

tag __anonstruct_Value_22 = {
  int32 c: 32; 
  int32 d: 32;
}

type __anonstruct_Value_22 = [__anonstruct_Value_22]

tag __anonstruct_Item_23 = voidP with {
  __anonstruct_Key_21[0] key_2: 64; 
  __anonstruct_Value_22[0] value_2: 64; 
  int32 existent: 32;
}

tag __anonstruct_Map_24 = {
  __anonstruct_Item_23[..] items: 64; 
  int32 capacity: 32; 
  int32 count: 32;
}

type __anonstruct_Map_24 = [__anonstruct_Map_24]

axiomatic ItemsCount {

  logic integer count{L}(__anonstruct_Map_24[..] map, integer m, integer n_1)
   
  axiom count_zero{L} :
  (_C_1 : (\forall __anonstruct_Map_24[..] map_0;
            (\forall integer m_0;
              (\forall integer n_2;
                ((m_0 >= n_2) ==> (count{L}(map_0, m_0, n_2) == 0))))))
   
  predicate count_one_p{L}(__anonstruct_Map_24[..] map_1, integer m_1) =
  (count{L}(map_1, m_1, (m_1 + 1)) ==
    (if (((map_1.items + m_1).existent :> integer) != 0) then 1 else 0))
   
  axiom count_one{L} :
  (_C_2 : (\forall __anonstruct_Map_24[..] map_2;
            (\forall integer m_2;
              count_one_p{L}(map_2, m_2))))
   
  predicate count_split_p{L}(__anonstruct_Map_24[..] map_3, integer m_3,
                             integer n_3, integer k_1) =
  (count{L}(map_3, m_3, k_1) ==
    (count{L}(map_3, m_3, n_3) + count{L}(map_3, n_3, k_1)))
   
  axiom count_split{L} :
  (_C_3 : (\forall __anonstruct_Map_24[..] map_4;
            (\forall integer m_4;
              (\forall integer n_4;
                (\forall integer k_2;
                  (((m_4 <= n_4) && (n_4 <= k_2)) ==>
                    count_split_p{L}(map_4, m_4, n_4, k_2)))))))
  
}

logic integer all_count{L}(__anonstruct_Map_24[..] map_5) =
\at(count{L}(map_5, 0, (map_5.capacity :> integer)),L)

axiomatic CountLem {

  lemma lemma1_count_split{L} :
  (_C_4 : (\forall __anonstruct_Map_24[..] map_6;
            (\forall integer i;
              (((is_valid_map{L}(map_6) && (0 < i)) &&
                 (i < (map_6.capacity :> integer))) ==>
                (count{L}(map_6, 0, i) ==
                  (count{L}(map_6, 0, (i - 1)) + count{L}(map_6, (i - 1), i)))))))
   
  lemma lemma2_count_split{L} :
  (_C_5 : (\forall __anonstruct_Map_24[..] map_7;
            (\forall integer i_0;
              (\forall integer j;
                ((((is_valid_map{L}(map_7) && (0 < i_0)) && (i_0 < j)) &&
                   (j < (map_7.capacity :> integer))) ==>
                  (count{L}(map_7, 0, j) ==
                    (count{L}(map_7, 0, i_0) + count{L}(map_7, i_0, j))))))))
   
  lemma lemma3_count_split{L} :
  (_C_6 : (\forall __anonstruct_Map_24[..] map_8;
            (\forall integer m_5;
              (\forall integer n_5;
                (\forall integer k_3;
                  (((m_5 <= n_5) && (n_5 <= k_3)) ==>
                    (count_split_p{L}(map_8, m_5, n_5, k_3) &&
                      (count{L}(map_8, m_5, k_3) ==
                        (count{L}(map_8, m_5, n_5) +
                          count{L}(map_8, n_5, k_3))))))))))
   
  lemma lemma_count_one_p{L} :
  (_C_7 : (\forall __anonstruct_Map_24[..] map_9;
            (\forall integer i_1;
              (is_valid_map{L}(map_9) ==>
                (count_one_p{L}(map_9, i_1) &&
                  (count{L}(map_9, i_1, (i_1 + 1)) ==
                    (if (((map_9.items + i_1).existent :> integer) != 0) then 1 else 0)))))))
   
  lemma lemma1_count_positive{L} :
  (_C_8 : (\forall __anonstruct_Map_24[..] map_10;
            (\forall integer i_2;
              ((((map_10.items + i_2).existent == (0 :> int32)) ||
                 ((map_10.items + i_2).existent == (1 :> int32))) ==>
                (count{L}(map_10, i_2, (i_2 + 1)) >= 0)))))
   
  lemma lemma2_count_positive{L} :
  (_C_9 : (\forall __anonstruct_Map_24[..] map_11;
            (is_valid_map{L}(map_11) ==>
              (count{L}(map_11, 0, (map_11.capacity :> integer)) >= 0))))
   
  lemma lemma3_count_positive{L} :
  (_C_10 : (\forall __anonstruct_Map_24[..] map_12;
             ((is_valid_map{L}(map_12) &&
                (count{L}(map_12, 0, (map_12.capacity :> integer)) >= 0)) ==>
               (map_12.count >= (0 :> int32)))))
  
}

predicate all_valid_existence{L}(__anonstruct_Map_24[..] map_13) =
\at((\forall integer i_3;
      (((0 <= i_3) && (i_3 < (map_13.capacity :> integer))) ==>
        (((0 :> int32) <= (map_13.items + i_3).existent) &&
          ((map_13.items + i_3).existent <= (1 :> int32))))),L)

predicate valid_item{L}(__anonstruct_Map_24[..] map_14, integer idx) =
\at(((((0 <= idx) && (idx < (map_14.capacity :> integer))) &&
       ((0 :> int32) <= (map_14.items + idx).existent)) &&
      ((map_14.items + idx).existent <= (1 :> int32))),L)

predicate unique_items{L}(__anonstruct_Map_24[..] map_15) =
\at((\forall integer i_4;
      ((((0 <= i_4) && (i_4 < (map_15.capacity :> integer))) &&
         (! ((map_15.items + i_4).existent == (0 :> int32)))) ==>
        (\forall integer j_0;
          (((((! (j_0 == i_4)) && (0 <= j_0)) &&
              (j_0 < (map_15.capacity :> integer))) &&
             (! ((map_15.items + j_0).existent == (0 :> int32)))) ==>
            ((! ((map_15.items + i_4).key_2.a ==
                  (map_15.items + j_0).key_2.a)) ||
              (! ((map_15.items + i_4).key_2.b ==
                   (map_15.items + j_0).key_2.b))))))),L)

predicate valid_items_arr_capacity{L}(__anonstruct_Map_24[..] map_16) =
\at(((((map_16.capacity > (0 :> int32)) && ((0 :> int32) <= map_16.count)) &&
       (map_16.count <= map_16.capacity)) ==>
      \at((if (\at(0,L) <= \at(((map_16.capacity :> integer) - 1),L)) then 
          (((\offset_min(\at(map_16.items,L)) <= \at(0,L)) &&
             (\offset_max(\at(map_16.items,L)) >=
               \at(((map_16.capacity :> integer) - 1),L))) &&
            (\forall integer __framac_tmp1;
              (((\at(0,L) <= __framac_tmp1) &&
                 (__framac_tmp1 <= \at(((map_16.capacity :> integer) - 1),L))) ==>
                ((((\offset_min(\at((map_16.items + __framac_tmp1).key_2,L)) <=
                     \at(0,L)) &&
                    (\offset_max(\at((map_16.items + __framac_tmp1).key_2,L)) >=
                      \at(0,L))) &&
                   true) &&
                  (((\offset_min(\at((map_16.items + __framac_tmp1).value_2,L)) <=
                      \at(0,L)) &&
                     (\offset_max(\at((map_16.items + __framac_tmp1).value_2,L)) >=
                       \at(0,L))) &&
                    true))))) else true),L)),L)

predicate count_correct{L}(__anonstruct_Map_24[..] map_17) =
\at(((all_count{L}(map_17) == (map_17.count :> integer)) &&
      (map_17.count >= (0 :> int32))),L)

predicate valid_items{L}(__anonstruct_Map_24[..] map_18) =
\at((\forall integer i_5;
      (((0 <= i_5) && (i_5 < (map_18.capacity :> integer))) ==>
        valid_item{L}(map_18, i_5))),L)

predicate valid_map_sizes{L}(__anonstruct_Map_24[..] map_19) =
\at((((0 :> int32) <= map_19.count) && (map_19.count <= map_19.capacity)),L)

predicate two_consecutive_false{L}(__anonstruct_Map_24[..] map_20) =
\at((\exists integer i_6;
      ((((0 <= i_6) && (i_6 < ((map_20.capacity :> integer) - 1))) &&
         ((map_20.items + i_6).existent == (0 :> int32))) &&
        ((map_20.items + (i_6 + 1)).existent == (0 :> int32)))),L)

predicate rest_false_after_double{L}(__anonstruct_Map_24[..] map_21) =
\at((two_consecutive_false{L}(map_21) ==>
      (\forall integer j_1;
        ((((0 <= j_1) && (j_1 < (map_21.capacity :> integer))) &&
           (\exists integer i_7;
             (((((0 <= i_7) && (i_7 < ((map_21.capacity :> integer) - 1))) &&
                 ((map_21.items + i_7).existent == (0 :> int32))) &&
                ((map_21.items + (i_7 + 1)).existent == (0 :> int32))) &&
               ((i_7 + 1) < j_1)))) ==>
          ((map_21.items + j_1).existent == (0 :> int32))))),L)

predicate valid_map_begin{L}(__anonstruct_Map_24[..] map_22) =
\at((((map_22.count > (0 :> int32)) ==>
       (((map_22.items + 0).existent == (1 :> int32)) ||
         ((map_22.items + 1).existent == (1 :> int32)))) ||
      ((map_22.count == (0 :> int32)) ==>
        (\forall integer i_8;
          (((0 <= i_8) && (i_8 < (map_22.capacity :> integer))) ==>
            ((map_22.items + i_8).existent == (0 :> int32)))))),L)

predicate is_valid_map{L}(__anonstruct_Map_24[..] map_23) =
\at(((((((((\at((((\offset_min(\at(map_23,L)) <= \at(0,L)) &&
                   (\offset_max(\at(map_23,L)) >= \at(0,L))) &&
                  true),L) &&
             all_valid_existence{L}(map_23)) &&
            unique_items{L}(map_23)) &&
           valid_items_arr_capacity{L}(map_23)) &&
          count_correct{L}(map_23)) &&
         valid_items{L}(map_23)) &&
        valid_map_sizes{L}(map_23)) &&
       valid_map_begin{L}(map_23)) &&
      rest_false_after_double{L}(map_23)),L)

predicate empty_map{L}(__anonstruct_Map_24[..] map_24) =
\at(((map_24.count == (0 :> int32)) &&
      (\forall integer i_9;
        (((0 <= i_9) && (i_9 < (map_24.capacity :> integer))) ==>
          ((map_24.items + i_9).existent == (0 :> int32))))),L)

predicate full{L}(__anonstruct_Map_24[..] map_25) =
(\at(map_25.capacity,L) == \at(map_25.count,L))

predicate has_key{L}(__anonstruct_Map_24[..] map_26,
                     __anonstruct_Key_21[..] key) =
(\exists integer i_10;
  (((((0 <= i_10) && (i_10 < (\at(map_26.capacity,L) :> integer))) &&
      (\at((map_26.items + i_10).existent,L) == (1 :> int32))) &&
     (\at((map_26.items + i_10).key_2.a,L) == key.a)) &&
    (\at((map_26.items + i_10).key_2.b,L) == key.b)))

predicate has_item{L1, L2}(__anonstruct_Map_24[..] map_27,
                           __anonstruct_Key_21[..] key_0,
                           __anonstruct_Value_22[..] value) =
(\exists integer i_11;
  (((((((0 <= i_11) && (i_11 < (\at(map_27.capacity,L1) :> integer))) &&
        (! (\at((map_27.items + i_11).existent,L1) == (0 :> int32)))) &&
       (\at((map_27.items + i_11).key_2.a,L1) == \at(key_0.a,L2))) &&
      (\at((map_27.items + i_11).key_2.b,L1) == \at(key_0.b,L2))) &&
     (\at((map_27.items + i_11).value_2.c,L1) == \at(value.c,L2))) &&
    (\at((map_27.items + i_11).value_2.d,L1) == \at(value.d,L2))))

predicate item_exists_t{L}(__anonstruct_Item_23[..] it) =
(\at(it.existent,L) == (1 :> int32))

logic __anonstruct_Key_21[..] get_key_t{L}(__anonstruct_Item_23[..] it_0) =
\at(it_0.key_2,L)

logic __anonstruct_Value_22[..] get_value_t{L}(__anonstruct_Item_23[..] it_1) =
\at(it_1.value_2,L)

logic __anonstruct_Item_23[..] get_item_t{L}(__anonstruct_Map_24[..] map_28,
                                             integer idx_0) =
\at((map_28.items + idx_0),L)

int32 compareKeys(__anonstruct_Key_21[0] v_key1,
                  __anonstruct_Key_21[0] v_key2)
behavior default:
  ensures true;
{  
   (var __anonstruct_Key_21[0] key1);
   
   (var __anonstruct_Key_21[0] key2);
   
   (var int32 tmp);
   
   {  (_C_12 : (key1 = (_C_11 : (new __anonstruct_Key_21[1]))));
      (_C_14 : (key2 = (_C_13 : (new __anonstruct_Key_21[1]))));
      (_C_17 : ((_C_16 : key2.a) = (_C_15 : v_key2.a)));
      (_C_20 : ((_C_19 : key2.b) = (_C_18 : v_key2.b)));
      (_C_23 : ((_C_22 : key1.a) = (_C_21 : v_key1.a)));
      (_C_26 : ((_C_25 : key1.b) = (_C_24 : v_key1.b)));
      (if (_C_35 : ((_C_34 : key1.a) == (_C_33 : key2.a))) then (if (_C_32 : 
                                                                    ((_C_31 : key1.b) ==
                                                                    (_C_30 : key2.b))) then 
                                                                (_C_29 : (tmp = (1 :> int32))) else 
                                                                (_C_28 : (tmp = (0 :> int32)))) else 
      (_C_27 : (tmp = (0 :> int32))));
      (_C_36 : (free(key1)));
      (_C_37 : (free(key2)));
      
      (return tmp)
   }
}

unit finalizeMap(__anonstruct_Map_24[..] map_0)
  requires ((_C_43 : is_valid_map{Here}(map_0)) &&
             (_C_44 : \freeable{Here}(map_0.items)));
behavior default:
  ensures (_C_42 : \allocable{Here}(\at(map_0.items,Old)));
{  
   {  (_C_39 : (free((_C_38 : map_0.items))));
      (_C_41 : ((_C_40 : map_0.items) = null));
      
      (return ())
   }
}

int32 removeElement(__anonstruct_Map_24[..] map_3,
                    __anonstruct_Key_21[..] key_1,
                    __anonstruct_Value_22[..] value_1)
  requires ((_C_239 : (! (map_3 == null))) &&
             ((_C_240 : (! (key_1 == null))) &&
               ((_C_241 : \at((((\offset_min(\at(key_1,Here)) <= \at(0,Here)) &&
                                 (\offset_max(\at(key_1,Here)) >=
                                   \at(0,Here))) &&
                                true),Here)) &&
                 ((_C_242 : \at((((\offset_min(\at(value_1,Here)) <=
                                    \at(0,Here)) &&
                                   (\offset_max(\at(value_1,Here)) >=
                                     \at(0,Here))) &&
                                  true),Here)) &&
                   ((_C_243 : is_valid_map{Here}(map_3)) &&
                     (_C_244 : (map_3.capacity > (0 :> int32))))))));
behavior default:
  assigns value_1.c,
  value_1.d,
  map_3.count,
  (map_3.items + [0..((map_3.capacity :> integer) - 1)]).value_2.c,
  (map_3.items + [0..((map_3.capacity :> integer) - 1)]).value_2.d,
  (map_3.items + [0..((map_3.capacity :> integer) - 1)]).existent,
  (map_3.items + [0..((map_3.capacity :> integer) - 1)]).key_2.a,
  (map_3.items + [0..((map_3.capacity :> integer) - 1)]).key_2.b;
  allocates \nothing;
  ensures (_C_214 : ((_C_215 : \at(\at((((\offset_min(\at(key_1,Old)) <=
                                           \at(0,Old)) &&
                                          (\offset_max(\at(key_1,Old)) >=
                                            \at(0,Old))) &&
                                         true),Here),Old)) &&
                      ((_C_217 : \at(\at((((\offset_min(\at(map_3,Old)) <=
                                             \at(0,Old)) &&
                                            (\offset_max(\at(map_3,Old)) >=
                                              \at(0,Old))) &&
                                           true),Here),Old)) &&
                        ((_C_219 : is_valid_map{Here}(\at(map_3,Old))) &&
                          ((_C_221 : (\at(\at((((\offset_min(\at(value_1,Old)) <=
                                                  \at(0,Old)) &&
                                                 (\offset_max(\at(value_1,Old)) >=
                                                   \at(0,Old))) &&
                                                true),Here),Old) ||
                                       (\at(value_1,Old) == null))) &&
                            ((_C_223 : (\at(map_3,Old).capacity ==
                                         \at(map_3.capacity,Old))) &&
                              ((_C_225 : ((! has_key{Old}(\at(map_3,Old),
                                                          \at(key_1,Old))) ==>
                                           ((\result == (0 :> int32)) ==>
                                             ((\at(map_3.count,Old) ==
                                                \at(map_3,Old).count) &&
                                               (count{Here}(\at(map_3,Old),
                                                            0,
                                                            (\at(map_3.capacity,Old) :> integer)) ==
                                                 count{Here}(\at(map_3,Old),
                                                             0,
                                                             (\at(map_3,Old).capacity :> integer))))))) &&
                                ((_C_227 : (has_key{Old}(\at(map_3,Old),
                                                         \at(key_1,Old)) ==>
                                             ((\result == (1 :> int32)) ==>
                                               (((\at(map_3.count,Old) :> integer) ==
                                                  ((\at(map_3,Old).count :> integer) +
                                                    1)) &&
                                                 (count{Here}(\at(map_3,Old),
                                                              0,
                                                              (\at(map_3.capacity,Old) :> integer)) ==
                                                   (count{Here}(\at(map_3,Old),
                                                                0,
                                                                (\at(map_3,Old).capacity :> integer)) +
                                                     1)))))) &&
                                  ((_C_229 : (has_key{Old}(\at(map_3,Old),
                                                           \at(key_1,Old)) ==>
                                               ((\result == (1 :> int32)) ==>
                                                 (\exists integer i_12;
                                                   ((((((0 <= i_12) &&
                                                         (i_12 <
                                                           (\at(map_3,Old).capacity :> integer))) &&
                                                        (\at((map_3.items +
                                                               i_12).key_2.a,Old) ==
                                                          \at(key_1,Old).a)) &&
                                                       (\at((map_3.items +
                                                              i_12).key_2.b,Old) ==
                                                         \at(key_1,Old).b)) &&
                                                      (\at((map_3.items +
                                                             i_12).existent,Old) ==
                                                        (1 :> int32))) &&
                                                     (\exists integer j_2;
                                                       (((((0 <= j_2) &&
                                                            (j_2 <
                                                              (\at(map_3,Old).capacity :> integer))) &&
                                                           ((\at(map_3,Old).items +
                                                              j_2).existent ==
                                                             (0 :> int32))) &&
                                                          ((\at(map_3,Old).items +
                                                             j_2).key_2.a ==
                                                            \at(key_1,Old).a)) &&
                                                         ((\at(map_3,Old).items +
                                                            j_2).key_2.b ==
                                                           \at(key_1,Old).b)))))))) &&
                                    ((_C_231 : (\forall integer i_13;
                                                 (((((0 <= i_13) &&
                                                      (i_13 <
                                                        (\at(map_3,Old).capacity :> integer))) &&
                                                     ((! (\at((map_3.items +
                                                                i_13).key_2.a,Old) ==
                                                           \at(key_1,Old).a)) ||
                                                       (! (\at((map_3.items +
                                                                 i_13).key_2.b,Old) ==
                                                            \at(key_1,Old).b)))) &&
                                                    (\at((map_3.items + i_13).existent,Old) ==
                                                      (1 :> int32))) &&
                                                   (\exists integer j_3;
                                                     (((((0 <= j_3) &&
                                                          (j_3 <
                                                            (\at(map_3,Old).capacity :> integer))) &&
                                                         (\at((map_3.items +
                                                                i_13).key_2.a,Old) ==
                                                           (\at(map_3,Old).items +
                                                             j_3).key_2.a)) &&
                                                        (\at((map_3.items +
                                                               i_13).key_2.b,Old) ==
                                                          (\at(map_3,Old).items +
                                                            j_3).key_2.b)) &&
                                                       (\at((map_3.items +
                                                              i_13).existent,Old) ==
                                                         (\at(map_3,Old).items +
                                                           j_3).existent)))))) &&
                                      ((_C_233 : (\forall __anonstruct_Key_21[..] key_1;
                                                   ((! has_key{Old}(\at(map_3,Old),
                                                                    key_1)) ==>
                                                     (! has_key{Here}(
                                                     \at(map_3,Old), key_1))))) &&
                                        ((_C_235 : ((\result == (0 :> int32)) ==>
                                                     (\at(value_1,Old) ==
                                                       \at(value_1,Old)))) &&
                                          ((_C_237 : (((\result ==
                                                         (1 :> int32)) &&
                                                        (\at(value_1,Old) ==
                                                          null)) ==>
                                                       ((\at(value_1,Old).c ==
                                                          \at(value_1.c,Old)) &&
                                                         (\at(value_1,Old).d ==
                                                           \at(value_1.d,Old))))) &&
                                            (_C_238 : (((\result ==
                                                          (1 :> int32)) &&
                                                         (! (\at(value_1,Old) ==
                                                              null))) ==>
                                                        (\exists integer i_14;
                                                          ((((0 <= i_14) &&
                                                              (i_14 <
                                                                (\at(map_3.capacity,Old) :> integer))) &&
                                                             (\at((map_3.items +
                                                                    i_14).value_2.c,Old) ==
                                                               \at(value_1,Old).c)) &&
                                                            (\at((map_3.items +
                                                                   i_14).value_2.d,Old) ==
                                                              \at(value_1,Old).d))))))))))))))))));
{  
   (var int32 foundIndex);
   
   (var int32 i);
   
   (var __anonstruct_Key_21[0] tmp_key);
   
   (var int32 insertIndex);
   
   (var int32 i_0);
   
   (var int32 __retres);
   
   {  (_C_46 : (tmp_key = (_C_45 : (new __anonstruct_Key_21[1]))));
      (_C_47 : (foundIndex = (-1 :> int32)));
      (if (_C_109 : ((_C_108 : map_3.count) >= (1 :> int32))) then 
      {  
         {  (_C_49 : (i = (0 :> int32)));
            (LoopEntry : 
            loop 
            behavior default:
              invariant (_C_61 : \at((((\offset_min(\at(map_3,Here)) <=
                                         \at(0,Here)) &&
                                        (\offset_max(\at(map_3,Here)) >=
                                          \at(0,Here))) &&
                                       true),Here));
            behavior default:
              invariant (_C_60 : \at((if (\at(0,Here) <=
                                           \at(((map_3.capacity :> integer) -
                                                 1),Here)) then (((\offset_min(
                                                                    \at(map_3.items,Here)) <=
                                                                    \at(0,Here)) &&
                                                                   (\offset_max(
                                                                    \at(map_3.items,Here)) >=
                                                                    \at(
                                                                    ((map_3.capacity :> integer) -
                                                                    1),Here))) &&
                                                                  (\forall integer __framac_tmp5;
                                                                    (((\at(0,Here) <=
                                                                    __framac_tmp5) &&
                                                                    (__framac_tmp5 <=
                                                                    \at(
                                                                    ((map_3.capacity :> integer) -
                                                                    1),Here))) ==>
                                                                    ((((\offset_min(
                                                                    \at(
                                                                    (map_3.items +
                                                                    __framac_tmp5).key_2,Here)) <=
                                                                    \at(0,Here)) &&
                                                                    (\offset_max(
                                                                    \at(
                                                                    (map_3.items +
                                                                    __framac_tmp5).key_2,Here)) >=
                                                                    \at(0,Here))) &&
                                                                    true) &&
                                                                    (((\offset_min(
                                                                    \at(
                                                                    (map_3.items +
                                                                    __framac_tmp5).value_2,Here)) <=
                                                                    \at(0,Here)) &&
                                                                    (\offset_max(
                                                                    \at(
                                                                    (map_3.items +
                                                                    __framac_tmp5).value_2,Here)) >=
                                                                    \at(0,Here))) &&
                                                                    true))))) else true),Here));
            behavior default:
              invariant (_C_57 : ((_C_58 : ((0 :> int32) <= i)) &&
                                   (_C_59 : (i <= map_3.capacity))));
            behavior default:
              invariant (_C_54 : ((_C_55 : (((- 1) :> int32) <= foundIndex)) &&
                                   (_C_56 : (foundIndex < map_3.capacity))));
            behavior default:
              invariant (_C_51 : ((_C_52 : ((0 :> int32) <= map_3.count)) &&
                                   (_C_53 : (map_3.count <= map_3.capacity))));
            variant (_C_50 : ((map_3.capacity :> integer) - (i :> integer)));
            while (true)
            {  
               {  (LoopCurrent : (if (_C_63 : (i < (_C_62 : map_3.capacity))) then () else 
                                 (goto while_0_break)));
                  
                  {  (if (_C_102 : (((_C_101 : (_C_100 : ((_C_99 : map_3.items) +
                                                           i)).existent) :> int32) !=
                                     (0 :> int32))) then (if (_C_98 : 
                                                             ((_C_97 : 
                                                              (_C_96 : 
                                                              (_C_95 : 
                                                              ((_C_94 : map_3.items) +
                                                                i)).key_2).a) ==
                                                               (_C_93 : key_1.a))) then 
                                                         (if (_C_92 : 
                                                             ((_C_91 : 
                                                              (_C_90 : 
                                                              (_C_89 : 
                                                              ((_C_88 : map_3.items) +
                                                                i)).key_2).b) ==
                                                               (_C_87 : key_1.b))) then 
                                                         {  (if (_C_76 : 
                                                                (value_1 !=
                                                                  null)) then 
                                                            {  (_C_69 : (
                                                               (_C_68 : value_1.c) = 
                                                               (_C_67 : 
                                                               (_C_66 : 
                                                               (_C_65 : 
                                                               ((_C_64 : map_3.items) +
                                                                 i)).value_2).c)));
                                                               (_C_75 : (
                                                               (_C_74 : value_1.d) = 
                                                               (_C_73 : 
                                                               (_C_72 : 
                                                               (_C_71 : 
                                                               ((_C_70 : map_3.items) +
                                                                 i)).value_2).d)))
                                                            } else ());
                                                            (_C_80 : (
                                                            (_C_79 : 
                                                            (_C_78 : 
                                                            ((_C_77 : map_3.items) +
                                                              i)).existent) = (0 :> int32)));
                                                            (_C_85 : (
                                                            (_C_84 : map_3.count) = 
                                                            (_C_83 : (
                                                            (_C_82 : 
                                                            ((_C_81 : map_3.count) -
                                                              (1 :> int32))) :> int32))));
                                                            (_C_86 : (foundIndex = i));
                                                            
                                                            (goto while_0_break)
                                                         } else ()) else ()) else ())
                  };
                  (_C_105 : (i = (_C_104 : ((_C_103 : (i + (1 :> int32))) :> int32))))
               }
            });
            (while_0_break : ())
         };
         (if (_C_107 : (foundIndex == (-1 :> int32))) then 
         {  (_C_106 : (__retres = (0 :> int32)));
            
            (goto return_label)
         } else ())
      } else 
      {  (_C_48 : (__retres = (0 :> int32)));
         
         (goto return_label)
      });
      (if (_C_211 : ((_C_210 : map_3.count) >= (1 :> int32))) then 
      {  (_C_110 : (insertIndex = foundIndex));
         
         {  (_C_113 : (i_0 = (_C_112 : ((_C_111 : (foundIndex + (1 :> int32))) :> int32))));
            (LoopEntry : 
            loop 
            behavior default:
              invariant (_C_128 : \at((((\offset_min(\at(map_3,Here)) <=
                                          \at(0,Here)) &&
                                         (\offset_max(\at(map_3,Here)) >=
                                           \at(0,Here))) &&
                                        true),Here));
            behavior default:
              invariant (_C_127 : \at((if (\at(0,Here) <=
                                            \at(((map_3.capacity :> integer) -
                                                  1),Here)) then (((\offset_min(
                                                                    \at(map_3.items,Here)) <=
                                                                    \at(0,Here)) &&
                                                                    (\offset_max(
                                                                    \at(map_3.items,Here)) >=
                                                                    \at(
                                                                    ((map_3.capacity :> integer) -
                                                                    1),Here))) &&
                                                                   (\forall integer __framac_tmp9;
                                                                    (((\at(0,Here) <=
                                                                    __framac_tmp9) &&
                                                                    (__framac_tmp9 <=
                                                                    \at(
                                                                    ((map_3.capacity :> integer) -
                                                                    1),Here))) ==>
                                                                    ((((\offset_min(
                                                                    \at(
                                                                    (map_3.items +
                                                                    __framac_tmp9).key_2,Here)) <=
                                                                    \at(0,Here)) &&
                                                                    (\offset_max(
                                                                    \at(
                                                                    (map_3.items +
                                                                    __framac_tmp9).key_2,Here)) >=
                                                                    \at(0,Here))) &&
                                                                    true) &&
                                                                    (((\offset_min(
                                                                    \at(
                                                                    (map_3.items +
                                                                    __framac_tmp9).value_2,Here)) <=
                                                                    \at(0,Here)) &&
                                                                    (\offset_max(
                                                                    \at(
                                                                    (map_3.items +
                                                                    __framac_tmp9).value_2,Here)) >=
                                                                    \at(0,Here))) &&
                                                                    true))))) else true),Here));
            behavior default:
              invariant (_C_124 : ((_C_125 : ((0 :> int32) <= foundIndex)) &&
                                    (_C_126 : (foundIndex < map_3.capacity))));
            behavior default:
              invariant (_C_121 : ((_C_122 : (((foundIndex :> integer) + 1) <=
                                               (i_0 :> integer))) &&
                                    (_C_123 : (i_0 <= map_3.capacity))));
            behavior default:
              invariant (_C_118 : ((_C_119 : ((0 :> int32) <= insertIndex)) &&
                                    (_C_120 : (insertIndex < map_3.capacity))));
            behavior default:
              invariant (_C_115 : ((_C_116 : ((0 :> int32) <= map_3.count)) &&
                                    (_C_117 : (map_3.count <= map_3.capacity))));
            variant (_C_114 : ((map_3.capacity :> integer) -
                                (i_0 :> integer)));
            while (true)
            {  
               {  (LoopCurrent : (if (_C_130 : (i_0 <
                                                 (_C_129 : map_3.capacity))) then () else 
                                 (goto while_0_break_0)));
                  
                  {  (if (_C_205 : ((_C_204 : (_C_203 : ((_C_202 : map_3.items) +
                                                          i_0)).existent) ==
                                     (1 :> int32))) then 
                     {  (_C_136 : ((_C_135 : tmp_key.a) = (_C_134 : (_C_133 : 
                                                                    (_C_132 : 
                                                                    ((_C_131 : map_3.items) +
                                                                    insertIndex)).key_2).a)));
                        (_C_142 : ((_C_141 : tmp_key.b) = (_C_140 : (_C_139 : 
                                                                    (_C_138 : 
                                                                    ((_C_137 : map_3.items) +
                                                                    insertIndex)).key_2).b)));
                        (_C_151 : ((_C_150 : (_C_149 : (_C_148 : ((_C_147 : map_3.items) +
                                                                   insertIndex)).key_2).a) = 
                        (_C_146 : (_C_145 : (_C_144 : ((_C_143 : map_3.items) +
                                                        i_0)).key_2).a)));
                        (_C_160 : ((_C_159 : (_C_158 : (_C_157 : ((_C_156 : map_3.items) +
                                                                   insertIndex)).key_2).b) = 
                        (_C_155 : (_C_154 : (_C_153 : ((_C_152 : map_3.items) +
                                                        i_0)).key_2).b)));
                        (_C_169 : ((_C_168 : (_C_167 : (_C_166 : ((_C_165 : map_3.items) +
                                                                   insertIndex)).value_2).c) = 
                        (_C_164 : (_C_163 : (_C_162 : ((_C_161 : map_3.items) +
                                                        i_0)).value_2).c)));
                        (_C_178 : ((_C_177 : (_C_176 : (_C_175 : ((_C_174 : map_3.items) +
                                                                   insertIndex)).value_2).d) = 
                        (_C_173 : (_C_172 : (_C_171 : ((_C_170 : map_3.items) +
                                                        i_0)).value_2).d)));
                        (_C_182 : ((_C_181 : (_C_180 : ((_C_179 : map_3.items) +
                                                         insertIndex)).existent) = (1 :> int32)));
                        (_C_188 : ((_C_187 : (_C_186 : (_C_185 : ((_C_184 : map_3.items) +
                                                                   i_0)).key_2).a) = 
                        (_C_183 : tmp_key.a)));
                        (_C_194 : ((_C_193 : (_C_192 : (_C_191 : ((_C_190 : map_3.items) +
                                                                   i_0)).key_2).b) = 
                        (_C_189 : tmp_key.b)));
                        (_C_198 : ((_C_197 : (_C_196 : ((_C_195 : map_3.items) +
                                                         i_0)).existent) = (0 :> int32)));
                        (_C_201 : (insertIndex = (_C_200 : ((_C_199 : 
                                                            (insertIndex +
                                                              (1 :> int32))) :> int32))))
                     } else ())
                  };
                  (_C_208 : (i_0 = (_C_207 : ((_C_206 : (i_0 + (1 :> int32))) :> int32))))
               }
            });
            (while_0_break_0 : ())
         };
         
         {  (_C_209 : (__retres = (1 :> int32)));
            
            (goto return_label)
         }
      } else ());
      (_C_212 : (__retres = (1 :> int32)));
      (return_label : (_C_213 : (free(tmp_key))));
      
      (return __retres)
   }
}

int32 getElement(__anonstruct_Map_24[..] map_1,
                 __anonstruct_Key_21[..] key_0,
                 __anonstruct_Value_22[..] value_0)
  requires ((_C_297 : (! (map_1 == null))) &&
             ((_C_298 : (! (key_0 == null))) &&
               ((_C_299 : \at((((\offset_min(\at(key_0,Here)) <= \at(0,Here)) &&
                                 (\offset_max(\at(key_0,Here)) >=
                                   \at(0,Here))) &&
                                true),Here)) &&
                 ((_C_300 : \at((((\offset_min(\at(value_0,Here)) <=
                                    \at(0,Here)) &&
                                   (\offset_max(\at(value_0,Here)) >=
                                     \at(0,Here))) &&
                                  true),Here)) &&
                   ((_C_301 : is_valid_map{Here}(map_1)) &&
                     (_C_302 : (map_1.capacity > (0 :> int32))))))));
behavior default:
  assigns value_0.c,
  value_0.d;
  allocates \nothing;
  ensures (_C_284 : ((_C_285 : (has_key{Old}(\at(map_1,Old), \at(key_0,Old)) ==>
                                 (\result == (1 :> int32)))) &&
                      ((_C_287 : ((! has_key{Old}(\at(map_1,Old),
                                                  \at(key_0,Old))) ==>
                                   ((\result == (0 :> int32)) &&
                                     (\at(value_0,Old) == \at(value_0,Old))))) &&
                        ((_C_289 : (\at(map_1.capacity,Old) ==
                                     \at(map_1,Old).capacity)) &&
                          ((_C_291 : (\at(map_1.count,Old) ==
                                       \at(map_1,Old).count)) &&
                            ((_C_293 : (\forall integer i_15;
                                         (((0 <= i_15) &&
                                            (i_15 <
                                              (\at(map_1,Old).capacity :> integer))) ==>
                                           ((((((\at(map_1,Old).items + i_15).existent ==
                                                 \at((map_1.items + i_15).existent,Old)) &&
                                                ((\at(map_1,Old).items +
                                                   i_15).key_2.a ==
                                                  \at((map_1.items + i_15).key_2.a,Old))) &&
                                               ((\at(map_1,Old).items + i_15).key_2.b ==
                                                 \at((map_1.items + i_15).key_2.b,Old))) &&
                                              ((\at(map_1,Old).items + i_15).value_2.c ==
                                                \at((map_1.items + i_15).value_2.c,Old))) &&
                                             ((\at(map_1,Old).items + i_15).value_2.d ==
                                               \at((map_1.items + i_15).value_2.d,Old)))))) &&
                              ((_C_295 : (\at(key_0,Old) == \at(key_0,Old))) &&
                                (_C_296 : is_valid_map{Here}(\at(map_1,Old))))))))));
{  
   (var int32 i_0_0);
   
   (var int32 tmp_0);
   
   (var int32 __retres_0);
   
   {  
      {  (_C_245 : (i_0_0 = (0 :> int32)));
         (LoopEntry : 
         loop 
         behavior default:
           invariant (_C_252 : ((_C_253 : ((0 :> int32) <= i_0_0)) &&
                                 (_C_254 : (i_0_0 <= map_1.capacity))));
         behavior default:
           invariant (_C_251 : is_valid_map{Here}(map_1));
         behavior default:
           invariant (_C_250 : (map_1.capacity > (0 :> int32)));
         behavior default:
           invariant (_C_249 : \at((if (\at(0,Here) <=
                                         \at(((map_1.capacity :> integer) -
                                               1),Here)) then (((\offset_min(
                                                                  \at(map_1.items,Here)) <=
                                                                  \at(0,Here)) &&
                                                                 (\offset_max(
                                                                   \at(map_1.items,Here)) >=
                                                                   \at(
                                                                   ((map_1.capacity :> integer) -
                                                                    1),Here))) &&
                                                                (\forall integer __framac_tmp18;
                                                                  (((\at(0,Here) <=
                                                                    __framac_tmp18) &&
                                                                    (__framac_tmp18 <=
                                                                    \at(
                                                                    ((map_1.capacity :> integer) -
                                                                    1),Here))) ==>
                                                                    ((((\offset_min(
                                                                    \at(
                                                                    (map_1.items +
                                                                    __framac_tmp18).key_2,Here)) <=
                                                                    \at(0,Here)) &&
                                                                    (\offset_max(
                                                                    \at(
                                                                    (map_1.items +
                                                                    __framac_tmp18).key_2,Here)) >=
                                                                    \at(0,Here))) &&
                                                                    true) &&
                                                                    (((\offset_min(
                                                                    \at(
                                                                    (map_1.items +
                                                                    __framac_tmp18).value_2,Here)) <=
                                                                    \at(0,Here)) &&
                                                                    (\offset_max(
                                                                    \at(
                                                                    (map_1.items +
                                                                    __framac_tmp18).value_2,Here)) >=
                                                                    \at(0,Here))) &&
                                                                    true))))) else true),Here));
         behavior default:
           invariant (_C_248 : (\at(map_1.capacity,Pre) == map_1.capacity));
         behavior default:
           invariant (_C_247 : (\at(map_1.count,Pre) == map_1.count));
         variant (_C_246 : ((map_1.capacity :> integer) - (i_0_0 :> integer)));
         while (true)
         {  
            {  (LoopCurrent : (if (_C_256 : (i_0_0 <
                                              (_C_255 : map_1.capacity))) then () else 
                              (goto while_0_break_0_0)));
               
               {  (if (_C_279 : (((_C_278 : (_C_277 : ((_C_276 : map_1.items) +
                                                        i_0_0)).existent) :> int32) !=
                                  (0 :> int32))) then 
                  {  (_C_261 : (tmp_0 = (_C_260 : compareKeys((_C_259 : 
                                                              (_C_258 : 
                                                              ((_C_257 : map_1.items) +
                                                                i_0_0)).key_2),
                                                              key_0))));
                     (if (_C_275 : ((tmp_0 :> int32) != (0 :> int32))) then 
                     {  (_C_267 : ((_C_266 : value_0.c) = (_C_265 : (_C_264 : 
                                                                    (_C_263 : 
                                                                    ((_C_262 : map_1.items) +
                                                                    i_0_0)).value_2).c)));
                        (_C_273 : ((_C_272 : value_0.d) = (_C_271 : (_C_270 : 
                                                                    (_C_269 : 
                                                                    ((_C_268 : map_1.items) +
                                                                    i_0_0)).value_2).d)));
                        
                        {  (_C_274 : (__retres_0 = (1 :> int32)));
                           
                           (goto return_label_0)
                        }
                     } else ())
                  } else ())
               };
               (_C_282 : (i_0_0 = (_C_281 : ((_C_280 : (i_0_0 + (1 :> int32))) :> int32))))
            }
         });
         (while_0_break_0_0 : ())
      };
      (_C_283 : (__retres_0 = (0 :> int32)));
      (return_label_0 : 
      (return __retres_0))
   }
}
