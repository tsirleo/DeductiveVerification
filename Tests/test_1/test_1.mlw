module Array

use import int.Int
use import ref.Ref

type array 't

function llen (array 't): int
function lget (array 't) int: 't
function lset (array 't) int 't: array 't
function lcnt (array 't) 't: int

axiom lendef: forall a: array 't.
    llen a >= 0
axiom lenset: forall a: array 't, i v.
    0 <= i < llen a
    -> llen (lset a i v) = llen a
axiom getset: forall a: array 't, i j v.
    0 <= i < llen a
    /\ 0 <= j < llen a
    -> lget (lset a i v) j = (if i = j then v else lget a j)

(* if add existing -> + 1 *)

axiom lcntset: 
    forall a: array 't, i : int, v1 : 't, v2 : 't. 
        0 <= i < (llen a) && 
        (lcnt (lset a i v1) v2) = 
            (
                if v1 = v2 && (lget a i) <> v1 then
                    ((lcnt a v1) + 1)
                else
                    (lcnt a v1)
            )

(* makes a new array of length ln with all values v *)
val mk (ln: int) (v: 't): ref (array 't)
    requires { ln >= 0 }
    ensures { (llen !result) = ln }
    ensures { forall i : int. 
                (0 <= i < ln) -> (lget !result i) = v
            }
(* TODO add specification *)

val len (self: ref (array 't)): int
    ensures { result = (llen !self) }
    ensures { (llen !self) = (llen (old !self)) }
    ensures { !self = (old !self) }
(* TODO add specification *)

val ([]) (self: ref (array 't)) (i: int): 't
    requires { 0 <= i < (llen !self) }
    ensures { result = (lget !self i) }
    ensures { (llen !self) = (llen (old !self)) }
    ensures { !self = (old !self) }
(* TODO add specification *)

val set (self: ref (array 't)) (i: int) (v: 't): unit
    requires { 0 <= i < (llen !self) }
    writes {self}
    ensures { !self = (lset (old !self) i v) }
    ensures { (llen !self) = (llen (old !self)) }
(* TODO add specification *)


end



module Merge

use import int.Int
use import ref.Ref
use import Array

predicate sorted (self : ref (array int))
    = 
        forall i : int.
            (0 <= i < (llen !self) - 1) -> ((lget !self i) <= (lget !self (i + 1)))

(* "a" and "b" are arrays sorted by non-decreasing order *)
(* merges "a" and "b" into a new non-decreasing array *)
(* [1, 10], [2, 5] -> [1, 2, 5, 10] *)
(* [2, 3], [1, 3] -> [1, 2, 3, 3] *)
let merge (a b: ref (array int)) : ref (array int)
    requires { (sorted a) }
    requires { (sorted b) }
    requires { (llen !a) >= 0 }
    requires { (llen !b) >= 0 }
    ensures { (llen !result) = (llen !a) + (llen !b) }
    ensures { (sorted result) }
    ensures { 
        forall i : int.
            0 <= i < (llen !result) && (lcnt !result (lget !result i)) = (lcnt !a (lget !result i)) + (lcnt !b (lget !result i))
    }

(* TODO add the full specification *)
(* TODO prove the full correctness *)
=
    let c = mk (len a + len b) 0 in
    let i = ref 0 in
    let j = ref 0 in

        while !i < len a || !j < len b do
            variant { (llen !a) + (llen !b) - (!i + !j) }
            invariant { !i >= 0 }
            invariant { !j >= 0 }
            invariant { (llen !a) - !i >= 0 }
            invariant { (llen !b) - !j >= 0 }
            invariant { (llen !a) + (llen !b) - !i - !j >= 0 }
            invariant { !i + !j >= 0}
            invariant { !i + !j <= (llen !c)}
            invariant { !i <= (llen !a)}
            invariant { !j <= (llen !b)}
            invariant { (llen !c) = (llen !a) + (llen !b) }
            invariant { 
                forall k : int.
                    (0 <= k < !i + !j - 1) -> (lget !c k) <= (lget !c (k + 1))
            }
            invariant { (!i < llen !a) && (!i + !j > 0) -> ((lget !c (!i + !j - 1)) <= (lget !a !i))  }
            invariant { (!j < llen !b) && (!i + !j > 0) -> ((lget !c (!i + !j - 1)) <= (lget !b !j))  }

            
            if !i = len a then (

                set c (!i + !j) b[!j];
                j := !j + 1

            ) else if !j = len b then (

                set c (!i + !j) a[!i];
                i := !i + 1

            ) else if a[!i] <= b[!j] then (

                set c (!i + !j) a[!i];
                i := !i + 1

            ) else (


                set c (!i + !j) b[!j];
                j := !j + 1

            )
        done;
        c

end
