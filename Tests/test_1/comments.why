1) requires {len >= 0} при создании массива
2) Забывали ограничение 0 <= i < len a.
3) ∃i => импликация через /\, а не ->!
4) Подсчёт элементов:
a) Неплохое понятное определение в функциональном стиле, но необходимо угадать порядок рекурсивного сведения.
function count (a: array 't) (v : 't) (n: int): int =
    if n = 0 then 0
    else if lget a (n - 1) = then 1 + count a v (n-1)
    else count a v (n - 1)
б) Из реализации перенести в идею расширения в спецификацию. Видно синтаксически, что определение неполное (работает не для всех значений параметров, а по решению).
в) Алгебраическое определение.
г) Свойства о функции. Типичный приём.
function count (a: array 't) (v: 't) (m n: int): int
axiom count_empty: forall a: array 't, v m n.
    m >= n /\ ... -> count a v m n = 0
axiom count_single: forall a: array 't, v m n.
    n = m + 1 /\ ... -> count a v m n = if lget a m = v then 1 else 0
axiom count_split: forall a: array 't, v m k n.
    m <= k <= n /\ ... -> count a v m n = count a v m k + count a v k n
    ... - соответствие с длиной массива.
Основная проблема - триггеры. У count_split только сумма => нужно писать assert с явным разделением диапазона.
И неалгебраическое.
count_single можно пытаться записать как forall a: array 't, v m. ... -> count a v m (m + 1) = if lget a m = v then 1 else 0
    и напороться на приколы сопоставления в солвере (будет сопоставлять с явным +1).
    (n - 1) n не подходит, а (n - 1) ((n - 1) + 1) подходит ☺!
Взрыва здесь не будет.