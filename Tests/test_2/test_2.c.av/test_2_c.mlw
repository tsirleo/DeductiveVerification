
theory Axiomatic_Padding 
                           use why3.Bool.Bool 
                           
end

theory Int32_of_Int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int32.t = (Int32.of_int (Int16.to_int n))
  
end

theory Bit_int32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int32_of_Int16
  
  use export enum.Bit_int32_of_bit_int16
  
end

theory Int64_of_Int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int64.t = (Int64.of_int (Int16.to_int n))
  
end

theory Bit_int64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int64_of_Int16
  
  use export enum.Bit_int64_of_bit_int16
  
end

theory Int64_of_Int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int64.t = (Int64.of_int (Int32.to_int n))
  
end

theory Bit_int64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int64_of_Int32
  
  use export enum.Bit_int64_of_bit_int32
  
end

theory Int8_of_Int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int8.t = (Int8.of_int (Int16.to_int n))
  
end

theory Bit_int8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int8_of_Int16
  
  use export enum.Bit_int8_of_bit_int16
  
end

theory Int8_of_Int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int8.t = (Int8.of_int (Int32.to_int n))
  
end

theory Bit_int8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int8_of_Int32
  
  use export enum.Bit_int8_of_bit_int32
  
end

theory Int8_of_Int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int8.t = (Int8.of_int (Int64.to_int n))
  
end

theory Bit_int8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int8_of_Int64
  
  use export enum.Bit_int8_of_bit_int64
  
end

theory Uint16_of_Int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint16.t = (Uint16.of_int (Int16.to_int n))
  
end

theory Bit_uint16_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint16_of_Int16
  
  use export enum.Bit_uint16_of_bit_int16
  
end

theory Uint16_of_Int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint16.t = (Uint16.of_int (Int32.to_int n))
  
end

theory Bit_uint16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint16_of_Int32
  
  use export enum.Bit_uint16_of_bit_int32
  
end

theory Uint16_of_Int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint16.t = (Uint16.of_int (Int64.to_int n))
  
end

theory Bit_uint16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint16_of_Int64
  
  use export enum.Bit_uint16_of_bit_int64
  
end

theory Uint16_of_Int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint16.t = (Uint16.of_int (Int8.to_int n))
  
end

theory Bit_uint16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint16_of_Int8
  
  use export enum.Bit_uint16_of_bit_int8
  
end

theory Uint32_of_Int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint32.t = (Uint32.of_int (Int16.to_int n))
  
end

theory Bit_uint32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint32_of_Int16
  
  use export enum.Bit_uint32_of_bit_int16
  
end

theory Uint32_of_Int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint32.t = (Uint32.of_int (Int32.to_int n))
  
end

theory Bit_uint32_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint32_of_Int32
  
  use export enum.Bit_uint32_of_bit_int32
  
end

theory Uint32_of_Int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint32.t = (Uint32.of_int (Int64.to_int n))
  
end

theory Bit_uint32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint32_of_Int64
  
  use export enum.Bit_uint32_of_bit_int64
  
end

theory Uint32_of_Int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint32.t = (Uint32.of_int (Int8.to_int n))
  
end

theory Bit_uint32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint32_of_Int8
  
  use export enum.Bit_uint32_of_bit_int8
  
end

theory Uint32_of_Uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint32.t = (Uint32.of_int (Uint16.to_int n))
  
end

theory Bit_uint32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint16
  
  use export enum.Bit_uint32_of_bit_uint16
  
end

theory Uint64_of_Int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint64.t = (Uint64.of_int (Int16.to_int n))
  
end

theory Bit_uint64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint64_of_Int16
  
  use export enum.Bit_uint64_of_bit_int16
  
end

theory Uint64_of_Int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint64.t = (Uint64.of_int (Int32.to_int n))
  
end

theory Bit_uint64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint64_of_Int32
  
  use export enum.Bit_uint64_of_bit_int32
  
end

theory Uint64_of_Int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint64.t = (Uint64.of_int (Int64.to_int n))
  
end

theory Bit_uint64_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint64_of_Int64
  
  use export enum.Bit_uint64_of_bit_int64
  
end

theory Uint64_of_Int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint64.t = (Uint64.of_int (Int8.to_int n))
  
end

theory Bit_uint64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint64_of_Int8
  
  use export enum.Bit_uint64_of_bit_int8
  
end

theory Uint64_of_Uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint64.t = (Uint64.of_int (Uint16.to_int n))
  
end

theory Bit_uint64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint16
  
  use export enum.Bit_uint64_of_bit_uint16
  
end

theory Uint64_of_Uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint64.t = (Uint64.of_int (Uint32.to_int n))
  
end

theory Bit_uint64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint32
  
  use export enum.Bit_uint64_of_bit_uint32
  
end

theory Uint8_of_Int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint8.t = (Uint8.of_int (Int16.to_int n))
  
end

theory Bit_uint8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint8_of_Int16
  
  use export enum.Bit_uint8_of_bit_int16
  
end

theory Uint8_of_Int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint8.t = (Uint8.of_int (Int32.to_int n))
  
end

theory Bit_uint8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint8_of_Int32
  
  use export enum.Bit_uint8_of_bit_int32
  
end

theory Uint8_of_Int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint8.t = (Uint8.of_int (Int64.to_int n))
  
end

theory Bit_uint8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint8_of_Int64
  
  use export enum.Bit_uint8_of_bit_int64
  
end

theory Uint8_of_Int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint8.t = (Uint8.of_int (Int8.to_int n))
  
end

theory Bit_uint8_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint8_of_Int8
  
  use export enum.Bit_uint8_of_bit_int8
  
end

theory Uint8_of_Uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint8.t = (Uint8.of_int (Uint16.to_int n))
  
end

theory Bit_uint8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint16
  
  use export enum.Bit_uint8_of_bit_uint16
  
end

theory Uint8_of_Uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint8.t = (Uint8.of_int (Uint32.to_int n))
  
end

theory Bit_uint8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint32
  
  use export enum.Bit_uint8_of_bit_uint32
  
end

theory Uint8_of_Uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint8.t = (Uint8.of_int (Uint64.to_int n))
  
end

theory Bit_uint8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint64
  
  use export enum.Bit_uint8_of_bit_uint64
  
end

theory Int16_of_Int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int16.t = (Int16.of_int (Int32.to_int n))
  
end

theory Bit_int16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int16_of_Int32
  
  use export enum.Bit_int16_of_bit_int32
  
end

theory Int16_of_Int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int16.t = (Int16.of_int (Int64.to_int n))
  
end

theory Bit_int16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int16_of_Int64
  
  use export enum.Bit_int16_of_bit_int64
  
end

theory Int32_of_Int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int32.t = (Int32.of_int (Int64.to_int n))
  
end

theory Bit_int32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int32_of_Int64
  
  use export enum.Bit_int32_of_bit_int64
  
end

theory Int16_of_Int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int16.t = (Int16.of_int (Int8.to_int n))
  
end

theory Bit_int16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int16_of_Int8
  
  use export enum.Bit_int16_of_bit_int8
  
end

theory Int32_of_Int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int32.t = (Int32.of_int (Int8.to_int n))
  
end

theory Bit_int32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int32_of_Int8
  
  use export enum.Bit_int32_of_bit_int8
  
end

theory Int64_of_Int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int64.t = (Int64.of_int (Int8.to_int n))
  
end

theory Bit_int64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int64_of_Int8
  
  use export enum.Bit_int64_of_bit_int8
  
end

theory Int16_of_Uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int16.t = (Int16.of_int (Uint16.to_int n))
  
end

theory Bit_int16_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int16_of_Uint16
  
  use export enum.Bit_int16_of_bit_uint16
  
end

theory Int32_of_Uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int32.t = (Int32.of_int (Uint16.to_int n))
  
end

theory Bit_int32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int32_of_Uint16
  
  use export enum.Bit_int32_of_bit_uint16
  
end

theory Int64_of_Uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int64.t = (Int64.of_int (Uint16.to_int n))
  
end

theory Bit_int64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int64_of_Uint16
  
  use export enum.Bit_int64_of_bit_uint16
  
end

theory Int8_of_Uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int8.t = (Int8.of_int (Uint16.to_int n))
  
end

theory Bit_int8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int8_of_Uint16
  
  use export enum.Bit_int8_of_bit_uint16
  
end

theory Int16_of_Uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int16.t = (Int16.of_int (Uint32.to_int n))
  
end

theory Bit_int16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int16_of_Uint32
  
  use export enum.Bit_int16_of_bit_uint32
  
end

theory Int32_of_Uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int32.t = (Int32.of_int (Uint32.to_int n))
  
end

theory Bit_int32_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int32_of_Uint32
  
  use export enum.Bit_int32_of_bit_uint32
  
end

theory Int64_of_Uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int64.t = (Int64.of_int (Uint32.to_int n))
  
end

theory Bit_int64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int64_of_Uint32
  
  use export enum.Bit_int64_of_bit_uint32
  
end

theory Int8_of_Uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int8.t = (Int8.of_int (Uint32.to_int n))
  
end

theory Bit_int8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int8_of_Uint32
  
  use export enum.Bit_int8_of_bit_uint32
  
end

theory Uint16_of_Uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint16.t = (Uint16.of_int (Uint32.to_int n))
  
end

theory Bit_uint16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint32
  
  use export enum.Bit_uint16_of_bit_uint32
  
end

theory Int16_of_Uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int16.t = (Int16.of_int (Uint64.to_int n))
  
end

theory Bit_int16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int16_of_Uint64
  
  use export enum.Bit_int16_of_bit_uint64
  
end

theory Int32_of_Uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int32.t = (Int32.of_int (Uint64.to_int n))
  
end

theory Bit_int32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int32_of_Uint64
  
  use export enum.Bit_int32_of_bit_uint64
  
end

theory Int64_of_Uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int64.t = (Int64.of_int (Uint64.to_int n))
  
end

theory Bit_int64_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int64_of_Uint64
  
  use export enum.Bit_int64_of_bit_uint64
  
end

theory Int8_of_Uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int8.t = (Int8.of_int (Uint64.to_int n))
  
end

theory Bit_int8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int8_of_Uint64
  
  use export enum.Bit_int8_of_bit_uint64
  
end

theory Uint16_of_Uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint16.t = (Uint16.of_int (Uint64.to_int n))
  
end

theory Bit_uint16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint64
  
  use export enum.Bit_uint16_of_bit_uint64
  
end

theory Uint32_of_Uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint32.t = (Uint32.of_int (Uint64.to_int n))
  
end

theory Bit_uint32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint64
  
  use export enum.Bit_uint32_of_bit_uint64
  
end

theory Int16_of_Uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int16.t = (Int16.of_int (Uint8.to_int n))
  
end

theory Bit_int16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int16_of_Uint8
  
  use export enum.Bit_int16_of_bit_uint8
  
end

theory Int32_of_Uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int32.t = (Int32.of_int (Uint8.to_int n))
  
end

theory Bit_int32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int32_of_Uint8
  
  use export enum.Bit_int32_of_bit_uint8
  
end

theory Int64_of_Uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int64.t = (Int64.of_int (Uint8.to_int n))
  
end

theory Bit_int64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int64_of_Uint8
  
  use export enum.Bit_int64_of_bit_uint8
  
end

theory Int8_of_Uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int8.t = (Int8.of_int (Uint8.to_int n))
  
end

theory Bit_int8_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int8_of_Uint8
  
  use export enum.Bit_int8_of_bit_uint8
  
end

theory Uint16_of_Uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint16.t = (Uint16.of_int (Uint8.to_int n))
  
end

theory Bit_uint16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint8
  
  use export enum.Bit_uint16_of_bit_uint8
  
end

theory Uint32_of_Uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint32.t = (Uint32.of_int (Uint8.to_int n))
  
end

theory Bit_uint32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint8
  
  use export enum.Bit_uint32_of_bit_uint8
  
end

theory Uint64_of_Uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint64.t = (Uint64.of_int (Uint8.to_int n))
  
end

theory Bit_uint64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint8
  
  use export enum.Bit_uint64_of_bit_uint8
  
end

module Unsafe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Globals_simple

  use why3.Bool.Bool 
  
end

theory Root_voidP

  use why3.Bool.Bool 
  
  use import core.Voidp 
  
end

module Root_voidP_safe

  use why3.Bool.Bool 
  
end

module Root_voidP_unsafe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Vertex_2_safe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Vertex_2_unsafe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Graph_4_safe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Graph_4_unsafe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Edge_3_safe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Edge_3_unsafe

  use why3.Bool.Bool 
  
end

theory Root___anonstruct_Graph_4

  use why3.Bool.Bool 
  
  type __anonstruct_Graph_4 
  
end

theory Root___anonstruct_Edge_3

  use why3.Bool.Bool 
  
  type __anonstruct_Edge_3 
  
end

theory Axiomatic_EdgesCount

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use bool.Bool 
  
  use why3.Bool.Bool 
  
  function count (pointer __anonstruct_Graph_4) int int int int (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)) (memory
  __anonstruct_Edge_3 Int32.t) (memory __anonstruct_Edge_3 Int32.t) (memory
  __anonstruct_Edge_3 Int32.t) : int
  
  
  axiom Count_zero
  #"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 75 81 188#
  "expl:Axiom count_zero"  :
  (forall __anonstruct_Graph_4_edges_g_3_6_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_17_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_17_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_17_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 77 22 104#
      (forall g_4_0 : (pointer __anonstruct_Graph_4).
       (forall f_0_1 : int.
        (forall t_0_1 : int.
         (forall m_0 : int.
          (forall n_3 : int.
           (((>=) m_0 n_3) ->
            ((=)
            (count g_4_0 f_0_1 t_0_1 m_0 n_3
            __anonstruct_Graph_4_edges_g_3_6_at_L
            __anonstruct_Edge_3_existent_0_edges_17_at_L
            __anonstruct_Edge_3_to_edges_17_at_L
            __anonstruct_Edge_3_from_edges_17_at_L) (0)))))))))))))
  
  predicate count_one_p (g_5 : (pointer __anonstruct_Graph_4)) (f_1 : int)
  (t_1 : int) (m_1 : int) (__anonstruct_Graph_4_edges_g_3_6_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_17_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_17_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_17_at_L :
  (memory __anonstruct_Edge_3 Int32.t))
  =
     ((=)
     (count g_5 f_1 t_1 m_1 (Int.(+) m_1 (1))
     __anonstruct_Graph_4_edges_g_3_6_at_L
     __anonstruct_Edge_3_existent_0_edges_17_at_L
     __anonstruct_Edge_3_to_edges_17_at_L
     __anonstruct_Edge_3_from_edges_17_at_L)
     (if
      (Bool.andb
      (Bool.andb
      ((<>)
      (Int32.to_int
      (select __anonstruct_Edge_3_existent_0_edges_17_at_L
      (shift (select __anonstruct_Graph_4_edges_g_3_6_at_L g_5) m_1))) (0))
      ((=)
      (Int32.to_int
      (select __anonstruct_Edge_3_from_edges_17_at_L
      (shift (select __anonstruct_Graph_4_edges_g_3_6_at_L g_5) m_1))) f_1))
      ((=)
      (Int32.to_int
      (select __anonstruct_Edge_3_to_edges_17_at_L
      (shift (select __anonstruct_Graph_4_edges_g_3_6_at_L g_5) m_1))) t_1))
      then (1) else (0)))
  
  
  axiom Count_one
  #"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 81 115 200#
  "expl:Axiom count_one"  :
  (forall __anonstruct_Graph_4_edges_g_3_6_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_17_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_17_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_17_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 83 24 82#
      (forall g_6 : (pointer __anonstruct_Graph_4).
       (forall f_2 : int.
        (forall t_2 : int.
         (forall m_2 : int.
          (count_one_p g_6 f_2 t_2 m_2 __anonstruct_Graph_4_edges_g_3_6_at_L
          __anonstruct_Edge_3_existent_0_edges_17_at_L
          __anonstruct_Edge_3_to_edges_17_at_L
          __anonstruct_Edge_3_from_edges_17_at_L))))))))))
  
  predicate count_split_p (g_7 : (pointer __anonstruct_Graph_4)) (f_3 : int)
  (t_3 : int) (m_3 : int) (n_4 : int) (k_4 : int)
  (__anonstruct_Graph_4_edges_g_3_6_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_17_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_17_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_17_at_L :
  (memory __anonstruct_Edge_3 Int32.t))
  =
     ((=)
     (count g_7 f_3 t_3 m_3 k_4 __anonstruct_Graph_4_edges_g_3_6_at_L
     __anonstruct_Edge_3_existent_0_edges_17_at_L
     __anonstruct_Edge_3_to_edges_17_at_L
     __anonstruct_Edge_3_from_edges_17_at_L)
     (Int.(+)
     (count g_7 f_3 t_3 m_3 n_4 __anonstruct_Graph_4_edges_g_3_6_at_L
     __anonstruct_Edge_3_existent_0_edges_17_at_L
     __anonstruct_Edge_3_to_edges_17_at_L
     __anonstruct_Edge_3_from_edges_17_at_L)
     (count g_7 f_3 t_3 n_4 k_4 __anonstruct_Graph_4_edges_g_3_6_at_L
     __anonstruct_Edge_3_existent_0_edges_17_at_L
     __anonstruct_Edge_3_to_edges_17_at_L
     __anonstruct_Edge_3_from_edges_17_at_L)))
  
  
  axiom Count_split
  #"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 86 76 201#
  "expl:Axiom count_split"  :
  (forall __anonstruct_Graph_4_edges_g_3_6_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_17_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_17_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_17_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 88 26 122#
      (forall g_8 : (pointer __anonstruct_Graph_4).
       (forall f_4 : int.
        (forall t_4 : int.
         (forall m_4 : int.
          (forall n_5 : int.
           (forall k_5 : int.
            ((((<=) m_4 n_5) /\ ((<=) n_5 k_5)) ->
             (count_split_p g_8 f_4 t_4 m_4 n_5 k_5
             __anonstruct_Graph_4_edges_g_3_6_at_L
             __anonstruct_Edge_3_existent_0_edges_17_at_L
             __anonstruct_Edge_3_to_edges_17_at_L
             __anonstruct_Edge_3_from_edges_17_at_L)))))))))))))
  
end

theory Lemma_count_zero_lemma #"test_2_c.jc" 133 0 320#
"expl:Lemma count_zero_lemma"

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_EdgesCount 
  
  use why3.Bool.Bool 
  
  lemma Count_zero_lemma
  #"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 94 3 1972#
  "expl:Lemma count_zero_lemma"  :
  (forall __anonstruct_Graph_4_edges_g_10_20_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_115_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_115_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_115_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 96 8 99#
      (forall g_10 : (pointer __anonstruct_Graph_4).
       (forall f_6 : int.
        (forall t_6 : int.
         (forall m_5 : int.
          (forall n_6 : int.
           (((>=) m_5 n_6) ->
            ((=)
            (count g_10 f_6 t_6 m_5 n_6
            __anonstruct_Graph_4_edges_g_10_20_at_L
            __anonstruct_Edge_3_existent_0_edges_115_at_L
            __anonstruct_Edge_3_to_edges_115_at_L
            __anonstruct_Edge_3_from_edges_115_at_L) (0)))))))))))))
  
end

theory Lemma_count_one_lemma #"test_2_c.jc" 142 0 542#
"expl:Lemma count_one_lemma"

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use bool.Bool 
  
  use import Axiomatic_EdgesCount 
  
  use why3.Bool.Bool 
  
  lemma Count_one_lemma
  #"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 97 53 1890#
  "expl:Lemma count_one_lemma"  :
  (forall __anonstruct_Graph_4_edges_g_11_21_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_22_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_22_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_22_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 100 8 211#
      (forall g_11 : (pointer __anonstruct_Graph_4).
       (forall f_7 : int.
        (forall t_7 : int.
         (forall m_6 : int.
          ((count_one_p g_11 f_7 t_7 m_6
           __anonstruct_Graph_4_edges_g_11_21_at_L
           __anonstruct_Edge_3_existent_0_edges_22_at_L
           __anonstruct_Edge_3_to_edges_22_at_L
           __anonstruct_Edge_3_from_edges_22_at_L)
          /\
          ((=)
          (count g_11 f_7 t_7 m_6 (Int.(+) m_6 (1))
          __anonstruct_Graph_4_edges_g_11_21_at_L
          __anonstruct_Edge_3_existent_0_edges_22_at_L
          __anonstruct_Edge_3_to_edges_22_at_L
          __anonstruct_Edge_3_from_edges_22_at_L)
          (if
           (Bool.andb
           (Bool.andb
           (Int32.(<>)
           (select __anonstruct_Edge_3_existent_0_edges_22_at_L
           (shift (select __anonstruct_Graph_4_edges_g_11_21_at_L g_11) m_6))
           (#"test_2_c.jc" 149 60 72# "expl:Integer cast" (Int32.of_int
           (0))))
           ((=)
           (Int32.to_int
           (select __anonstruct_Edge_3_from_edges_22_at_L
           (shift (select __anonstruct_Graph_4_edges_g_11_21_at_L g_11) m_6)))
           f_7))
           ((=)
           (Int32.to_int
           (select __anonstruct_Edge_3_to_edges_22_at_L
           (shift (select __anonstruct_Graph_4_edges_g_11_21_at_L g_11) m_6)))
           t_7)) then (1) else (0)))))))))))))
  
end

theory Lemma_count_split_lemma #"test_2_c.jc" 153 0 587#
"expl:Lemma count_split_lemma"

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_EdgesCount 
  
  use why3.Bool.Bool 
  
  lemma Count_split_lemma
  #"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 102 128 1721#
  "expl:Lemma count_split_lemma"  :
  (forall __anonstruct_Graph_4_edges_g_12_23_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_107_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_107_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_107_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 105 8 223#
      (forall g_12 : (pointer __anonstruct_Graph_4).
       (forall f_8 : int.
        (forall t_8 : int.
         (forall m_7 : int.
          (forall n_7 : int.
           (forall k_6 : int.
            ((((<=) m_7 n_7) /\ ((<=) n_7 k_6)) ->
             ((count_split_p g_12 f_8 t_8 m_7 n_7 k_6
              __anonstruct_Graph_4_edges_g_12_23_at_L
              __anonstruct_Edge_3_existent_0_edges_107_at_L
              __anonstruct_Edge_3_to_edges_107_at_L
              __anonstruct_Edge_3_from_edges_107_at_L)
             /\
             ((=)
             (count g_12 f_8 t_8 m_7 k_6
             __anonstruct_Graph_4_edges_g_12_23_at_L
             __anonstruct_Edge_3_existent_0_edges_107_at_L
             __anonstruct_Edge_3_to_edges_107_at_L
             __anonstruct_Edge_3_from_edges_107_at_L)
             (Int.(+)
             (count g_12 f_8 t_8 m_7 n_7
             __anonstruct_Graph_4_edges_g_12_23_at_L
             __anonstruct_Edge_3_existent_0_edges_107_at_L
             __anonstruct_Edge_3_to_edges_107_at_L
             __anonstruct_Edge_3_from_edges_107_at_L)
             (count g_12 f_8 t_8 n_7 k_6
             __anonstruct_Graph_4_edges_g_12_23_at_L
             __anonstruct_Edge_3_existent_0_edges_107_at_L
             __anonstruct_Edge_3_to_edges_107_at_L
             __anonstruct_Edge_3_from_edges_107_at_L))))))))))))))))
  
end

theory Lemma_count_split_2_lemma #"test_2_c.jc" 166 0 453#
"expl:Lemma count_split_2_lemma"

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_EdgesCount 
  
  use why3.Bool.Bool 
  
  lemma Count_split_2_lemma
  #"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 109 82 1416#
  "expl:Lemma count_split_2_lemma"  :
  (forall __anonstruct_Graph_4_edges_g_13_24_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_101_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_101_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_101_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 112 8 177#
      (forall g_13 : (pointer __anonstruct_Graph_4).
       (forall f_9 : int.
        (forall t_9 : int.
         (forall m_8 : int.
          (forall n_8 : int.
           (((<=) m_8 n_8) ->
            ((=)
            (count g_13 f_9 t_9 m_8 (Int.(+) n_8 (1))
            __anonstruct_Graph_4_edges_g_13_24_at_L
            __anonstruct_Edge_3_existent_0_edges_101_at_L
            __anonstruct_Edge_3_to_edges_101_at_L
            __anonstruct_Edge_3_from_edges_101_at_L)
            (Int.(+)
            (count g_13 f_9 t_9 m_8 n_8
            __anonstruct_Graph_4_edges_g_13_24_at_L
            __anonstruct_Edge_3_existent_0_edges_101_at_L
            __anonstruct_Edge_3_to_edges_101_at_L
            __anonstruct_Edge_3_from_edges_101_at_L)
            (count g_13 f_9 t_9 n_8 (Int.(+) n_8 (1))
            __anonstruct_Graph_4_edges_g_13_24_at_L
            __anonstruct_Edge_3_existent_0_edges_101_at_L
            __anonstruct_Edge_3_to_edges_101_at_L
            __anonstruct_Edge_3_from_edges_101_at_L))))))))))))))
  
end

theory Lemma_count_double_split_lemma #"test_2_c.jc" 177 0 607#
"expl:Lemma count_double_split_lemma"

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_EdgesCount 
  
  use why3.Bool.Bool 
  
  lemma Count_double_split_lemma
  #"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 115 92 1212#
  "expl:Lemma count_double_split_lemma"  :
  (forall __anonstruct_Graph_4_edges_g_14_25_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_83_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_83_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_83_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 118 8 214#
      (forall g_14 : (pointer __anonstruct_Graph_4).
       (forall f_10 : int.
        (forall t_10 : int.
         (forall m_9 : int.
          (forall n_9 : int.
           (forall k_7 : int.
            ((((<=) m_9 k_7) /\ ((<=) k_7 (Int.(-) n_9 (1)))) ->
             ((=)
             (count g_14 f_10 t_10 m_9 n_9
             __anonstruct_Graph_4_edges_g_14_25_at_L
             __anonstruct_Edge_3_existent_0_edges_83_at_L
             __anonstruct_Edge_3_to_edges_83_at_L
             __anonstruct_Edge_3_from_edges_83_at_L)
             (Int.(+)
             (Int.(+)
             (count g_14 f_10 t_10 m_9 k_7
             __anonstruct_Graph_4_edges_g_14_25_at_L
             __anonstruct_Edge_3_existent_0_edges_83_at_L
             __anonstruct_Edge_3_to_edges_83_at_L
             __anonstruct_Edge_3_from_edges_83_at_L)
             (count g_14 f_10 t_10 k_7 (Int.(+) k_7 (1))
             __anonstruct_Graph_4_edges_g_14_25_at_L
             __anonstruct_Edge_3_existent_0_edges_83_at_L
             __anonstruct_Edge_3_to_edges_83_at_L
             __anonstruct_Edge_3_from_edges_83_at_L))
             (count g_14 f_10 t_10 (Int.(+) k_7 (1)) n_9
             __anonstruct_Graph_4_edges_g_14_25_at_L
             __anonstruct_Edge_3_existent_0_edges_83_at_L
             __anonstruct_Edge_3_to_edges_83_at_L
             __anonstruct_Edge_3_from_edges_83_at_L)))))))))))))))
  
end

theory Logic_all_count

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import Axiomatic_EdgesCount 
  
  use why3.Bool.Bool 
  
  function all_count (g_9 : (pointer __anonstruct_Graph_4)) (f_5 : int) (t_5
  : int) (__anonstruct_Graph_4_esize_g_9_9_at_L : (memory
  __anonstruct_Graph_4 Int32.t)) (__anonstruct_Graph_4_edges_g_9_9_at_L :
  (memory __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_63_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_63_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_63_at_L :
  (memory __anonstruct_Edge_3 Int32.t)) : int
  =
     (count g_9 f_5 t_5 (0)
     (Int32.to_int (select __anonstruct_Graph_4_esize_g_9_9_at_L g_9))
     __anonstruct_Graph_4_edges_g_9_9_at_L
     __anonstruct_Edge_3_existent_0_edges_63_at_L
     __anonstruct_Edge_3_to_edges_63_at_L
     __anonstruct_Edge_3_from_edges_63_at_L)
  
  
end

theory Lemma_all_count_lemma #"test_2_c.jc" 190 0 971#
"expl:Lemma all_count_lemma"

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_all_count 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_EdgesCount 
  
  use why3.Bool.Bool 
  
  lemma All_count_lemma
  #"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 121 117 979#
  "expl:Lemma all_count_lemma"  :
  (forall __anonstruct_Graph_4_esize_g_15_26_at_L : (memory
   __anonstruct_Graph_4 Int32.t).
   (forall __anonstruct_Graph_4_ecnt_g_15_26_at_L : (memory
    __anonstruct_Graph_4 Int32.t).
    (forall __anonstruct_Graph_4_edges_g_15_26_at_L : (memory
     __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
     (forall __anonstruct_Edge_3_existent_0_edges_67_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (forall __anonstruct_Edge_3_to_edges_67_at_L : (memory
       __anonstruct_Edge_3 Int32.t).
       (forall __anonstruct_Edge_3_from_edges_67_at_L : (memory
        __anonstruct_Edge_3 Int32.t).
        (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 124 8 376#
        (forall g_15 : (pointer __anonstruct_Graph_4).
         (forall k_8 : int.
          (forall f_11 : int.
           (forall t_11 : int.
            (((Int32.(<=) (#"test_2_c.jc" 195 19 31# "expl:Integer cast"
              (Int32.of_int (0)))
              (select __anonstruct_Graph_4_ecnt_g_15_26_at_L g_15))
             /\
             (Int32.(<=) (select __anonstruct_Graph_4_ecnt_g_15_26_at_L g_15)
             (select __anonstruct_Graph_4_esize_g_15_26_at_L g_15))) ->
             (((=)
              (all_count g_15 f_11 t_11
              __anonstruct_Graph_4_esize_g_15_26_at_L
              __anonstruct_Graph_4_edges_g_15_26_at_L
              __anonstruct_Edge_3_existent_0_edges_67_at_L
              __anonstruct_Edge_3_to_edges_67_at_L
              __anonstruct_Edge_3_from_edges_67_at_L)
              (count g_15 f_11 t_11 (0)
              (Int32.to_int
              (select __anonstruct_Graph_4_esize_g_15_26_at_L g_15))
              __anonstruct_Graph_4_edges_g_15_26_at_L
              __anonstruct_Edge_3_existent_0_edges_67_at_L
              __anonstruct_Edge_3_to_edges_67_at_L
              __anonstruct_Edge_3_from_edges_67_at_L))
             /\
             (((=)
              (all_count g_15 f_11 t_11
              __anonstruct_Graph_4_esize_g_15_26_at_L
              __anonstruct_Graph_4_edges_g_15_26_at_L
              __anonstruct_Edge_3_existent_0_edges_67_at_L
              __anonstruct_Edge_3_to_edges_67_at_L
              __anonstruct_Edge_3_from_edges_67_at_L)
              (Int.(+)
              (count g_15 f_11 t_11 (0)
              (Int32.to_int
              (select __anonstruct_Graph_4_ecnt_g_15_26_at_L g_15))
              __anonstruct_Graph_4_edges_g_15_26_at_L
              __anonstruct_Edge_3_existent_0_edges_67_at_L
              __anonstruct_Edge_3_to_edges_67_at_L
              __anonstruct_Edge_3_from_edges_67_at_L)
              (count g_15 f_11 t_11
              (Int32.to_int
              (select __anonstruct_Graph_4_ecnt_g_15_26_at_L g_15))
              (Int32.to_int
              (select __anonstruct_Graph_4_esize_g_15_26_at_L g_15))
              __anonstruct_Graph_4_edges_g_15_26_at_L
              __anonstruct_Edge_3_existent_0_edges_67_at_L
              __anonstruct_Edge_3_to_edges_67_at_L
              __anonstruct_Edge_3_from_edges_67_at_L)))
             /\
             ((=)
             (count g_15 f_11 t_11 (0)
             (Int32.to_int
             (select __anonstruct_Graph_4_esize_g_15_26_at_L g_15))
             __anonstruct_Graph_4_edges_g_15_26_at_L
             __anonstruct_Edge_3_existent_0_edges_67_at_L
             __anonstruct_Edge_3_to_edges_67_at_L
             __anonstruct_Edge_3_from_edges_67_at_L)
             (Int.(+)
             (count g_15 f_11 t_11 (0)
             (Int32.to_int
             (select __anonstruct_Graph_4_ecnt_g_15_26_at_L g_15))
             __anonstruct_Graph_4_edges_g_15_26_at_L
             __anonstruct_Edge_3_existent_0_edges_67_at_L
             __anonstruct_Edge_3_to_edges_67_at_L
             __anonstruct_Edge_3_from_edges_67_at_L)
             (count g_15 f_11 t_11
             (Int32.to_int
             (select __anonstruct_Graph_4_ecnt_g_15_26_at_L g_15))
             (Int32.to_int
             (select __anonstruct_Graph_4_esize_g_15_26_at_L g_15))
             __anonstruct_Graph_4_edges_g_15_26_at_L
             __anonstruct_Edge_3_existent_0_edges_67_at_L
             __anonstruct_Edge_3_to_edges_67_at_L
             __anonstruct_Edge_3_from_edges_67_at_L)))))))))))))))))
  
end

theory Root___anonstruct_Vertex_2

  use why3.Bool.Bool 
  
  type __anonstruct_Vertex_2 
  
end

theory Logic_is_vertex

  use import Root___anonstruct_Graph_4 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate is_vertex (g : (pointer __anonstruct_Graph_4)) (v : int)
  (__anonstruct_Graph_4_vsize_g_2_at_L : (memory __anonstruct_Graph_4
  Int32.t))
  =
     (((<=) (0) v) /\
     ((<) v (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_at_L g))))
  
  
end

theory Logic_edge_valid

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate edge_valid (g_0 : (pointer __anonstruct_Graph_4)) (k_1 : int)
  (__anonstruct_Graph_4_edges_g_0_3_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3))) (__anonstruct_Graph_4_vsize_g_0_3_at_L :
  (memory __anonstruct_Graph_4 Int32.t))
  (__anonstruct_Graph_4_vertices_g_0_3_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Vertex_2)))
  (__anonstruct_Edge_3_existent_0_edges_12_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_12_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_12_at_L :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Vertex_2_existent_vertices_13_at_L : (memory
  __anonstruct_Vertex_2 Int32.t))
  =
     ((not
      ((=)
      (Int32.to_int
      (select __anonstruct_Edge_3_existent_0_edges_12_at_L
      (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1))) (0)))
      ->
      ((is_vertex g_0
       (Int32.to_int
       (select __anonstruct_Edge_3_from_edges_12_at_L
       (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1)))
       __anonstruct_Graph_4_vsize_g_0_3_at_L)
      /\
      ((is_vertex g_0
       (Int32.to_int
       (select __anonstruct_Edge_3_to_edges_12_at_L
       (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1)))
       __anonstruct_Graph_4_vsize_g_0_3_at_L)
      /\
      ((not
       ((=)
       (Int32.to_int
       (select __anonstruct_Vertex_2_existent_vertices_13_at_L
       (shift (select __anonstruct_Graph_4_vertices_g_0_3_at_L g_0)
       (Int32.to_int
       (select __anonstruct_Edge_3_from_edges_12_at_L
       (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1))))))
       (0)))
      /\
      (not
      ((=)
      (Int32.to_int
      (select __anonstruct_Vertex_2_existent_vertices_13_at_L
      (shift (select __anonstruct_Graph_4_vertices_g_0_3_at_L g_0)
      (Int32.to_int
      (select __anonstruct_Edge_3_to_edges_12_at_L
      (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1))))))
      (0)))))))
  
  
end

theory Logic_edges_valid

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_edge_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate edges_valid (g_1 : (pointer __anonstruct_Graph_4)) (n_1 : int)
  (__anonstruct_Graph_4_edges_g_1_4_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3))) (__anonstruct_Graph_4_vsize_g_1_4_at_L :
  (memory __anonstruct_Graph_4 Int32.t))
  (__anonstruct_Graph_4_vertices_g_1_4_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Vertex_2)))
  (__anonstruct_Edge_3_existent_0_edges_37_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_37_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_37_at_L :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Vertex_2_existent_vertices_38_at_L : (memory
  __anonstruct_Vertex_2 Int32.t))
  =
     (forall k_2 : int.
      ((((<=) (0) k_2) /\ ((<) k_2 n_1)) ->
       (edge_valid g_1 k_2 __anonstruct_Graph_4_edges_g_1_4_at_L
       __anonstruct_Graph_4_vsize_g_1_4_at_L
       __anonstruct_Graph_4_vertices_g_1_4_at_L
       __anonstruct_Edge_3_existent_0_edges_37_at_L
       __anonstruct_Edge_3_to_edges_37_at_L
       __anonstruct_Edge_3_from_edges_37_at_L
       __anonstruct_Vertex_2_existent_vertices_38_at_L)))
  
  
end

theory Logic_graph_valid

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_edges_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  predicate graph_valid (g_2 : (pointer __anonstruct_Graph_4))
  (__anonstruct_Vertex_2_vertices_14_alloc_table_at_L : (alloc_table
  __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_15_alloc_table_at_L :
  (alloc_table __anonstruct_Edge_3)) (__anonstruct_Graph_4_esize_g_2_5_at_L :
  (memory __anonstruct_Graph_4 Int32.t))
  (__anonstruct_Graph_4_ecnt_g_2_5_at_L : (memory __anonstruct_Graph_4
  Int32.t)) (__anonstruct_Graph_4_edges_g_2_5_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Graph_4_vsize_g_2_5_at_L : (memory __anonstruct_Graph_4
  Int32.t)) (__anonstruct_Graph_4_vertices_g_2_5_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
  (__anonstruct_Edge_3_existent_0_edges_15_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_15_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_15_at_L :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Vertex_2_existent_vertices_14_at_L : (memory
  __anonstruct_Vertex_2 Int32.t))
  =
     ((Int32.(>) (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2)
      (#"test_2_c.jc" 59 24 36# "expl:Integer cast" (Int32.of_int (0))))
     /\
     ((Int32.(>) (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)
      (#"test_2_c.jc" 59 54 66# "expl:Integer cast" (Int32.of_int (0))))
     /\
     ((Int32.(>=) (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)
      (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2))
     /\
     ((Int32.(>=) (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2)
      (#"test_2_c.jc" 61 23 35# "expl:Integer cast" (Int32.of_int (0))))
     /\
     ((if
       ((<=) (0)
       (Int.(-)
       (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2)) (1)))
       then
       (((<=)
        (offset_min __anonstruct_Vertex_2_vertices_14_alloc_table_at_L
        (select __anonstruct_Graph_4_vertices_g_2_5_at_L g_2)) (0))
       /\
       (((>=)
        (offset_max __anonstruct_Vertex_2_vertices_14_alloc_table_at_L
        (select __anonstruct_Graph_4_vertices_g_2_5_at_L g_2))
        (Int.(-)
        (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2))
        (1)))
       /\
       (forall __framac_tmp2 : int.
        ((((<=) (0) __framac_tmp2) /\
         ((<=) __framac_tmp2
         (Int.(-)
         (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2))
         (1)))) -> ((=) true true))))) else ((=) true true))
     /\
     ((if
       ((<=) (0)
       (Int.(-)
       (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)) (1)))
       then
       (((<=)
        (offset_min __anonstruct_Edge_3_edges_15_alloc_table_at_L
        (select __anonstruct_Graph_4_edges_g_2_5_at_L g_2)) (0))
       /\
       (((>=)
        (offset_max __anonstruct_Edge_3_edges_15_alloc_table_at_L
        (select __anonstruct_Graph_4_edges_g_2_5_at_L g_2))
        (Int.(-)
        (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2))
        (1)))
       /\
       (forall __framac_tmp1 : int.
        ((((<=) (0) __framac_tmp1) /\
         ((<=) __framac_tmp1
         (Int.(-)
         (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2))
         (1)))) -> ((=) true true))))) else ((=) true true))
     /\
     ((edges_valid g_2
      (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2))
      __anonstruct_Graph_4_edges_g_2_5_at_L
      __anonstruct_Graph_4_vsize_g_2_5_at_L
      __anonstruct_Graph_4_vertices_g_2_5_at_L
      __anonstruct_Edge_3_existent_0_edges_15_at_L
      __anonstruct_Edge_3_to_edges_15_at_L
      __anonstruct_Edge_3_from_edges_15_at_L
      __anonstruct_Vertex_2_existent_vertices_14_at_L)
     /\
     (forall k_3 : int.
      ((((<=)
        (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2)) k_3)
       /\
       ((<) k_3
       (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)))) ->
       ((=)
       (Int32.to_int
       (select __anonstruct_Edge_3_existent_0_edges_15_at_L
       (shift (select __anonstruct_Graph_4_edges_g_2_5_at_L g_2) k_3))) (0)))))))))))
  
  
end

theory Lemma_zero_after_ecnt_lemma #"test_2_c.jc" 207 0 524#
"expl:Lemma zero_after_ecnt_lemma"

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_graph_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  lemma Zero_after_ecnt_lemma
  #"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 129 108 560#
  "expl:Lemma zero_after_ecnt_lemma"  :
  (forall __anonstruct_Vertex_2_vertices_118_alloc_table_at_L : (alloc_table
   __anonstruct_Vertex_2).
   (forall __anonstruct_Edge_3_edges_28_alloc_table_at_L : (alloc_table
    __anonstruct_Edge_3).
    (forall __anonstruct_Graph_4_esize_g_16_27_at_L : (memory
     __anonstruct_Graph_4 Int32.t).
     (forall __anonstruct_Graph_4_ecnt_g_16_27_at_L : (memory
      __anonstruct_Graph_4 Int32.t).
      (forall __anonstruct_Graph_4_edges_g_16_27_at_L : (memory
       __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
       (forall __anonstruct_Graph_4_vsize_g_16_27_at_L : (memory
        __anonstruct_Graph_4 Int32.t).
        (forall __anonstruct_Graph_4_vertices_g_16_27_at_L : (memory
         __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)).
         (forall __anonstruct_Edge_3_existent_0_edges_28_at_L : (memory
          __anonstruct_Edge_3 Int32.t).
          (forall __anonstruct_Edge_3_to_edges_28_at_L : (memory
           __anonstruct_Edge_3 Int32.t).
           (forall __anonstruct_Edge_3_from_edges_28_at_L : (memory
            __anonstruct_Edge_3 Int32.t).
            (forall __anonstruct_Vertex_2_existent_vertices_118_at_L :
             (memory __anonstruct_Vertex_2 Int32.t).
             (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 132 8 204#
             (forall g_16 : (pointer __anonstruct_Graph_4).
              (forall f_12 : int.
               (forall t_12 : int.
                (forall m_10 : int.
                 ((graph_valid g_16
                  __anonstruct_Vertex_2_vertices_118_alloc_table_at_L
                  __anonstruct_Edge_3_edges_28_alloc_table_at_L
                  __anonstruct_Graph_4_esize_g_16_27_at_L
                  __anonstruct_Graph_4_ecnt_g_16_27_at_L
                  __anonstruct_Graph_4_edges_g_16_27_at_L
                  __anonstruct_Graph_4_vsize_g_16_27_at_L
                  __anonstruct_Graph_4_vertices_g_16_27_at_L
                  __anonstruct_Edge_3_existent_0_edges_28_at_L
                  __anonstruct_Edge_3_to_edges_28_at_L
                  __anonstruct_Edge_3_from_edges_28_at_L
                  __anonstruct_Vertex_2_existent_vertices_118_at_L) ->
                  ((((<=)
                    (Int32.to_int
                    (select __anonstruct_Graph_4_ecnt_g_16_27_at_L g_16))
                    (Int.(-) m_10 (1)))
                   /\
                   ((<) (Int.(-) m_10 (1))
                   (Int32.to_int
                   (select __anonstruct_Graph_4_esize_g_16_27_at_L g_16))))
                   ->
                   (((=)
                    (count g_16 f_12 t_12 (Int.(-) m_10 (1)) m_10
                    __anonstruct_Graph_4_edges_g_16_27_at_L
                    __anonstruct_Edge_3_existent_0_edges_28_at_L
                    __anonstruct_Edge_3_to_edges_28_at_L
                    __anonstruct_Edge_3_from_edges_28_at_L) (0))
                   /\
                   (Int32.(=)
                   (select __anonstruct_Edge_3_existent_0_edges_28_at_L
                   (shift
                   (select __anonstruct_Graph_4_edges_g_16_27_at_L g_16)
                   (Int.(-) m_10 (1)))) (#"test_2_c.jc" 216 64 76#
                   "expl:Integer cast" (Int32.of_int (0)))))))))))))))))))))))
  
end

theory Lemma_count_lemma #"test_2_c.jc" 218 0 484# "expl:Lemma count_lemma"

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_EdgesCount 
  
  use why3.Bool.Bool 
  
  lemma Count_lemma
  #"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 135 81 289#
  "expl:Lemma count_lemma"  :
  (forall __anonstruct_Graph_4_ecnt_g_17_29_at_L : (memory
   __anonstruct_Graph_4 Int32.t).
   (forall __anonstruct_Graph_4_edges_g_17_29_at_L : (memory
    __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
    (forall __anonstruct_Edge_3_existent_0_edges_91_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_to_edges_91_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (forall __anonstruct_Edge_3_from_edges_91_at_L : (memory
       __anonstruct_Edge_3 Int32.t).
       (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 138 8 178#
       (forall g_17 : (pointer __anonstruct_Graph_4).
        (forall f_13 : int.
         (forall t_13 : int.
          (forall m_11 : int.
           ((((<=) (0) (Int.(-) m_11 (1))) /\
            ((<=) (Int.(-) m_11 (1))
            (Int32.to_int
            (select __anonstruct_Graph_4_ecnt_g_17_29_at_L g_17)))) ->
            ((=)
            (count g_17 f_13 t_13 (0) m_11
            __anonstruct_Graph_4_edges_g_17_29_at_L
            __anonstruct_Edge_3_existent_0_edges_91_at_L
            __anonstruct_Edge_3_to_edges_91_at_L
            __anonstruct_Edge_3_from_edges_91_at_L)
            (Int.(+)
            (count g_17 f_13 t_13 (0) (Int.(-) m_11 (1))
            __anonstruct_Graph_4_edges_g_17_29_at_L
            __anonstruct_Edge_3_existent_0_edges_91_at_L
            __anonstruct_Edge_3_to_edges_91_at_L
            __anonstruct_Edge_3_from_edges_91_at_L)
            (count g_17 f_13 t_13 (Int.(-) m_11 (1)) m_11
            __anonstruct_Graph_4_edges_g_17_29_at_L
            __anonstruct_Edge_3_existent_0_edges_91_at_L
            __anonstruct_Edge_3_to_edges_91_at_L
            __anonstruct_Edge_3_from_edges_91_at_L))))))))))))))
  
end

theory Axiomatic_LF__Axiomatic__count_not_existent_lemma

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_graph_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  axiom LF__Lemma__count_not_existent_lemma
  #"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 154 9 64#
  "expl:Axiom LF__Lemma__count_not_existent_lemma"
  "W:non_conservative_extension:N" :
  (forall __anonstruct_Vertex_2_vertices_129_alloc_table : (alloc_table
   __anonstruct_Vertex_2).
   (forall __anonstruct_Graph_4_g_18_30_alloc_table : (alloc_table
    __anonstruct_Graph_4).
    (forall __anonstruct_Edge_3_edges_128_alloc_table : (alloc_table
     __anonstruct_Edge_3).
     (forall __anonstruct_Graph_4_esize_g_18_30 : (memory
      __anonstruct_Graph_4 Int32.t).
      (forall __anonstruct_Graph_4_ecnt_g_18_30 : (memory
       __anonstruct_Graph_4 Int32.t).
       (forall __anonstruct_Graph_4_edges_g_18_30 : (memory
        __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
        (forall __anonstruct_Graph_4_vsize_g_18_30 : (memory
         __anonstruct_Graph_4 Int32.t).
         (forall __anonstruct_Graph_4_vertices_g_18_30 : (memory
          __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)).
          (forall __anonstruct_Edge_3_existent_0_edges_128 : (memory
           __anonstruct_Edge_3 Int32.t).
           (forall __anonstruct_Edge_3_to_edges_128 : (memory
            __anonstruct_Edge_3 Int32.t).
            (forall __anonstruct_Edge_3_from_edges_128 : (memory
             __anonstruct_Edge_3 Int32.t).
             (forall __anonstruct_Vertex_2_existent_vertices_129 : (memory
              __anonstruct_Vertex_2 Int32.t).
              (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 154 9 64#
              (forall g_18 : (pointer __anonstruct_Graph_4).
               (forall f_14 : Int32.t.
                (forall t_14 : Int32.t.
                 (forall k_9 : Int32.t.
                  (((((<=)
                     (offset_min __anonstruct_Graph_4_g_18_30_alloc_table
                     g_18) (0))
                    /\
                    (((>=)
                     (offset_max __anonstruct_Graph_4_g_18_30_alloc_table
                     g_18) (0))
                    /\ ((=) true true)))
                   /\
                   ((graph_valid g_18
                    __anonstruct_Vertex_2_vertices_129_alloc_table
                    __anonstruct_Edge_3_edges_128_alloc_table
                    __anonstruct_Graph_4_esize_g_18_30
                    __anonstruct_Graph_4_ecnt_g_18_30
                    __anonstruct_Graph_4_edges_g_18_30
                    __anonstruct_Graph_4_vsize_g_18_30
                    __anonstruct_Graph_4_vertices_g_18_30
                    __anonstruct_Edge_3_existent_0_edges_128
                    __anonstruct_Edge_3_to_edges_128
                    __anonstruct_Edge_3_from_edges_128
                    __anonstruct_Vertex_2_existent_vertices_129)
                   /\
                   ((Int32.(<=)
                    (select __anonstruct_Graph_4_ecnt_g_18_30 g_18) k_9)
                   /\
                   (Int32.(<=) k_9
                   (select __anonstruct_Graph_4_esize_g_18_30 g_18))))) ->
                   ((=)
                   (count g_18 (Int32.to_int f_14) (Int32.to_int t_14)
                   (Int32.to_int
                   (select __anonstruct_Graph_4_ecnt_g_18_30 g_18))
                   (Int32.to_int k_9) __anonstruct_Graph_4_edges_g_18_30
                   __anonstruct_Edge_3_existent_0_edges_128
                   __anonstruct_Edge_3_to_edges_128
                   __anonstruct_Edge_3_from_edges_128) (0))))))))))))))))))))
  
  predicate _LF__Predicate__count_not_existent_lemma  = ((=) true true)
  
  
end

module Function_count_not_existent_lemma_safe

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_graph_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  use import Lemma_zero_after_ecnt_lemma 
  
  use import Lemma_count_zero_lemma 
  
  use import Lemma_count_split_lemma 
  
  use import Lemma_count_split_2_lemma 
  
  use import Lemma_count_one_lemma 
  
  use import Lemma_count_lemma 
  
  use import Lemma_count_double_split_lemma 
  
  use import Lemma_all_count_lemma 
  
  val count_not_existent_lemma
  (g_4 : (pointer __anonstruct_Graph_4)) 
   (f_0 : Int32.t) 
    (t_0 : Int32.t) 
     (k : Int32.t) 
      (__anonstruct_Vertex_2_vertices_134_alloc_table : (alloc_table
       __anonstruct_Vertex_2)) 
       (__anonstruct_Graph_4_g_10_alloc_table : (alloc_table
        __anonstruct_Graph_4)) 
        (__anonstruct_Edge_3_edges_133_alloc_table : (alloc_table
         __anonstruct_Edge_3)) 
         (__anonstruct_Graph_4_esize_g_10 : (memory __anonstruct_Graph_4
          Int32.t)) 
          (__anonstruct_Graph_4_ecnt_g_10 : (memory __anonstruct_Graph_4
           Int32.t)) 
           (__anonstruct_Graph_4_edges_g_10 : (memory __anonstruct_Graph_4
            (pointer __anonstruct_Edge_3))) 
            (__anonstruct_Graph_4_vsize_g_10 : (memory __anonstruct_Graph_4
             Int32.t)) 
             (__anonstruct_Graph_4_vertices_g_10 : (memory
              __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
              (__anonstruct_Edge_3_existent_0_edges_133 : (memory
               __anonstruct_Edge_3 Int32.t)) 
               (__anonstruct_Edge_3_to_edges_133 : (memory
                __anonstruct_Edge_3 Int32.t)) 
                (__anonstruct_Edge_3_from_edges_133 : (memory
                 __anonstruct_Edge_3 Int32.t)) 
                 (__anonstruct_Vertex_2_existent_vertices_134 : (memory
                  __anonstruct_Vertex_2 Int32.t)) : unit
                  requires {
                    ("expl:Internal"
                    (#"test_2_c.jc" 231 12 316# "expl:Requires clause"
                    ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 148 17 26#
                     "expl:Requires clause"
                     (#"test_2_c.jc" 231 12 316# "expl:Requires clause"
                     ((#"test_2_c.jc" 231 12 316# "expl:Requires clause"
                      ((<=)
                      (offset_min __anonstruct_Graph_4_g_10_alloc_table g_4)
                      (0)))
                     /\
                     (#"test_2_c.jc" 231 12 316# "expl:Requires clause"
                     ((#"test_2_c.jc" 231 12 316# "expl:Requires clause"
                      ((>=)
                      (offset_max __anonstruct_Graph_4_g_10_alloc_table g_4)
                      (0)))
                     /\
                     (#"test_2_c.jc" 231 12 316# "expl:Requires clause"
                     ((=) true true)))))))
                    /\
                    (#"test_2_c.jc" 231 12 316# "expl:Requires clause"
                    ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 149 17 31#
                     "expl:Requires clause"
                     (graph_valid g_4
                     __anonstruct_Vertex_2_vertices_134_alloc_table
                     __anonstruct_Edge_3_edges_133_alloc_table
                     __anonstruct_Graph_4_esize_g_10
                     __anonstruct_Graph_4_ecnt_g_10
                     __anonstruct_Graph_4_edges_g_10
                     __anonstruct_Graph_4_vsize_g_10
                     __anonstruct_Graph_4_vertices_g_10
                     __anonstruct_Edge_3_existent_0_edges_133
                     __anonstruct_Edge_3_to_edges_133
                     __anonstruct_Edge_3_from_edges_133
                     __anonstruct_Vertex_2_existent_vertices_134))
                    /\
                    (#"test_2_c.jc" 231 12 316# "expl:Requires clause"
                    ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 150 17 29#
                     "expl:Requires clause"
                     (Int32.(<=) (select __anonstruct_Graph_4_ecnt_g_10 g_4)
                     k))
                    /\
                    (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 150 28 41#
                    "expl:Requires clause"
                    (Int32.(<=) k
                    (select __anonstruct_Graph_4_esize_g_10 g_4)))))))))) }
                  ensures {
                    (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 152 16 47#
                    "expl:Ensures clause"
                    ((=)
                    (count g_4 (Int32.to_int f_0) (Int32.to_int t_0)
                    (Int32.to_int
                    (select __anonstruct_Graph_4_ecnt_g_10 g_4))
                    (Int32.to_int k) __anonstruct_Graph_4_edges_g_10
                    __anonstruct_Edge_3_existent_0_edges_133
                    __anonstruct_Edge_3_to_edges_133
                    __anonstruct_Edge_3_from_edges_133) (0))) }
  
end

module Function_count_not_existent_lemma_safety
#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 154 9 64#
"expl:count_not_existent_lemma, safety"

  use import core.Zwf 
  
  use Safe_int32 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_graph_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Function_count_not_existent_lemma_safe 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use import core.Acc_safe 
  
  use why3.Bool.Bool 
  
  use import Lemma_zero_after_ecnt_lemma 
  
  use import Lemma_count_zero_lemma 
  
  use import Lemma_count_split_lemma 
  
  use import Lemma_count_split_2_lemma 
  
  use import Lemma_count_one_lemma 
  
  use import Lemma_count_lemma 
  
  use import Lemma_count_double_split_lemma 
  
  use import Lemma_all_count_lemma 
  
  let count_not_existent_lemma
  #"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 154 9 64#
  "expl:Function count_not_existent_lemma, safety" =
  fun
   (g_4 : (pointer __anonstruct_Graph_4)) (f_0 : Int32.t) (t_0 : Int32.t) (k
   : Int32.t) (__anonstruct_Edge_3_edges_133_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_g_10_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_134_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_existent_vertices_134 :
   (memory __anonstruct_Vertex_2 Int32.t))
   (__anonstruct_Edge_3_from_edges_133 : (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Edge_3_to_edges_133 : (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Edge_3_existent_0_edges_133 : (memory
   __anonstruct_Edge_3 Int32.t)) (__anonstruct_Graph_4_vertices_g_10 :
   (memory __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_g_10 : (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Graph_4_edges_g_10 : (memory __anonstruct_Graph_4 (pointer
   __anonstruct_Edge_3))) (__anonstruct_Graph_4_ecnt_g_10 : (memory
   __anonstruct_Graph_4 Int32.t)) (__anonstruct_Graph_4_esize_g_10 : (memory
   __anonstruct_Graph_4 Int32.t)) 
   requires {
   (#"test_2_c.jc" 231 12 316#
   ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 148 17 26#
    (#"test_2_c.jc" 231 12 316#
    ((#"test_2_c.jc" 231 12 316#
     ((<=) (offset_min __anonstruct_Graph_4_g_10_alloc_table g_4) (0)))
    /\
    (#"test_2_c.jc" 231 12 316#
    ((#"test_2_c.jc" 231 12 316#
     ((>=) (offset_max __anonstruct_Graph_4_g_10_alloc_table g_4) (0)))
    /\ (#"test_2_c.jc" 231 12 316# ((=) true true)))))))
   /\
   (#"test_2_c.jc" 231 12 316#
   ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 149 17 31#
    (graph_valid g_4 __anonstruct_Vertex_2_vertices_134_alloc_table
    __anonstruct_Edge_3_edges_133_alloc_table __anonstruct_Graph_4_esize_g_10
    __anonstruct_Graph_4_ecnt_g_10 __anonstruct_Graph_4_edges_g_10
    __anonstruct_Graph_4_vsize_g_10 __anonstruct_Graph_4_vertices_g_10
    __anonstruct_Edge_3_existent_0_edges_133 __anonstruct_Edge_3_to_edges_133
    __anonstruct_Edge_3_from_edges_133
    __anonstruct_Vertex_2_existent_vertices_134))
   /\
   (#"test_2_c.jc" 231 12 316#
   ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 150 17 29#
    (Int32.(<=) (select __anonstruct_Graph_4_ecnt_g_10 g_4) k))
   /\
   (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 150 28 41#
   (Int32.(<=) k (select __anonstruct_Graph_4_esize_g_10 g_4))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   'Init:
   try
    begin
    (if
    (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 155 12 23#
    (Safe_int32.(>)  k
     (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 155 16 23#
     "expl:Pointer dereference"
     (acc  __anonstruct_Graph_4_g_10_alloc_table
      __anonstruct_Graph_4_ecnt_g_10 g_4 )) ))
    then
     begin
     begin
     any unit
     requires { true } reads { f_0, g_4, k, t_0 }
     ensures {
       (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 156 23 54#
       ((=)
       (count g_4 (Int32.to_int f_0) (Int32.to_int t_0)
       (Int.(-) (Int32.to_int k) (1)) (Int32.to_int k)
       __anonstruct_Graph_4_edges_g_10
       __anonstruct_Edge_3_existent_0_edges_133
       __anonstruct_Edge_3_to_edges_133 __anonstruct_Edge_3_from_edges_133)
       (0))) } ; () end;
      begin
      any unit
      requires { true } reads { f_0, g_4, k, t_0 }
      ensures {
        (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 157 23 114#
        ((=)
        (count g_4 (Int32.to_int f_0) (Int32.to_int t_0)
        (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_10 g_4))
        (Int32.to_int k) __anonstruct_Graph_4_edges_g_10
        __anonstruct_Edge_3_existent_0_edges_133
        __anonstruct_Edge_3_to_edges_133 __anonstruct_Edge_3_from_edges_133)
        (Int.(+)
        (count g_4 (Int32.to_int f_0) (Int32.to_int t_0)
        (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_10 g_4))
        (Int.(-) (Int32.to_int k) (1)) __anonstruct_Graph_4_edges_g_10
        __anonstruct_Edge_3_existent_0_edges_133
        __anonstruct_Edge_3_to_edges_133 __anonstruct_Edge_3_from_edges_133)
        (count g_4 (Int32.to_int f_0) (Int32.to_int t_0)
        (Int.(-) (Int32.to_int k) (1)) (Int32.to_int k)
        __anonstruct_Graph_4_edges_g_10
        __anonstruct_Edge_3_existent_0_edges_133
        __anonstruct_Edge_3_to_edges_133 __anonstruct_Edge_3_from_edges_133))))
        } ; () end;
      (let _jessie_20 = g_4 in
      (let _jessie_19 = f_0 in
      (let _jessie_18 = t_0 in
      (let _jessie_17 =
      (Safe_int32.(-)  k
       (#"test_2_c.jc" 281 64 76# "expl:Integer cast"
       (Safe_int32.of_int (1))) ) in
      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 158 12 54#
      "expl:Variant decreases"
      begin
      (check {
      (zwf_zero
      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 151 18 29#
      (Int.(-) (Int32.to_int _jessie_17)
      (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_10 _jessie_20))))
      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 151 18 29#
      (Int.(-) (Int32.to_int k)
      (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_10 g_4))))) });
       (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 158 12 54#
       "expl:Precondition for count_not_existent_lemma"
       (Function_count_not_existent_lemma_safe.count_not_existent_lemma 
        _jessie_20 _jessie_19 _jessie_18 _jessie_17
        __anonstruct_Vertex_2_vertices_134_alloc_table
        __anonstruct_Graph_4_g_10_alloc_table
        __anonstruct_Edge_3_edges_133_alloc_table
        __anonstruct_Graph_4_esize_g_10 __anonstruct_Graph_4_ecnt_g_10
        __anonstruct_Graph_4_edges_g_10 __anonstruct_Graph_4_vsize_g_10
        __anonstruct_Graph_4_vertices_g_10
        __anonstruct_Edge_3_existent_0_edges_133
        __anonstruct_Edge_3_to_edges_133 __anonstruct_Edge_3_from_edges_133
        __anonstruct_Vertex_2_existent_vertices_134 )) end))))) end else ());
     (raise Return); (raise Return) end with Return -> () end
  
end

module Function_count_not_existent_lemma

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  use import Lemma_zero_after_ecnt_lemma 
  
  use import Lemma_count_zero_lemma 
  
  use import Lemma_count_split_lemma 
  
  use import Lemma_count_split_2_lemma 
  
  use import Lemma_count_one_lemma 
  
  use import Lemma_count_lemma 
  
  use import Lemma_count_double_split_lemma 
  
  use import Lemma_all_count_lemma 
  
  val count_not_existent_lemma
  (g_4 : (pointer __anonstruct_Graph_4)) 
   (f_0 : Int32.t) 
    (t_0 : Int32.t) 
     (k : Int32.t) 
      (__anonstruct_Vertex_2_vertices_134_alloc_table : (alloc_table
       __anonstruct_Vertex_2)) 
       (__anonstruct_Graph_4_g_10_alloc_table : (alloc_table
        __anonstruct_Graph_4)) 
        (__anonstruct_Edge_3_edges_133_alloc_table : (alloc_table
         __anonstruct_Edge_3)) 
         (__anonstruct_Graph_4_esize_g_10 : (memory __anonstruct_Graph_4
          Int32.t)) 
          (__anonstruct_Graph_4_ecnt_g_10 : (memory __anonstruct_Graph_4
           Int32.t)) 
           (__anonstruct_Graph_4_edges_g_10 : (memory __anonstruct_Graph_4
            (pointer __anonstruct_Edge_3))) 
            (__anonstruct_Graph_4_vsize_g_10 : (memory __anonstruct_Graph_4
             Int32.t)) 
             (__anonstruct_Graph_4_vertices_g_10 : (memory
              __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
              (__anonstruct_Edge_3_existent_0_edges_133 : (memory
               __anonstruct_Edge_3 Int32.t)) 
               (__anonstruct_Edge_3_to_edges_133 : (memory
                __anonstruct_Edge_3 Int32.t)) 
                (__anonstruct_Edge_3_from_edges_133 : (memory
                 __anonstruct_Edge_3 Int32.t)) 
                 (__anonstruct_Vertex_2_existent_vertices_134 : (memory
                  __anonstruct_Vertex_2 Int32.t)) : unit
                  requires { true }
                  ensures {
                    (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 152 16 47#
                    "expl:Ensures clause"
                    ((=)
                    (count g_4 (Int32.to_int f_0) (Int32.to_int t_0)
                    (Int32.to_int
                    (select __anonstruct_Graph_4_ecnt_g_10 g_4))
                    (Int32.to_int k) __anonstruct_Graph_4_edges_g_10
                    __anonstruct_Edge_3_existent_0_edges_133
                    __anonstruct_Edge_3_to_edges_133
                    __anonstruct_Edge_3_from_edges_133) (0))) }
  
end

module Function_count_not_existent_lemma_behaviors
#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 154 9 64#
"expl:count_not_existent_lemma, behaviors"

  use Unsafe_int32 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_graph_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Function_count_not_existent_lemma 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use import core.Acc_unsafe 
  
  use why3.Bool.Bool 
  
  use import Lemma_zero_after_ecnt_lemma 
  
  use import Lemma_count_zero_lemma 
  
  use import Lemma_count_split_lemma 
  
  use import Lemma_count_split_2_lemma 
  
  use import Lemma_count_one_lemma 
  
  use import Lemma_count_lemma 
  
  use import Lemma_count_double_split_lemma 
  
  use import Lemma_all_count_lemma 
  
  let count_not_existent_lemma_ensures_default
  #"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 154 9 64#
  "expl:Function count_not_existent_lemma, default behavior" =
  fun
   (g_4 : (pointer __anonstruct_Graph_4)) (f_0 : Int32.t) (t_0 : Int32.t) (k
   : Int32.t) (__anonstruct_Edge_3_edges_133_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_g_10_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_134_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_existent_vertices_134 :
   (memory __anonstruct_Vertex_2 Int32.t))
   (__anonstruct_Edge_3_from_edges_133 : (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Edge_3_to_edges_133 : (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Edge_3_existent_0_edges_133 : (memory
   __anonstruct_Edge_3 Int32.t)) (__anonstruct_Graph_4_vertices_g_10 :
   (memory __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_g_10 : (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Graph_4_edges_g_10 : (memory __anonstruct_Graph_4 (pointer
   __anonstruct_Edge_3))) (__anonstruct_Graph_4_ecnt_g_10 : (memory
   __anonstruct_Graph_4 Int32.t)) (__anonstruct_Graph_4_esize_g_10 : (memory
   __anonstruct_Graph_4 Int32.t)) 
   requires {
   (#"test_2_c.jc" 231 12 316#
   ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 148 17 26#
    (#"test_2_c.jc" 231 12 316#
    ((#"test_2_c.jc" 231 12 316#
     ((<=) (offset_min __anonstruct_Graph_4_g_10_alloc_table g_4) (0)))
    /\
    (#"test_2_c.jc" 231 12 316#
    ((#"test_2_c.jc" 231 12 316#
     ((>=) (offset_max __anonstruct_Graph_4_g_10_alloc_table g_4) (0)))
    /\ (#"test_2_c.jc" 231 12 316# ((=) true true)))))))
   /\
   (#"test_2_c.jc" 231 12 316#
   ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 149 17 31#
    (graph_valid g_4 __anonstruct_Vertex_2_vertices_134_alloc_table
    __anonstruct_Edge_3_edges_133_alloc_table __anonstruct_Graph_4_esize_g_10
    __anonstruct_Graph_4_ecnt_g_10 __anonstruct_Graph_4_edges_g_10
    __anonstruct_Graph_4_vsize_g_10 __anonstruct_Graph_4_vertices_g_10
    __anonstruct_Edge_3_existent_0_edges_133 __anonstruct_Edge_3_to_edges_133
    __anonstruct_Edge_3_from_edges_133
    __anonstruct_Vertex_2_existent_vertices_134))
   /\
   (#"test_2_c.jc" 231 12 316#
   ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 150 17 29#
    (Int32.(<=) (select __anonstruct_Graph_4_ecnt_g_10 g_4) k))
   /\
   (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 150 28 41#
   (Int32.(<=) k (select __anonstruct_Graph_4_esize_g_10 g_4))))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 152 16 47#
     "expl:Ensures clause"
     ((=)
     (count g_4 (Int32.to_int f_0) (Int32.to_int t_0)
     (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_10 g_4))
     (Int32.to_int k) __anonstruct_Graph_4_edges_g_10
     __anonstruct_Edge_3_existent_0_edges_133
     __anonstruct_Edge_3_to_edges_133 __anonstruct_Edge_3_from_edges_133)
     (0)))) }  ->
   'Init:
   try
    begin
    (if
    (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 155 12 23#
    (Unsafe_int32.(>)  k (acc  __anonstruct_Graph_4_ecnt_g_10 g_4 ) ))
    then
     begin
     begin
     (assert {
     (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 156 23 54#
     "expl:Assertion in line 156"
     ((=)
     (count g_4 (Int32.to_int f_0) (Int32.to_int t_0)
     (Int.(-) (Int32.to_int k) (1)) (Int32.to_int k)
     __anonstruct_Graph_4_edges_g_10 __anonstruct_Edge_3_existent_0_edges_133
     __anonstruct_Edge_3_to_edges_133 __anonstruct_Edge_3_from_edges_133)
     (0))) }); () end;
      begin
      (assert {
      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 157 23 114#
      "expl:Assertion in line 157"
      ((=)
      (count g_4 (Int32.to_int f_0) (Int32.to_int t_0)
      (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_10 g_4))
      (Int32.to_int k) __anonstruct_Graph_4_edges_g_10
      __anonstruct_Edge_3_existent_0_edges_133
      __anonstruct_Edge_3_to_edges_133 __anonstruct_Edge_3_from_edges_133)
      (Int.(+)
      (count g_4 (Int32.to_int f_0) (Int32.to_int t_0)
      (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_10 g_4))
      (Int.(-) (Int32.to_int k) (1)) __anonstruct_Graph_4_edges_g_10
      __anonstruct_Edge_3_existent_0_edges_133
      __anonstruct_Edge_3_to_edges_133 __anonstruct_Edge_3_from_edges_133)
      (count g_4 (Int32.to_int f_0) (Int32.to_int t_0)
      (Int.(-) (Int32.to_int k) (1)) (Int32.to_int k)
      __anonstruct_Graph_4_edges_g_10
      __anonstruct_Edge_3_existent_0_edges_133
      __anonstruct_Edge_3_to_edges_133 __anonstruct_Edge_3_from_edges_133))))
      }); () end;
      (let _jessie_16 = g_4 in
      (let _jessie_15 = f_0 in
      (let _jessie_14 = t_0 in
      (let _jessie_13 =
      (Unsafe_int32.(-)  k
       (#"test_2_c.jc" 281 64 76# "expl:Integer cast"
       (Unsafe_int32.of_int (1))) ) in
      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 158 12 54#
      "expl:Precondition for count_not_existent_lemma"
      (Function_count_not_existent_lemma.count_not_existent_lemma  _jessie_16
       _jessie_15 _jessie_14 _jessie_13
       __anonstruct_Vertex_2_vertices_134_alloc_table
       __anonstruct_Graph_4_g_10_alloc_table
       __anonstruct_Edge_3_edges_133_alloc_table
       __anonstruct_Graph_4_esize_g_10 __anonstruct_Graph_4_ecnt_g_10
       __anonstruct_Graph_4_edges_g_10 __anonstruct_Graph_4_vsize_g_10
       __anonstruct_Graph_4_vertices_g_10
       __anonstruct_Edge_3_existent_0_edges_133
       __anonstruct_Edge_3_to_edges_133 __anonstruct_Edge_3_from_edges_133
       __anonstruct_Vertex_2_existent_vertices_134 )))))) end else ());
     (raise Return); (raise Return) end with Return -> () end
  
end

module Exceptions

  use why3.Bool.Bool 
  
  exception Goto_while_0_break_exc unit
  
  exception Goto_while_1_break_exc unit
  
  exception Goto_while_2_break_exc unit
  
  exception Goto_while_2_break_0_exc unit
  
  exception Loop_continue_exc unit
  
  exception Loop_exit_exc unit
  
  exception Return_label_exc unit
  
end

module Function_remove_edge_safety
#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 177 0 35#
"expl:remove_edge, safety"

  use import core.Upd_safe 
  
  use import core.Upd_offset_safe 
  
  use import core.Tag_table_type 
  
  use import core.Shift_safe 
  
  use Safe_int32 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_vertex 
  
  use import Logic_graph_valid 
  
  use import Logic_edges_valid 
  
  use import Logic_all_count 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_LF__Axiomatic__count_not_existent_lemma 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use import core.Acc_safe 
  
  use import core.Acc_offset_safe 
  
  use why3.Bool.Bool 
  
  use import Lemma_zero_after_ecnt_lemma 
  
  use import Lemma_count_zero_lemma 
  
  use import Lemma_count_split_lemma 
  
  use import Lemma_count_split_2_lemma 
  
  use import Lemma_count_one_lemma 
  
  use import Lemma_count_lemma 
  
  use import Lemma_count_double_split_lemma 
  
  use import Lemma_all_count_lemma 
  
  let remove_edge
  #"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 177 0 35#
  "expl:Function remove_edge, safety" =
  fun
   (g_0_0 : (pointer __anonstruct_Graph_4)) (f_0_0 : Int32.t) (t_0_0 :
   Int32.t) (__anonstruct_Edge_3_existent_0_edges_32 : ref (memory
   __anonstruct_Edge_3 Int32.t)) (__anonstruct_Graph_4_ecnt_g_0_11 : ref
   (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Edge_3_edges_32_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_g_0_11_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_31_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_32_tag_table :
   (tag_table __anonstruct_Edge_3))
   (__anonstruct_Vertex_2_existent_vertices_31 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Edge_3_from_edges_32 :
   (memory __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_32 :
   (memory __anonstruct_Edge_3 Int32.t))
   (__anonstruct_Graph_4_vertices_g_0_11 : (memory __anonstruct_Graph_4
   (pointer __anonstruct_Vertex_2))) (__anonstruct_Graph_4_vsize_g_0_11 :
   (memory __anonstruct_Graph_4 Int32.t)) (__anonstruct_Graph_4_edges_g_0_11
   : (memory __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
   (__anonstruct_Graph_4_esize_g_0_11 : (memory __anonstruct_Graph_4
   Int32.t)) 
   requires {
   (#"test_2_c.jc" 310 12 833#
   ((#"test_2_c.jc" 310 12 833# _LF__Predicate__count_not_existent_lemma) /\
   (#"test_2_c.jc" 310 12 833#
   ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 166 11 20#
    (#"test_2_c.jc" 310 12 833#
    ((#"test_2_c.jc" 310 12 833#
     ((<=) (offset_min __anonstruct_Graph_4_g_0_11_alloc_table g_0_0) (0)))
    /\
    (#"test_2_c.jc" 310 12 833#
    ((#"test_2_c.jc" 310 12 833#
     ((>=) (offset_max __anonstruct_Graph_4_g_0_11_alloc_table g_0_0) (0)))
    /\ (#"test_2_c.jc" 310 12 833# ((=) true true)))))))
   /\
   (#"test_2_c.jc" 310 12 833#
   ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 166 24 38#
    (graph_valid g_0_0 __anonstruct_Vertex_2_vertices_31_alloc_table
    __anonstruct_Edge_3_edges_32_alloc_table
    __anonstruct_Graph_4_esize_g_0_11 !__anonstruct_Graph_4_ecnt_g_0_11
    __anonstruct_Graph_4_edges_g_0_11 __anonstruct_Graph_4_vsize_g_0_11
    __anonstruct_Graph_4_vertices_g_0_11
    !__anonstruct_Edge_3_existent_0_edges_32 __anonstruct_Edge_3_to_edges_32
    __anonstruct_Edge_3_from_edges_32
    __anonstruct_Vertex_2_existent_vertices_31))
   /\
   (#"test_2_c.jc" 310 12 833#
   ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 167 11 26#
    (is_vertex g_0_0 (Int32.to_int f_0_0) __anonstruct_Graph_4_vsize_g_0_11))
   /\
   (#"test_2_c.jc" 310 12 833#
   ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 168 11 26#
    (is_vertex g_0_0 (Int32.to_int t_0_0) __anonstruct_Graph_4_vsize_g_0_11))
   /\
   (#"test_2_c.jc" 310 12 833#
   ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 169 11 34#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_31
    (shift (select __anonstruct_Graph_4_vertices_g_0_11 g_0_0)
    (Int32.to_int f_0_0)))) (0))))
   /\
   (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 170 11 34#
   (not
   ((=)
   (Int32.to_int
   (select __anonstruct_Vertex_2_existent_vertices_31
   (shift (select __anonstruct_Graph_4_vertices_g_0_11 g_0_0)
   (Int32.to_int t_0_0)))) (0)))))))))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   'Init:
   try
    begin
    (let c = ref (Safe_int32.any_  () ) in
    (let i = ref (Safe_int32.any_  () ) in
    (let l = ref (Safe_int32.any_  () ) in
    (let h = ref (Safe_int32.any_  () ) in
    (let h_0 = ref (Safe_int32.any_  () ) in
    begin
    (c :=
     (let _jessie_41 =
     (#"test_2_c.jc" 355 20 32# "expl:Integer cast" (Safe_int32.of_int (0)))
     in
     begin
     (assert {
     (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 179 8 9#
     "expl:Pointer index bounds" true) }); _jessie_41 end));
     'U__Before:
     begin
     'U__Before:
     try
      begin
      (i :=
       (let _jessie_55 =
       (#"test_2_c.jc" 357 23 35# "expl:Integer cast"
       (Safe_int32.of_int (0))) in
       begin
       (assert {
       (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 208 13 14#
       "expl:Pointer index bounds" true) }); _jessie_55 end));
       'LoopEntry:
       begin
       'LoopEntry:
       'Loop_5:
       loop
       invariant { (#"test_2_c.jc" 359 9 78891# true) }
         variant {
           (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 206 21 32#
           (Int.(-)
           (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_0_11 g_0_0))
           (Int32.to_int !i))) }
        begin
        any unit
        requires { true } reads { __anonstruct_Edge_3_existent_0_edges_32,
        __anonstruct_Graph_4_ecnt_g_0_11, f_0_0, g_0_0, t_0_0 }
        ensures {
          ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 202 23 130#
           (forall k_12 : int.
            ((((<=) (Int32.to_int !c) k_12) /\ ((<) k_12 (Int32.to_int !i)))
             ->
             ((=)
             (Int32.to_int
             (select !__anonstruct_Edge_3_existent_0_edges_32
             (shift (select __anonstruct_Graph_4_edges_g_0_11 g_0_0) k_12)))
             (0)))))
          /\
          ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 200 23 128#
           (forall m_17 : int.
            ((((<=) (0) m_17) /\ ((<) m_17 (Int32.to_int !i))) ->
             ((Int32.(=)
              (select __anonstruct_Edge_3_from_edges_32
              (shift (select __anonstruct_Graph_4_edges_g_0_11 g_0_0) m_17))
              f_0_0) ->
              ((Int32.(=)
               (select __anonstruct_Edge_3_to_edges_32
               (shift (select __anonstruct_Graph_4_edges_g_0_11 g_0_0) m_17))
               t_0_0) ->
               ((=)
               (Int32.to_int
               (select !__anonstruct_Edge_3_existent_0_edges_32
               (shift (select __anonstruct_Graph_4_edges_g_0_11 g_0_0) m_17)))
               (0)))))))
          /\
          ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 198 23 89#
           ((=)
           (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
           (Int32.to_int !i)
           (Int32.to_int (select __anonstruct_Graph_4_esize_g_0_11 g_0_0))
           __anonstruct_Graph_4_edges_g_0_11
           !__anonstruct_Edge_3_existent_0_edges_32
           __anonstruct_Edge_3_to_edges_32 __anonstruct_Edge_3_from_edges_32)
           (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
           (Int32.to_int !i)
           (Int32.to_int (select __anonstruct_Graph_4_esize_g_0_11 g_0_0))
           __anonstruct_Graph_4_edges_g_0_11 (at
           !__anonstruct_Edge_3_existent_0_edges_32 'U__Before)
           __anonstruct_Edge_3_to_edges_32 __anonstruct_Edge_3_from_edges_32)))
          /\
          ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 196 23 121#
           (forall k_11 : int.
            ((((<=) (Int32.to_int !i) k_11) /\
             ((<) k_11
             (Int32.to_int (select __anonstruct_Graph_4_esize_g_0_11 g_0_0))))
             ->
             (Int32.(=)
             (select !__anonstruct_Edge_3_existent_0_edges_32
             (shift (select __anonstruct_Graph_4_edges_g_0_11 g_0_0) k_11))
             (select (at !__anonstruct_Edge_3_existent_0_edges_32 'U__Before)
             (shift (select __anonstruct_Graph_4_edges_g_0_11 g_0_0) k_11))))))
          /\
          ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 192 23 151#
           (forall f2_11 : int.
            (forall t2_11 : int.
             (((not ((=) f2_11 (Int32.to_int f_0_0))) \/
              (not ((=) t2_11 (Int32.to_int t_0_0)))) ->
              ((=)
              (all_count g_0_0 f2_11 t2_11 __anonstruct_Graph_4_esize_g_0_11
              __anonstruct_Graph_4_edges_g_0_11
              !__anonstruct_Edge_3_existent_0_edges_32
              __anonstruct_Edge_3_to_edges_32
              __anonstruct_Edge_3_from_edges_32)
              (all_count g_0_0 f2_11 t2_11 __anonstruct_Graph_4_esize_g_0_11
              __anonstruct_Graph_4_edges_g_0_11 (at
              !__anonstruct_Edge_3_existent_0_edges_32 'Init)
              __anonstruct_Edge_3_to_edges_32
              __anonstruct_Edge_3_from_edges_32))))))
          /\
          ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 190 23 48#
           ((=)
           (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0) (0)
           (Int32.to_int !i) __anonstruct_Graph_4_edges_g_0_11
           !__anonstruct_Edge_3_existent_0_edges_32
           __anonstruct_Edge_3_to_edges_32 __anonstruct_Edge_3_from_edges_32)
           (0)))
          /\
          ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 188 23 37#
           (graph_valid g_0_0 __anonstruct_Vertex_2_vertices_31_alloc_table
           __anonstruct_Edge_3_edges_32_alloc_table
           __anonstruct_Graph_4_esize_g_0_11
           !__anonstruct_Graph_4_ecnt_g_0_11
           __anonstruct_Graph_4_edges_g_0_11
           __anonstruct_Graph_4_vsize_g_0_11
           __anonstruct_Graph_4_vertices_g_0_11
           !__anonstruct_Edge_3_existent_0_edges_32
           __anonstruct_Edge_3_to_edges_32 __anonstruct_Edge_3_from_edges_32
           __anonstruct_Vertex_2_existent_vertices_31))
          /\
          ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 186 23 36#
           (Int32.(<=) !c (select __anonstruct_Graph_4_esize_g_0_11 g_0_0)))
          /\
          ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 185 23 29#
           (Int32.(>=) !c (#"test_2_c.jc" 365 36 48# "expl:Integer cast"
           (Int32.of_int (0)))))
          /\
          ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 184 23 35#
           (Int32.(<=) !i (select !__anonstruct_Graph_4_ecnt_g_0_11 g_0_0)))
          /\
          (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 183 23 29#
          (Int32.(>=) !i (#"test_2_c.jc" 361 36 48# "expl:Integer cast"
          (Int32.of_int (0))))))))))))))) } ;
         try
          begin
          'LoopCurrent:
          begin
          'LoopCurrent:
          (if
          (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 208 20 31#
          (Safe_int32.(<)  !i
           (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 208 24 31#
           "expl:Pointer dereference"
           (acc  __anonstruct_Graph_4_g_0_11_alloc_table
            !__anonstruct_Graph_4_ecnt_g_0_11 g_0_0 )) )) then ()
          else (raise (Goto_while_0_break_exc ())));
           begin
           begin
           any unit
           requires { true } reads { g_0_0 }
           ensures {
             (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 209 19 28#
             (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 209 19 28#
             ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 209 19 28#
              ((<=)
              (offset_min __anonstruct_Graph_4_g_0_11_alloc_table g_0_0) (0)))
             /\
             (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 209 19 28#
             ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 209 19 28#
              ((>=)
              (offset_max __anonstruct_Graph_4_g_0_11_alloc_table g_0_0) (0)))
             /\
             (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 209 19 28#
             ((=) true true))))))) } ; () end;
            begin
            any unit
            requires { true } reads {
            __anonstruct_Edge_3_existent_0_edges_32,
            __anonstruct_Graph_4_ecnt_g_0_11, g_0_0 }
            ensures {
              (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 210 19 33#
              (graph_valid g_0_0
              __anonstruct_Vertex_2_vertices_31_alloc_table
              __anonstruct_Edge_3_edges_32_alloc_table
              __anonstruct_Graph_4_esize_g_0_11
              !__anonstruct_Graph_4_ecnt_g_0_11
              __anonstruct_Graph_4_edges_g_0_11
              __anonstruct_Graph_4_vsize_g_0_11
              __anonstruct_Graph_4_vertices_g_0_11
              !__anonstruct_Edge_3_existent_0_edges_32
              __anonstruct_Edge_3_to_edges_32
              __anonstruct_Edge_3_from_edges_32
              __anonstruct_Vertex_2_existent_vertices_31)) } ; () end;
            'U__Pre1:
            begin
            'U__Pre1: ();
             (if
             (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 214 12 33#
             (Safe_int32.(=) 
              (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 214 12 28#
              "expl:Pointer dereference"
              (acc_offset_typesafe  __anonstruct_Edge_3_edges_32_alloc_table
               __anonstruct_Edge_3_from_edges_32
               (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 214 12 20#
               "expl:Pointer dereference"
               (acc  __anonstruct_Graph_4_g_0_11_alloc_table
                __anonstruct_Graph_4_edges_g_0_11 g_0_0 ))
               (Safe_int32.to_int  !i ) )) f_0_0 ))
             then
              (if
              (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 214 37 56#
              (Safe_int32.(=) 
               (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 214 37 51#
               "expl:Pointer dereference"
               (acc_offset_typesafe  __anonstruct_Edge_3_edges_32_alloc_table
                __anonstruct_Edge_3_to_edges_32
                (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 214 37 45#
                "expl:Pointer dereference"
                (acc  __anonstruct_Graph_4_g_0_11_alloc_table
                 __anonstruct_Graph_4_edges_g_0_11 g_0_0 ))
                (Safe_int32.to_int  !i ) )) t_0_0 ))
              then
               try
                begin
                (let _jessie_45 =
                (let _jessie_44 =
                (#"test_2_c.jc" 440 86 98# "expl:Integer cast"
                (Safe_int32.of_int (0))) in
                begin
                (assert {
                (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 216 9 33#
                "expl:Pointer index bounds" true) }); _jessie_44 end) in
                (let _jessie_46 =
                (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 216 9 17#
                "expl:Pointer dereference"
                (acc  __anonstruct_Graph_4_g_0_11_alloc_table
                 __anonstruct_Graph_4_edges_g_0_11 g_0_0 )) in
                (let _jessie_47 = (Safe_int32.to_int  !i ) in
                (let _jessie_48 = (shift_typesafe  _jessie_46 _jessie_47 ) in
                (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 216 9 33#
                "expl:Pointer dereference"
                (upd_offset_typesafe 
                 __anonstruct_Edge_3_edges_32_alloc_table
                 __anonstruct_Edge_3_existent_0_edges_32 _jessie_46
                 _jessie_47 _jessie_45 ))))));
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_32, f_0_0, g_0_0, t_0_0
                 }
                 ensures {
                   (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 218 23 142#
                   (forall f2 : int.
                    (forall t2 : int.
                     (((not ((=) f2 (Int32.to_int f_0_0))) \/
                      (not ((=) t2 (Int32.to_int t_0_0)))) ->
                      ((=)
                      (count g_0_0 f2 t2 (Int32.to_int !i)
                      (Int.(+) (Int32.to_int !i) (1))
                      __anonstruct_Graph_4_edges_g_0_11
                      !__anonstruct_Edge_3_existent_0_edges_32
                      __anonstruct_Edge_3_to_edges_32
                      __anonstruct_Edge_3_from_edges_32)
                      (count g_0_0 f2 t2 (Int32.to_int !i)
                      (Int.(+) (Int32.to_int !i) (1))
                      __anonstruct_Graph_4_edges_g_0_11 (at
                      !__anonstruct_Edge_3_existent_0_edges_32 'U__Before)
                      __anonstruct_Edge_3_to_edges_32
                      __anonstruct_Edge_3_from_edges_32)))))) } ; () end;
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_32, f_0_0, g_0_0, t_0_0
                 }
                 ensures {
                   (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 219 23 52#
                   ((=)
                   (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                   (Int32.to_int !i) (Int.(+) (Int32.to_int !i) (1))
                   __anonstruct_Graph_4_edges_g_0_11
                   !__anonstruct_Edge_3_existent_0_edges_32
                   __anonstruct_Edge_3_to_edges_32
                   __anonstruct_Edge_3_from_edges_32) (0))) } ; () end;
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_32, f_0_0, g_0_0, t_0_0
                 }
                 ensures {
                   (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 220 23 139#
                   (forall m_12 : int.
                    ((((<=) (0) m_12) /\ ((<) m_12 (Int32.to_int !i))) ->
                     ((Int32.(=)
                      (select __anonstruct_Edge_3_from_edges_32
                      (shift (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                      m_12)) f_0_0) ->
                      ((Int32.(=)
                       (select __anonstruct_Edge_3_to_edges_32
                       (shift
                       (select __anonstruct_Graph_4_edges_g_0_11 g_0_0) m_12))
                       t_0_0) ->
                       ((=)
                       (Int32.to_int
                       (select !__anonstruct_Edge_3_existent_0_edges_32
                       (shift
                       (select __anonstruct_Graph_4_edges_g_0_11 g_0_0) m_12)))
                       (0))))))) } ; () end;
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_32, f_0_0, g_0_0, t_0_0
                 }
                 ensures {
                   (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 221 23 139#
                   (forall m_13 : int.
                    ((((<=) (0) m_13) /\ ((<) m_13 (Int32.to_int !i))) ->
                     ((Int32.(=)
                      (select __anonstruct_Edge_3_from_edges_32
                      (shift (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                      m_13)) f_0_0) ->
                      ((Int32.(=)
                       (select __anonstruct_Edge_3_to_edges_32
                       (shift
                       (select __anonstruct_Graph_4_edges_g_0_11 g_0_0) m_13))
                       t_0_0) ->
                       ((=)
                       (Int32.to_int
                       (select (at !__anonstruct_Edge_3_existent_0_edges_32
                       'U__Pre1)
                       (shift
                       (select __anonstruct_Graph_4_edges_g_0_11 g_0_0) m_13)))
                       (0))))))) } ; () end;
                 begin
                 (l :=
                  (let _jessie_43 =
                  (#"test_2_c.jc" 521 62 74# "expl:Integer cast"
                  (Safe_int32.of_int (0))) in
                  begin
                  (assert {
                  (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 224 20 21#
                  "expl:Pointer index bounds" true) }); _jessie_43 end));
                  'LoopEntry:
                  begin
                  'LoopEntry:
                  'Loop_6:
                  loop
                  invariant { (#"test_2_c.jc" 523 48 41765# true) }
                    variant {
                      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 299 33 45#
                      (Int.(-)
                      (Int32.to_int
                      (select __anonstruct_Graph_4_esize_g_0_11 g_0_0))
                      (Int32.to_int !l))) }
                   begin
                   any unit
                   requires { true } reads {
                   __anonstruct_Edge_3_existent_0_edges_32,
                   __anonstruct_Graph_4_ecnt_g_0_11, f_0_0, g_0_0, t_0_0 }
                   ensures {
                     ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 293 35 166#
                      (forall k_10 : int.
                       ((((<=) (Int32.to_int !c) k_10) /\
                        ((<) k_10 (Int32.to_int !i))) ->
                        ((=)
                        (Int32.to_int
                        (select !__anonstruct_Edge_3_existent_0_edges_32
                        (shift
                        (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                        k_10))) (0)))))
                     /\
                     ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 286 35 342#
                      (forall j_5 : int.
                       ((((<=) (0) j_5) /\ ((<=) j_5 (Int32.to_int !l))) ->
                        (forall f2_10 : int.
                         (forall t2_10 : int.
                          (((not ((=) f2_10 (Int32.to_int f_0_0))) \/
                           (not ((=) t2_10 (Int32.to_int t_0_0)))) ->
                           ((=)
                           (count g_0_0 f2_10 t2_10 (0) j_5
                           __anonstruct_Graph_4_edges_g_0_11
                           !__anonstruct_Edge_3_existent_0_edges_32
                           __anonstruct_Edge_3_to_edges_32
                           __anonstruct_Edge_3_from_edges_32)
                           (count g_0_0 f2_10 t2_10 (0) j_5
                           __anonstruct_Graph_4_edges_g_0_11 (at
                           !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                           __anonstruct_Edge_3_to_edges_32
                           __anonstruct_Edge_3_from_edges_32))))))))
                     /\
                     ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 279 35 354#
                      (forall j_4 : int.
                       ((((<=) (0) j_4) /\
                        ((<=) j_4 (Int.(-) (Int32.to_int !l) (1)))) ->
                        (forall f2_9 : int.
                         (forall t2_9 : int.
                          (((not ((=) f2_9 (Int32.to_int f_0_0))) \/
                           (not ((=) t2_9 (Int32.to_int t_0_0)))) ->
                           ((=)
                           (count g_0_0 f2_9 t2_9 j_4 (Int.(+) j_4 (1))
                           __anonstruct_Graph_4_edges_g_0_11
                           !__anonstruct_Edge_3_existent_0_edges_32
                           __anonstruct_Edge_3_to_edges_32
                           __anonstruct_Edge_3_from_edges_32)
                           (count g_0_0 f2_9 t2_9 j_4 (Int.(+) j_4 (1))
                           __anonstruct_Graph_4_edges_g_0_11 (at
                           !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                           __anonstruct_Edge_3_to_edges_32
                           __anonstruct_Edge_3_from_edges_32))))))))
                     /\
                     ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 272 35 406#
                      (forall j_3 : int.
                       ((((<=) (0) j_3) /\
                        (((>=) j_3 (Int.(-) (Int32.to_int !l) (1))) /\
                        ((<) j_3
                        (Int32.to_int
                        (select __anonstruct_Graph_4_esize_g_0_11 g_0_0)))))
                        ->
                        (forall f2_8 : int.
                         (forall t2_8 : int.
                          (((not ((=) f2_8 (Int32.to_int f_0_0))) \/
                           (not ((=) t2_8 (Int32.to_int t_0_0)))) ->
                           ((=)
                           (count g_0_0 f2_8 t2_8 (0) (Int.(+) j_3 (1))
                           __anonstruct_Graph_4_edges_g_0_11
                           !__anonstruct_Edge_3_existent_0_edges_32
                           __anonstruct_Edge_3_to_edges_32
                           __anonstruct_Edge_3_from_edges_32)
                           (Int.(+)
                           (count g_0_0 f2_8 t2_8 (0) j_3
                           __anonstruct_Graph_4_edges_g_0_11
                           !__anonstruct_Edge_3_existent_0_edges_32
                           __anonstruct_Edge_3_to_edges_32
                           __anonstruct_Edge_3_from_edges_32)
                           (count g_0_0 f2_8 t2_8 j_3 (Int.(+) j_3 (1))
                           __anonstruct_Graph_4_edges_g_0_11
                           !__anonstruct_Edge_3_existent_0_edges_32
                           __anonstruct_Edge_3_to_edges_32
                           __anonstruct_Edge_3_from_edges_32)))))))))
                     /\
                     ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 265 35 385#
                      (forall j_2 : int.
                       ((((<=) (0) j_2) /\
                        ((<=) j_2 (Int.(-) (Int32.to_int !l) (1)))) ->
                        (forall f2_7 : int.
                         (forall t2_7 : int.
                          (((not ((=) f2_7 (Int32.to_int f_0_0))) \/
                           (not ((=) t2_7 (Int32.to_int t_0_0)))) ->
                           ((=)
                           (count g_0_0 f2_7 t2_7 (0) (Int.(+) j_2 (1))
                           __anonstruct_Graph_4_edges_g_0_11
                           !__anonstruct_Edge_3_existent_0_edges_32
                           __anonstruct_Edge_3_to_edges_32
                           __anonstruct_Edge_3_from_edges_32)
                           (Int.(+)
                           (count g_0_0 f2_7 t2_7 (0) j_2
                           __anonstruct_Graph_4_edges_g_0_11
                           !__anonstruct_Edge_3_existent_0_edges_32
                           __anonstruct_Edge_3_to_edges_32
                           __anonstruct_Edge_3_from_edges_32)
                           (count g_0_0 f2_7 t2_7 j_2 (Int.(+) j_2 (1))
                           __anonstruct_Graph_4_edges_g_0_11
                           !__anonstruct_Edge_3_existent_0_edges_32
                           __anonstruct_Edge_3_to_edges_32
                           __anonstruct_Edge_3_from_edges_32)))))))))
                     /\
                     ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 258 35 406#
                      (forall j_1 : int.
                       ((((<=) (0) j_1) /\
                        (((>=) j_1 (Int.(-) (Int32.to_int !l) (1))) /\
                        ((<) j_1
                        (Int32.to_int
                        (select __anonstruct_Graph_4_esize_g_0_11 g_0_0)))))
                        ->
                        (forall f2_6 : int.
                         (forall t2_6 : int.
                          (((not ((=) f2_6 (Int32.to_int f_0_0))) \/
                           (not ((=) t2_6 (Int32.to_int t_0_0)))) ->
                           ((=)
                           (count g_0_0 f2_6 t2_6 (0) (Int.(+) j_1 (1))
                           __anonstruct_Graph_4_edges_g_0_11 (at
                           !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                           __anonstruct_Edge_3_to_edges_32
                           __anonstruct_Edge_3_from_edges_32)
                           (Int.(+)
                           (count g_0_0 f2_6 t2_6 (0) j_1
                           __anonstruct_Graph_4_edges_g_0_11 (at
                           !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                           __anonstruct_Edge_3_to_edges_32
                           __anonstruct_Edge_3_from_edges_32)
                           (count g_0_0 f2_6 t2_6 j_1 (Int.(+) j_1 (1))
                           __anonstruct_Graph_4_edges_g_0_11 (at
                           !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                           __anonstruct_Edge_3_to_edges_32
                           __anonstruct_Edge_3_from_edges_32)))))))))
                     /\
                     ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 251 35 365#
                      (forall j_0 : int.
                       ((((<=) (0) j_0) /\
                        ((<=) j_0 (Int.(-) (Int32.to_int !l) (1)))) ->
                        (forall f2_5 : int.
                         (forall t2_5 : int.
                          (((not ((=) f2_5 (Int32.to_int f_0_0))) \/
                           (not ((=) t2_5 (Int32.to_int t_0_0)))) ->
                           ((=)
                           (count g_0_0 f2_5 t2_5 (0) (Int.(+) j_0 (1))
                           __anonstruct_Graph_4_edges_g_0_11 (at
                           !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                           __anonstruct_Edge_3_to_edges_32
                           __anonstruct_Edge_3_from_edges_32)
                           (Int.(+)
                           (count g_0_0 f2_5 t2_5 (0) j_0
                           __anonstruct_Graph_4_edges_g_0_11 (at
                           !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                           __anonstruct_Edge_3_to_edges_32
                           __anonstruct_Edge_3_from_edges_32)
                           (count g_0_0 f2_5 t2_5 j_0 (Int.(+) j_0 (1))
                           __anonstruct_Graph_4_edges_g_0_11 (at
                           !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                           __anonstruct_Edge_3_to_edges_32
                           __anonstruct_Edge_3_from_edges_32)))))))))
                     /\
                     ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 248 35 173#
                      (((>) (Int32.to_int !l)
                       (Int.(-) (Int32.to_int !i) (1))) ->
                       ((=)
                       (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                       (0) (Int.(+) (Int32.to_int !l) (1))
                       __anonstruct_Graph_4_edges_g_0_11
                       !__anonstruct_Edge_3_existent_0_edges_32
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32)
                       (Int.(+)
                       (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                       (0) (Int32.to_int !l)
                       __anonstruct_Graph_4_edges_g_0_11
                       !__anonstruct_Edge_3_existent_0_edges_32
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32)
                       (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                       (Int32.to_int !l) (Int.(+) (Int32.to_int !l) (1))
                       __anonstruct_Graph_4_edges_g_0_11
                       !__anonstruct_Edge_3_existent_0_edges_32
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32)))))
                     /\
                     ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 245 35 169#
                      (((>) (Int32.to_int !l)
                       (Int.(-) (Int32.to_int !i) (1))) ->
                       ((=)
                       (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                       (0) (Int.(+) (Int32.to_int !l) (1))
                       __anonstruct_Graph_4_edges_g_0_11 (at
                       !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32)
                       (Int.(+)
                       (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                       (0) (Int32.to_int !l)
                       __anonstruct_Graph_4_edges_g_0_11 (at
                       !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32)
                       (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                       (Int32.to_int !l) (Int.(+) (Int32.to_int !l) (1))
                       __anonstruct_Graph_4_edges_g_0_11 (at
                       !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32)))))
                     /\
                     ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 242 35 132#
                      ((Int32.(<=) !l !i) ->
                       ((=)
                       (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                       (0) (Int32.to_int !l)
                       __anonstruct_Graph_4_edges_g_0_11 (at
                       !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32)
                       (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                       (0) (Int32.to_int !l)
                       __anonstruct_Graph_4_edges_g_0_11
                       !__anonstruct_Edge_3_existent_0_edges_32
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32))))
                     /\
                     ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 239 35 168#
                      (((<=) (Int32.to_int !l)
                       (Int.(-) (Int32.to_int !i) (1))) ->
                       ((=)
                       (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                       (0) (Int.(+) (Int32.to_int !l) (1))
                       __anonstruct_Graph_4_edges_g_0_11
                       !__anonstruct_Edge_3_existent_0_edges_32
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32)
                       (Int.(+)
                       (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                       (0) (Int32.to_int !l)
                       __anonstruct_Graph_4_edges_g_0_11
                       !__anonstruct_Edge_3_existent_0_edges_32
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32)
                       (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                       (Int32.to_int !l) (Int.(+) (Int32.to_int !l) (1))
                       __anonstruct_Graph_4_edges_g_0_11
                       !__anonstruct_Edge_3_existent_0_edges_32
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32)))))
                     /\
                     ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 236 35 168#
                      (((<=) (Int32.to_int !l)
                       (Int.(-) (Int32.to_int !i) (1))) ->
                       ((=)
                       (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                       (0) (Int.(+) (Int32.to_int !l) (1))
                       __anonstruct_Graph_4_edges_g_0_11 (at
                       !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32)
                       (Int.(+)
                       (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                       (0) (Int32.to_int !l)
                       __anonstruct_Graph_4_edges_g_0_11 (at
                       !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32)
                       (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                       (Int32.to_int !l) (Int.(+) (Int32.to_int !l) (1))
                       __anonstruct_Graph_4_edges_g_0_11 (at
                       !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32)))))
                     /\
                     ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 232 35 203#
                      (forall j : int.
                       ((((<=) (0) j) /\
                        (((<) j (Int32.to_int !l)) /\
                        (not ((=) j (Int32.to_int !i))))) ->
                        ((=)
                        (count g_0_0 (Int32.to_int f_0_0)
                        (Int32.to_int t_0_0) j (Int.(+) j (1))
                        __anonstruct_Graph_4_edges_g_0_11 (at
                        !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                        __anonstruct_Edge_3_to_edges_32
                        __anonstruct_Edge_3_from_edges_32)
                        (count g_0_0 (Int32.to_int f_0_0)
                        (Int32.to_int t_0_0) j (Int.(+) j (1))
                        __anonstruct_Graph_4_edges_g_0_11
                        !__anonstruct_Edge_3_existent_0_edges_32
                        __anonstruct_Edge_3_to_edges_32
                        __anonstruct_Edge_3_from_edges_32)))))
                     /\
                     ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 230 35 49#
                      (graph_valid g_0_0
                      __anonstruct_Vertex_2_vertices_31_alloc_table
                      __anonstruct_Edge_3_edges_32_alloc_table
                      __anonstruct_Graph_4_esize_g_0_11
                      !__anonstruct_Graph_4_ecnt_g_0_11
                      __anonstruct_Graph_4_edges_g_0_11
                      __anonstruct_Graph_4_vsize_g_0_11
                      __anonstruct_Graph_4_vertices_g_0_11
                      !__anonstruct_Edge_3_existent_0_edges_32
                      __anonstruct_Edge_3_to_edges_32
                      __anonstruct_Edge_3_from_edges_32
                      __anonstruct_Vertex_2_existent_vertices_31))
                     /\
                     ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 229 35 73#
                      (if
                       ((<=) (0)
                       (Int.(-)
                       (Int32.to_int
                       (select __anonstruct_Graph_4_esize_g_0_11 g_0_0)) (1)))
                       then
                       (((<=)
                        (offset_min __anonstruct_Edge_3_edges_32_alloc_table
                        (select __anonstruct_Graph_4_edges_g_0_11 g_0_0))
                        (0))
                       /\
                       (((>=)
                        (offset_max __anonstruct_Edge_3_edges_32_alloc_table
                        (select __anonstruct_Graph_4_edges_g_0_11 g_0_0))
                        (Int.(-)
                        (Int32.to_int
                        (select __anonstruct_Graph_4_esize_g_0_11 g_0_0))
                        (1)))
                       /\
                       (forall __framac_tmp6 : int.
                        ((((<=) (0) __framac_tmp6) /\
                         ((<=) __framac_tmp6
                         (Int.(-)
                         (Int32.to_int
                         (select __anonstruct_Graph_4_esize_g_0_11 g_0_0))
                         (1)))) -> ((=) true true))))) else ((=) true true)))
                     /\
                     ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 228 35 44#
                      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 228 35 44#
                      ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 228 35 44#
                       ((<=)
                       (offset_min __anonstruct_Graph_4_g_0_11_alloc_table
                       g_0_0) (0)))
                      /\
                      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 228 35 44#
                      ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 228 35 44#
                       ((>=)
                       (offset_max __anonstruct_Graph_4_g_0_11_alloc_table
                       g_0_0) (0)))
                      /\
                      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 228 35 44#
                      ((=) true true)))))))
                     /\
                     ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 227 35 48#
                      (Int32.(<=) !l
                      (select __anonstruct_Graph_4_esize_g_0_11 g_0_0)))
                     /\
                     (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 226 35 41#
                     (Int32.(>=) !l (#"test_2_c.jc" 530 62 74#
                     "expl:Integer cast" (Int32.of_int (0))))))))))))))))))))))
                     } ;
                    try
                     begin
                     'LoopCurrent:
                     begin
                     'LoopCurrent:
                     (if
                     (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 302 23 35#
                     (Safe_int32.(<)  !l
                      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 302 27 35#
                      "expl:Pointer dereference"
                      (acc  __anonstruct_Graph_4_g_0_11_alloc_table
                       __anonstruct_Graph_4_esize_g_0_11 g_0_0 )) )) 
                     then () else (raise (Goto_while_1_break_exc ())));
                      begin
                      (l :=
                       (let _jessie_42 =
                       (Safe_int32.(+)  !l
                        (#"test_2_c.jc" 905 68 80# "expl:Integer cast"
                        (Safe_int32.of_int (1))) ) in
                       begin
                       (assert {
                       (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 303 20 23#
                       "expl:Pointer index bounds" true) }); _jessie_42 end));
                       begin
                       any unit
                       requires { true } reads {
                       __anonstruct_Edge_3_existent_0_edges_32, f_0_0, g_0_0,
                       t_0_0 }
                       ensures {
                         (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 304 31 149#
                         (forall f2_0 : int.
                          (forall t2_0 : int.
                           (((not ((=) f2_0 (Int32.to_int f_0_0))) \/
                            (not ((=) t2_0 (Int32.to_int t_0_0)))) ->
                            ((=)
                            (count g_0_0 f2_0 t2_0
                            (Int.(-) (Int32.to_int !l) (1)) (Int32.to_int !l)
                            __anonstruct_Graph_4_edges_g_0_11
                            !__anonstruct_Edge_3_existent_0_edges_32
                            __anonstruct_Edge_3_to_edges_32
                            __anonstruct_Edge_3_from_edges_32)
                            (count g_0_0 f2_0 t2_0
                            (Int.(-) (Int32.to_int !l) (1)) (Int32.to_int !l)
                            __anonstruct_Graph_4_edges_g_0_11 (at
                            !__anonstruct_Edge_3_existent_0_edges_32
                            'U__Pre1) __anonstruct_Edge_3_to_edges_32
                            __anonstruct_Edge_3_from_edges_32)))))) } ; ()
                       end;
                       begin
                       any unit
                       requires { true } reads {
                       __anonstruct_Edge_3_existent_0_edges_32, f_0_0, g_0_0,
                       t_0_0 }
                       ensures {
                         (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 305 31 180#
                         (forall f2_1 : int.
                          (forall t2_1 : int.
                           (((not ((=) f2_1 (Int32.to_int f_0_0))) \/
                            (not ((=) t2_1 (Int32.to_int t_0_0)))) ->
                            ((=)
                            (count g_0_0 f2_1 t2_1 (0) (Int32.to_int !l)
                            __anonstruct_Graph_4_edges_g_0_11
                            !__anonstruct_Edge_3_existent_0_edges_32
                            __anonstruct_Edge_3_to_edges_32
                            __anonstruct_Edge_3_from_edges_32)
                            (Int.(+)
                            (count g_0_0 f2_1 t2_1 (0)
                            (Int.(-) (Int32.to_int !l) (1))
                            __anonstruct_Graph_4_edges_g_0_11
                            !__anonstruct_Edge_3_existent_0_edges_32
                            __anonstruct_Edge_3_to_edges_32
                            __anonstruct_Edge_3_from_edges_32)
                            (count g_0_0 f2_1 t2_1
                            (Int.(-) (Int32.to_int !l) (1)) (Int32.to_int !l)
                            __anonstruct_Graph_4_edges_g_0_11
                            !__anonstruct_Edge_3_existent_0_edges_32
                            __anonstruct_Edge_3_to_edges_32
                            __anonstruct_Edge_3_from_edges_32))))))) } ; ()
                       end;
                       begin
                       any unit
                       requires { true } reads {
                       __anonstruct_Edge_3_existent_0_edges_32, f_0_0, g_0_0,
                       t_0_0 }
                       ensures {
                         (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 306 31 180#
                         (forall f2_2 : int.
                          (forall t2_2 : int.
                           (((not ((=) f2_2 (Int32.to_int f_0_0))) \/
                            (not ((=) t2_2 (Int32.to_int t_0_0)))) ->
                            ((=)
                            (count g_0_0 f2_2 t2_2 (0) (Int32.to_int !l)
                            __anonstruct_Graph_4_edges_g_0_11 (at
                            !__anonstruct_Edge_3_existent_0_edges_32
                            'U__Pre1) __anonstruct_Edge_3_to_edges_32
                            __anonstruct_Edge_3_from_edges_32)
                            (Int.(+)
                            (count g_0_0 f2_2 t2_2 (0)
                            (Int.(-) (Int32.to_int !l) (1))
                            __anonstruct_Graph_4_edges_g_0_11 (at
                            !__anonstruct_Edge_3_existent_0_edges_32
                            'U__Pre1) __anonstruct_Edge_3_to_edges_32
                            __anonstruct_Edge_3_from_edges_32)
                            (count g_0_0 f2_2 t2_2
                            (Int.(-) (Int32.to_int !l) (1)) (Int32.to_int !l)
                            __anonstruct_Graph_4_edges_g_0_11 (at
                            !__anonstruct_Edge_3_existent_0_edges_32
                            'U__Pre1) __anonstruct_Edge_3_to_edges_32
                            __anonstruct_Edge_3_from_edges_32))))))) } ; ()
                       end;
                       begin
                       any unit
                       requires { true } reads {
                       __anonstruct_Edge_3_existent_0_edges_32, f_0_0, g_0_0,
                       t_0_0 }
                       ensures {
                         (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 307 31 149#
                         (forall f2_3 : int.
                          (forall t2_3 : int.
                           (((not ((=) f2_3 (Int32.to_int f_0_0))) \/
                            (not ((=) t2_3 (Int32.to_int t_0_0)))) ->
                            ((=)
                            (count g_0_0 f2_3 t2_3 (0)
                            (Int.(-) (Int32.to_int !l) (1))
                            __anonstruct_Graph_4_edges_g_0_11
                            !__anonstruct_Edge_3_existent_0_edges_32
                            __anonstruct_Edge_3_to_edges_32
                            __anonstruct_Edge_3_from_edges_32)
                            (count g_0_0 f2_3 t2_3 (0)
                            (Int.(-) (Int32.to_int !l) (1))
                            __anonstruct_Graph_4_edges_g_0_11 (at
                            !__anonstruct_Edge_3_existent_0_edges_32
                            'U__Pre1) __anonstruct_Edge_3_to_edges_32
                            __anonstruct_Edge_3_from_edges_32)))))) } ; ()
                       end;
                       begin
                       any unit
                       requires { true } reads {
                       __anonstruct_Edge_3_existent_0_edges_32, f_0_0, g_0_0,
                       t_0_0 }
                       ensures {
                         (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 308 31 180#
                         (forall f2_4 : int.
                          (forall t2_4 : int.
                           (((not ((=) f2_4 (Int32.to_int f_0_0))) \/
                            (not ((=) t2_4 (Int32.to_int t_0_0)))) ->
                            ((=)
                            (count g_0_0 f2_4 t2_4 (0) (Int32.to_int !l)
                            __anonstruct_Graph_4_edges_g_0_11
                            !__anonstruct_Edge_3_existent_0_edges_32
                            __anonstruct_Edge_3_to_edges_32
                            __anonstruct_Edge_3_from_edges_32)
                            (Int.(+)
                            (count g_0_0 f2_4 t2_4 (0)
                            (Int.(-) (Int32.to_int !l) (1))
                            __anonstruct_Graph_4_edges_g_0_11 (at
                            !__anonstruct_Edge_3_existent_0_edges_32
                            'U__Pre1) __anonstruct_Edge_3_to_edges_32
                            __anonstruct_Edge_3_from_edges_32)
                            (count g_0_0 f2_4 t2_4
                            (Int.(-) (Int32.to_int !l) (1)) (Int32.to_int !l)
                            __anonstruct_Graph_4_edges_g_0_11 (at
                            !__anonstruct_Edge_3_existent_0_edges_32
                            'U__Pre1) __anonstruct_Edge_3_to_edges_32
                            __anonstruct_Edge_3_from_edges_32))))))) } ; ()
                       end end end; (raise (Loop_continue_exc ())) end with
                     Loop_continue_exc _jessie_6 -> () end end end;
                   (raise (Goto_while_1_break_exc ())) end end end with
                Goto_while_1_break_exc _jessie_3 ->
                'While_1_break:
                'While_1_break:
                begin
                ();
                 try
                  begin
                  (h :=
                   (let _jessie_50 =
                   (#"test_2_c.jc" 1066 65 77# "expl:Integer cast"
                   (Safe_int32.of_int (0))) in
                   begin
                   (assert {
                   (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 322 25 26#
                   "expl:Pointer index bounds" true) }); _jessie_50 end));
                   'LoopEntry:
                   begin
                   'LoopEntry:
                   'Loop_7:
                   loop
                   invariant { (#"test_2_c.jc" 1068 51 9707# true) }
                     variant {
                       (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 320 33 38#
                       (Int.(-) (Int32.to_int !i) (Int32.to_int !h))) }
                    begin
                    any unit
                    requires { true } reads {
                    __anonstruct_Edge_3_existent_0_edges_32, f_0_0, g_0_0,
                    t_0_0 }
                    ensures {
                      ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 319 35 91#
                       ((=)
                       (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                       (0) (Int32.to_int !h)
                       __anonstruct_Graph_4_edges_g_0_11
                       !__anonstruct_Edge_3_existent_0_edges_32
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32)
                       (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                       (0) (Int32.to_int !h)
                       __anonstruct_Graph_4_edges_g_0_11 (at
                       !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32)))
                      /\
                      ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 318 35 151#
                       (forall m_15 : int.
                        ((((<=) (0) m_15) /\ ((<) m_15 (Int32.to_int !i))) ->
                         ((Int32.(=)
                          (select __anonstruct_Edge_3_from_edges_32
                          (shift
                          (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                          m_15)) f_0_0) ->
                          ((Int32.(=)
                           (select __anonstruct_Edge_3_to_edges_32
                           (shift
                           (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                           m_15)) t_0_0) ->
                           ((=)
                           (Int32.to_int
                           (select (at
                           !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                           (shift
                           (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                           m_15))) (0)))))))
                      /\
                      ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 317 35 151#
                       (forall m_14 : int.
                        ((((<=) (0) m_14) /\ ((<) m_14 (Int32.to_int !i))) ->
                         ((Int32.(=)
                          (select __anonstruct_Edge_3_from_edges_32
                          (shift
                          (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                          m_14)) f_0_0) ->
                          ((Int32.(=)
                           (select __anonstruct_Edge_3_to_edges_32
                           (shift
                           (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                           m_14)) t_0_0) ->
                           ((=)
                           (Int32.to_int
                           (select !__anonstruct_Edge_3_existent_0_edges_32
                           (shift
                           (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                           m_14))) (0)))))))
                      /\
                      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 316 35 46#
                      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 316 35 46#
                      ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 316 35 41#
                       (Int32.(<=) (#"test_2_c.jc" 1072 65 77#
                       "expl:Integer cast" (Int32.of_int (0))) !h))
                      /\
                      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 316 40 46#
                      (Int32.(<=) !h !i)))))))) } ;
                     try
                      begin
                      'LoopCurrent:
                      begin
                      'LoopCurrent:
                      (if
                      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 322 32 37#
                      (Safe_int32.(<)  !h !i )) then ()
                      else (raise (Goto_while_2_break_exc ())));
                       begin
                       begin
                       any unit
                       requires { true } reads {
                       __anonstruct_Edge_3_existent_0_edges_32, f_0_0, g_0_0,
                       t_0_0 }
                       ensures {
                         (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 323 31 124#
                         ((=)
                         (count g_0_0 (Int32.to_int f_0_0)
                         (Int32.to_int t_0_0) (0)
                         (Int.(+) (Int32.to_int !h) (1))
                         __anonstruct_Graph_4_edges_g_0_11
                         !__anonstruct_Edge_3_existent_0_edges_32
                         __anonstruct_Edge_3_to_edges_32
                         __anonstruct_Edge_3_from_edges_32)
                         (Int.(+)
                         (count g_0_0 (Int32.to_int f_0_0)
                         (Int32.to_int t_0_0) (0) (Int32.to_int !h)
                         __anonstruct_Graph_4_edges_g_0_11
                         !__anonstruct_Edge_3_existent_0_edges_32
                         __anonstruct_Edge_3_to_edges_32
                         __anonstruct_Edge_3_from_edges_32)
                         (count g_0_0 (Int32.to_int f_0_0)
                         (Int32.to_int t_0_0) (Int32.to_int !h)
                         (Int.(+) (Int32.to_int !h) (1))
                         __anonstruct_Graph_4_edges_g_0_11
                         !__anonstruct_Edge_3_existent_0_edges_32
                         __anonstruct_Edge_3_to_edges_32
                         __anonstruct_Edge_3_from_edges_32)))) } ; () end;
                        begin
                        any unit
                        requires { true } reads {
                        __anonstruct_Edge_3_existent_0_edges_32, f_0_0,
                        g_0_0, t_0_0 }
                        ensures {
                          (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 324 31 124#
                          ((=)
                          (count g_0_0 (Int32.to_int f_0_0)
                          (Int32.to_int t_0_0) (0)
                          (Int.(+) (Int32.to_int !h) (1))
                          __anonstruct_Graph_4_edges_g_0_11 (at
                          !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                          __anonstruct_Edge_3_to_edges_32
                          __anonstruct_Edge_3_from_edges_32)
                          (Int.(+)
                          (count g_0_0 (Int32.to_int f_0_0)
                          (Int32.to_int t_0_0) (0) (Int32.to_int !h)
                          __anonstruct_Graph_4_edges_g_0_11 (at
                          !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                          __anonstruct_Edge_3_to_edges_32
                          __anonstruct_Edge_3_from_edges_32)
                          (count g_0_0 (Int32.to_int f_0_0)
                          (Int32.to_int t_0_0) (Int32.to_int !h)
                          (Int.(+) (Int32.to_int !h) (1))
                          __anonstruct_Graph_4_edges_g_0_11 (at
                          !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                          __anonstruct_Edge_3_to_edges_32
                          __anonstruct_Edge_3_from_edges_32)))) } ; () end
                       end;
                       (h :=
                        (let _jessie_49 =
                        (Safe_int32.(+)  !h
                         (#"test_2_c.jc" 1192 68 80# "expl:Integer cast"
                         (Safe_int32.of_int (1))) ) in
                        begin
                        (assert {
                        (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 322 39 42#
                        "expl:Pointer index bounds" true) }); _jessie_49 end))
                      end; (raise (Loop_continue_exc ())) end with
                      Loop_continue_exc _jessie_8 -> () end end end;
                    (raise (Goto_while_2_break_exc ())) end end with
                  Goto_while_2_break_exc _jessie_1 ->
                  'While_2_break: 'While_2_break: () end;
                 try
                  begin
                  (h_0 :=
                   (let _jessie_52 =
                   (Safe_int32.(+)  !i
                    (#"test_2_c.jc" 1201 68 80# "expl:Integer cast"
                    (Safe_int32.of_int (1))) ) in
                   begin
                   (assert {
                   (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 336 25 26#
                   "expl:Pointer index bounds" true) }); _jessie_52 end));
                   'LoopEntry:
                   begin
                   'LoopEntry:
                   'Loop_8:
                   loop
                   invariant { (#"test_2_c.jc" 1203 51 9441# true) }
                     variant {
                       (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 334 33 45#
                       (Int.(-)
                       (Int32.to_int
                       (select __anonstruct_Graph_4_esize_g_0_11 g_0_0))
                       (Int32.to_int !h_0))) }
                    begin
                    any unit
                    requires { true } reads {
                    __anonstruct_Edge_3_existent_0_edges_32, f_0_0, g_0_0,
                    t_0_0 }
                    ensures {
                      ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 333 35 95#
                       ((=)
                       (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                       (Int.(+) (Int32.to_int !i) (1)) (Int32.to_int !h_0)
                       __anonstruct_Graph_4_edges_g_0_11
                       !__anonstruct_Edge_3_existent_0_edges_32
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32)
                       (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                       (Int.(+) (Int32.to_int !i) (1)) (Int32.to_int !h_0)
                       __anonstruct_Graph_4_edges_g_0_11 (at
                       !__anonstruct_Edge_3_existent_0_edges_32 'U__Before)
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32)))
                      /\
                      ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 331 35 223#
                       (forall m_16 : int.
                        ((((<=) (Int.(+) (Int32.to_int !i) (1)) m_16) /\
                         ((<) m_16
                         (Int32.to_int
                         (select __anonstruct_Graph_4_esize_g_0_11 g_0_0))))
                         ->
                         ((Int32.(=)
                          (select __anonstruct_Edge_3_from_edges_32
                          (shift
                          (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                          m_16)) f_0_0) ->
                          ((Int32.(=)
                           (select __anonstruct_Edge_3_to_edges_32
                           (shift
                           (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                           m_16)) t_0_0) ->
                           (Int32.(=)
                           (select (at
                           !__anonstruct_Edge_3_existent_0_edges_32
                           'U__Before)
                           (shift
                           (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                           m_16))
                           (select !__anonstruct_Edge_3_existent_0_edges_32
                           (shift
                           (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                           m_16))))))))
                      /\
                      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 330 35 57#
                      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 330 35 57#
                      ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 330 35 45#
                       ((<=) (Int.(+) (Int32.to_int !i) (1))
                       (Int32.to_int !h_0)))
                      /\
                      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 330 44 57#
                      (Int32.(<=) !h_0
                      (select __anonstruct_Graph_4_esize_g_0_11 g_0_0))))))))
                      } ;
                     try
                      begin
                      'LoopCurrent:
                      begin
                      'LoopCurrent:
                      (if
                      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 336 36 48#
                      (Safe_int32.(<)  !h_0
                       (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 336 40 48#
                       "expl:Pointer dereference"
                       (acc  __anonstruct_Graph_4_g_0_11_alloc_table
                        __anonstruct_Graph_4_esize_g_0_11 g_0_0 )) )) 
                      then () else (raise (Goto_while_2_break_0_exc ())));
                       begin
                       begin
                       any unit
                       requires { true } reads {
                       __anonstruct_Edge_3_existent_0_edges_32, f_0_0, g_0_0,
                       t_0_0 }
                       ensures {
                         (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 337 31 132#
                         ((=)
                         (count g_0_0 (Int32.to_int f_0_0)
                         (Int32.to_int t_0_0) (Int.(+) (Int32.to_int !i) (1))
                         (Int.(+) (Int32.to_int !h_0) (1))
                         __anonstruct_Graph_4_edges_g_0_11
                         !__anonstruct_Edge_3_existent_0_edges_32
                         __anonstruct_Edge_3_to_edges_32
                         __anonstruct_Edge_3_from_edges_32)
                         (Int.(+)
                         (count g_0_0 (Int32.to_int f_0_0)
                         (Int32.to_int t_0_0) (Int.(+) (Int32.to_int !i) (1))
                         (Int32.to_int !h_0)
                         __anonstruct_Graph_4_edges_g_0_11
                         !__anonstruct_Edge_3_existent_0_edges_32
                         __anonstruct_Edge_3_to_edges_32
                         __anonstruct_Edge_3_from_edges_32)
                         (count g_0_0 (Int32.to_int f_0_0)
                         (Int32.to_int t_0_0) (Int32.to_int !h_0)
                         (Int.(+) (Int32.to_int !h_0) (1))
                         __anonstruct_Graph_4_edges_g_0_11
                         !__anonstruct_Edge_3_existent_0_edges_32
                         __anonstruct_Edge_3_to_edges_32
                         __anonstruct_Edge_3_from_edges_32)))) } ; () end;
                        begin
                        any unit
                        requires { true } reads {
                        __anonstruct_Edge_3_existent_0_edges_32, f_0_0,
                        g_0_0, t_0_0 }
                        ensures {
                          (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 338 31 138#
                          ((=)
                          (count g_0_0 (Int32.to_int f_0_0)
                          (Int32.to_int t_0_0)
                          (Int.(+) (Int32.to_int !i) (1))
                          (Int.(+) (Int32.to_int !h_0) (1))
                          __anonstruct_Graph_4_edges_g_0_11 (at
                          !__anonstruct_Edge_3_existent_0_edges_32
                          'U__Before) __anonstruct_Edge_3_to_edges_32
                          __anonstruct_Edge_3_from_edges_32)
                          (Int.(+)
                          (count g_0_0 (Int32.to_int f_0_0)
                          (Int32.to_int t_0_0)
                          (Int.(+) (Int32.to_int !i) (1)) (Int32.to_int !h_0)
                          __anonstruct_Graph_4_edges_g_0_11 (at
                          !__anonstruct_Edge_3_existent_0_edges_32
                          'U__Before) __anonstruct_Edge_3_to_edges_32
                          __anonstruct_Edge_3_from_edges_32)
                          (count g_0_0 (Int32.to_int f_0_0)
                          (Int32.to_int t_0_0) (Int32.to_int !h_0)
                          (Int.(+) (Int32.to_int !h_0) (1))
                          __anonstruct_Graph_4_edges_g_0_11 (at
                          !__anonstruct_Edge_3_existent_0_edges_32
                          'U__Before) __anonstruct_Edge_3_to_edges_32
                          __anonstruct_Edge_3_from_edges_32)))) } ; () end
                       end;
                       (h_0 :=
                        (let _jessie_51 =
                        (Safe_int32.(+)  !h_0
                         (#"test_2_c.jc" 1322 68 80# "expl:Integer cast"
                         (Safe_int32.of_int (1))) ) in
                        begin
                        (assert {
                        (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 336 50 53#
                        "expl:Pointer index bounds" true) }); _jessie_51 end))
                      end; (raise (Loop_continue_exc ())) end with
                      Loop_continue_exc _jessie_10 -> () end end end;
                    (raise (Goto_while_2_break_0_exc ())) end end with
                  Goto_while_2_break_0_exc _jessie_2 ->
                  'While_2_break_0: 'While_2_break_0: () end;
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_32, f_0_0, g_0_0, t_0_0
                 }
                 ensures {
                   (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 343 23 79#
                   ((=)
                   (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0) (0)
                   (Int32.to_int !i) __anonstruct_Graph_4_edges_g_0_11
                   !__anonstruct_Edge_3_existent_0_edges_32
                   __anonstruct_Edge_3_to_edges_32
                   __anonstruct_Edge_3_from_edges_32)
                   (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0) (0)
                   (Int32.to_int !i) __anonstruct_Graph_4_edges_g_0_11 (at
                   !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                   __anonstruct_Edge_3_to_edges_32
                   __anonstruct_Edge_3_from_edges_32))) } ; () end;
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_32, f_0_0, g_0_0, t_0_0
                 }
                 ensures {
                   (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 344 23 98#
                   ((=)
                   (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0) (0)
                   (Int.(+) (Int32.to_int !i) (1))
                   __anonstruct_Graph_4_edges_g_0_11
                   !__anonstruct_Edge_3_existent_0_edges_32
                   __anonstruct_Edge_3_to_edges_32
                   __anonstruct_Edge_3_from_edges_32)
                   (Int.(+)
                   (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0) (0)
                   (Int32.to_int !i) __anonstruct_Graph_4_edges_g_0_11
                   !__anonstruct_Edge_3_existent_0_edges_32
                   __anonstruct_Edge_3_to_edges_32
                   __anonstruct_Edge_3_from_edges_32)
                   (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                   (Int32.to_int !i) (Int.(+) (Int32.to_int !i) (1))
                   __anonstruct_Graph_4_edges_g_0_11
                   !__anonstruct_Edge_3_existent_0_edges_32
                   __anonstruct_Edge_3_to_edges_32
                   __anonstruct_Edge_3_from_edges_32)))) } ; () end;
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_32, f_0_0, g_0_0, t_0_0
                 }
                 ensures {
                   (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 345 23 52#
                   ((=)
                   (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0) (0)
                   (Int.(+) (Int32.to_int !i) (1))
                   __anonstruct_Graph_4_edges_g_0_11
                   !__anonstruct_Edge_3_existent_0_edges_32
                   __anonstruct_Edge_3_to_edges_32
                   __anonstruct_Edge_3_from_edges_32) (0))) } ; () end;
                 begin
                 any unit
                 requires { true }
                 ensures {
                   (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 346 23 29#
                   (Int32.(>=) !c (#"test_2_c.jc" 1390 63 75#
                   "expl:Integer cast" (Int32.of_int (0))))) } ; () end end
                end else ()) else ());
             (if
             (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 348 12 32#
             (Safe_int32.(<>) 
              (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 348 12 32#
              "expl:Pointer dereference"
              (acc_offset_typesafe  __anonstruct_Edge_3_edges_32_alloc_table
               !__anonstruct_Edge_3_existent_0_edges_32
               (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 348 12 20#
               "expl:Pointer dereference"
               (acc  __anonstruct_Graph_4_g_0_11_alloc_table
                __anonstruct_Graph_4_edges_g_0_11 g_0_0 ))
               (Safe_int32.to_int  !i ) ))
              (#"test_2_c.jc" 1396 34 46# "expl:Integer cast"
              (Safe_int32.of_int (0))) ))
             then
              'U__Pre2:
              begin
              'U__Pre2:
              begin
              any unit
              requires { true }
              ensures {
                (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 350 23 29#
                (Int32.(>=) !i (#"test_2_c.jc" 1400 68 80#
                "expl:Integer cast" (Int32.of_int (0))))) } ; () end;
               begin
               any unit
               requires { true }
               ensures {
                 (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 351 23 29#
                 (Int32.(>=) !c (#"test_2_c.jc" 1406 68 80#
                 "expl:Integer cast" (Int32.of_int (0))))) } ; () end;
               begin
               (c :=
                (let _jessie_53 =
                (Safe_int32.(+)  !i
                 (#"test_2_c.jc" 1409 62 74# "expl:Integer cast"
                 (Safe_int32.of_int (1))) ) in
                begin
                (assert {
                (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 352 12 21#
                "expl:Pointer index bounds" true) }); _jessie_53 end));
                begin
                any unit
                requires { true }
                ensures {
                  (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 353 23 29#
                  (Int32.(>=) !c (#"test_2_c.jc" 1413 68 80#
                  "expl:Integer cast" (Int32.of_int (0))))) } ; () end;
                begin
                any unit
                requires { true } reads { __anonstruct_Graph_4_ecnt_g_0_11,
                g_0_0 }
                ensures {
                  (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 355 23 35#
                  (Int32.(<=) !c
                  (select !__anonstruct_Graph_4_ecnt_g_0_11 g_0_0))) } ; ()
                end end end else ());
             begin
             any unit
             requires { true }
             ensures {
               (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 359 19 25#
               (Int32.(>=) !c (#"test_2_c.jc" 1426 66 78# "expl:Integer cast"
               (Int32.of_int (0))))) } ; () end end end;
           (i :=
            (let _jessie_54 =
            (Safe_int32.(+)  !i
             (#"test_2_c.jc" 1430 56 68# "expl:Integer cast"
             (Safe_int32.of_int (1))) ) in
            begin
            (assert {
            (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 208 33 36#
            "expl:Pointer index bounds" true) }); _jessie_54 end)) end;
           (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_12 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end end with Goto_while_0_break_exc _jessie_4 ->
      'While_0_break: 'While_0_break: () end;
      begin
      any unit
      requires { true } reads { g_0_0 }
      ensures {
        (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 361 15 24#
        (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 361 15 24#
        ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 361 15 24#
         ((<=) (offset_min __anonstruct_Graph_4_g_0_11_alloc_table g_0_0)
         (0)))
        /\
        (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 361 15 24#
        ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 361 15 24#
         ((>=) (offset_max __anonstruct_Graph_4_g_0_11_alloc_table g_0_0)
         (0)))
        /\
        (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 361 15 24#
        ((=) true true))))))) } ; () end;
      begin
      any unit
      requires { true } reads { __anonstruct_Edge_3_existent_0_edges_32,
      __anonstruct_Graph_4_ecnt_g_0_11, g_0_0 }
      ensures {
        (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 362 15 29#
        (graph_valid g_0_0 __anonstruct_Vertex_2_vertices_31_alloc_table
        __anonstruct_Edge_3_edges_32_alloc_table
        __anonstruct_Graph_4_esize_g_0_11 !__anonstruct_Graph_4_ecnt_g_0_11
        __anonstruct_Graph_4_edges_g_0_11 __anonstruct_Graph_4_vsize_g_0_11
        __anonstruct_Graph_4_vertices_g_0_11
        !__anonstruct_Edge_3_existent_0_edges_32
        __anonstruct_Edge_3_to_edges_32 __anonstruct_Edge_3_from_edges_32
        __anonstruct_Vertex_2_existent_vertices_31)) } ; () end;
      begin
      any unit
      requires { true }
      ensures {
        (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 363 15 21#
        (Int32.(>=) !c (#"test_2_c.jc" 1453 58 70# "expl:Integer cast"
        (Int32.of_int (0))))) } ; () end;
      begin
      any unit
      requires { true } reads { __anonstruct_Edge_3_existent_0_edges_32,
      __anonstruct_Graph_4_ecnt_g_0_11, g_0_0 }
      ensures {
        (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 364 15 80#
        (forall k_13 : int.
         ((((<=) (Int32.to_int !c) k_13) /\
          ((<) k_13
          (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_0_11 g_0_0))))
          ->
          (Int32.(=)
          (select !__anonstruct_Edge_3_existent_0_edges_32
          (shift (select __anonstruct_Graph_4_edges_g_0_11 g_0_0) k_13))
          (#"test_2_c.jc" 1464 58 70# "expl:Integer cast" (Int32.of_int
          (0))))))) } ; () end;
      begin
      (let _jessie_57 =
      (let _jessie_56 = !c in
      begin
      (assert {
      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 365 6 17#
      "expl:Pointer index bounds" true) }); _jessie_56 end) in
      (let _jessie_58 = g_0_0 in
      (let _jessie_59 = (0) in
      (let _jessie_60 = _jessie_58 in
      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 365 6 17#
      "expl:Pointer dereference"
      (upd  __anonstruct_Graph_4_g_0_11_alloc_table
       __anonstruct_Graph_4_ecnt_g_0_11 _jessie_58 _jessie_57 ))))));
       begin
       any unit
       requires { true } reads { __anonstruct_Graph_4_ecnt_g_0_11, g_0_0 }
       ensures {
         (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 366 15 39#
         (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 366 15 39#
         ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 366 15 39#
          (Int32.(>=) (select __anonstruct_Graph_4_esize_g_0_11 g_0_0)
          (select !__anonstruct_Graph_4_ecnt_g_0_11 g_0_0)))
         /\
         (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 366 15 39#
         (Int32.(>=) (select !__anonstruct_Graph_4_ecnt_g_0_11 g_0_0)
         (#"test_2_c.jc" 1472 56 68# "expl:Integer cast" (Int32.of_int (0))))))))
         } ; () end;
       begin
       any unit
       requires { true } reads { __anonstruct_Edge_3_existent_0_edges_32,
       __anonstruct_Graph_4_ecnt_g_0_11, g_0_0 }
       ensures {
         (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 367 15 38#
         (edges_valid g_0_0
         (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_0_11 g_0_0))
         __anonstruct_Graph_4_edges_g_0_11 __anonstruct_Graph_4_vsize_g_0_11
         __anonstruct_Graph_4_vertices_g_0_11
         !__anonstruct_Edge_3_existent_0_edges_32
         __anonstruct_Edge_3_to_edges_32 __anonstruct_Edge_3_from_edges_32
         __anonstruct_Vertex_2_existent_vertices_31)) } ; () end;
       begin
       any unit
       requires { true } reads { __anonstruct_Edge_3_existent_0_edges_32,
       __anonstruct_Graph_4_ecnt_g_0_11, g_0_0 }
       ensures {
         (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 368 15 29#
         (graph_valid g_0_0 __anonstruct_Vertex_2_vertices_31_alloc_table
         __anonstruct_Edge_3_edges_32_alloc_table
         __anonstruct_Graph_4_esize_g_0_11 !__anonstruct_Graph_4_ecnt_g_0_11
         __anonstruct_Graph_4_edges_g_0_11 __anonstruct_Graph_4_vsize_g_0_11
         __anonstruct_Graph_4_vertices_g_0_11
         !__anonstruct_Edge_3_existent_0_edges_32
         __anonstruct_Edge_3_to_edges_32 __anonstruct_Edge_3_from_edges_32
         __anonstruct_Vertex_2_existent_vertices_31)) } ; () end;
       (raise Return) end end end))))); (raise Return) end with Return -> ()
    end
  
end

module Function_remove_edge_behaviors
#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 177 0 35#
"expl:remove_edge, behaviors"

  use import core.Upd_unsafe 
  
  use Unsafe_int32 
  
  use import core.Tag_table_type 
  
  use import core.Shift_unsafe 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pset 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_vertex 
  
  use import Logic_graph_valid 
  
  use import Logic_edges_valid 
  
  use import Logic_all_count 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_LF__Axiomatic__count_not_existent_lemma 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Assigns 
  
  use import core.Alloc_table 
  
  use import core.Acc_unsafe 
  
  use why3.Bool.Bool 
  
  use import Lemma_zero_after_ecnt_lemma 
  
  use import Lemma_count_zero_lemma 
  
  use import Lemma_count_split_lemma 
  
  use import Lemma_count_split_2_lemma 
  
  use import Lemma_count_one_lemma 
  
  use import Lemma_count_lemma 
  
  use import Lemma_count_double_split_lemma 
  
  use import Lemma_all_count_lemma 
  
  let remove_edge_ensures_default
  #"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 177 0 35#
  "expl:Function remove_edge, default behavior" =
  fun
   (g_0_0 : (pointer __anonstruct_Graph_4)) (f_0_0 : Int32.t) (t_0_0 :
   Int32.t) (__anonstruct_Edge_3_existent_0_edges_32 : ref (memory
   __anonstruct_Edge_3 Int32.t)) (__anonstruct_Graph_4_ecnt_g_0_11 : ref
   (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Edge_3_edges_32_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_g_0_11_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_31_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_32_tag_table :
   (tag_table __anonstruct_Edge_3))
   (__anonstruct_Vertex_2_existent_vertices_31 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Edge_3_from_edges_32 :
   (memory __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_32 :
   (memory __anonstruct_Edge_3 Int32.t))
   (__anonstruct_Graph_4_vertices_g_0_11 : (memory __anonstruct_Graph_4
   (pointer __anonstruct_Vertex_2))) (__anonstruct_Graph_4_vsize_g_0_11 :
   (memory __anonstruct_Graph_4 Int32.t)) (__anonstruct_Graph_4_edges_g_0_11
   : (memory __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
   (__anonstruct_Graph_4_esize_g_0_11 : (memory __anonstruct_Graph_4
   Int32.t)) 
   requires {
   (#"test_2_c.jc" 310 12 833#
   ((#"test_2_c.jc" 310 12 833# _LF__Predicate__count_not_existent_lemma) /\
   (#"test_2_c.jc" 310 12 833#
   ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 166 11 20#
    (#"test_2_c.jc" 310 12 833#
    ((#"test_2_c.jc" 310 12 833#
     ((<=) (offset_min __anonstruct_Graph_4_g_0_11_alloc_table g_0_0) (0)))
    /\
    (#"test_2_c.jc" 310 12 833#
    ((#"test_2_c.jc" 310 12 833#
     ((>=) (offset_max __anonstruct_Graph_4_g_0_11_alloc_table g_0_0) (0)))
    /\ (#"test_2_c.jc" 310 12 833# ((=) true true)))))))
   /\
   (#"test_2_c.jc" 310 12 833#
   ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 166 24 38#
    (graph_valid g_0_0 __anonstruct_Vertex_2_vertices_31_alloc_table
    __anonstruct_Edge_3_edges_32_alloc_table
    __anonstruct_Graph_4_esize_g_0_11 !__anonstruct_Graph_4_ecnt_g_0_11
    __anonstruct_Graph_4_edges_g_0_11 __anonstruct_Graph_4_vsize_g_0_11
    __anonstruct_Graph_4_vertices_g_0_11
    !__anonstruct_Edge_3_existent_0_edges_32 __anonstruct_Edge_3_to_edges_32
    __anonstruct_Edge_3_from_edges_32
    __anonstruct_Vertex_2_existent_vertices_31))
   /\
   (#"test_2_c.jc" 310 12 833#
   ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 167 11 26#
    (is_vertex g_0_0 (Int32.to_int f_0_0) __anonstruct_Graph_4_vsize_g_0_11))
   /\
   (#"test_2_c.jc" 310 12 833#
   ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 168 11 26#
    (is_vertex g_0_0 (Int32.to_int t_0_0) __anonstruct_Graph_4_vsize_g_0_11))
   /\
   (#"test_2_c.jc" 310 12 833#
   ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 169 11 34#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_31
    (shift (select __anonstruct_Graph_4_vertices_g_0_11 g_0_0)
    (Int32.to_int f_0_0)))) (0))))
   /\
   (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 170 11 34#
   (not
   ((=)
   (Int32.to_int
   (select __anonstruct_Vertex_2_existent_vertices_31
   (shift (select __anonstruct_Graph_4_vertices_g_0_11 g_0_0)
   (Int32.to_int t_0_0)))) (0)))))))))))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
     "expl:Ensures clause"
     (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
     "expl:Ensures clause"
     ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
      "expl:Ensures clause"
      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
      "expl:Ensures clause"
      ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
       "expl:Ensures clause"
       ((<=) (offset_min __anonstruct_Graph_4_g_0_11_alloc_table g_0_0) (0)))
      /\
      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
      "expl:Ensures clause"
      ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
       "expl:Ensures clause"
       ((>=) (offset_max __anonstruct_Graph_4_g_0_11_alloc_table g_0_0) (0)))
      /\
      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
      "expl:Ensures clause" ((=) true true)))))))
     /\
     (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
     "expl:Ensures clause"
     ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 172 10 24#
      "expl:Ensures clause"
      (graph_valid g_0_0 __anonstruct_Vertex_2_vertices_31_alloc_table
      __anonstruct_Edge_3_edges_32_alloc_table
      __anonstruct_Graph_4_esize_g_0_11 !__anonstruct_Graph_4_ecnt_g_0_11
      __anonstruct_Graph_4_edges_g_0_11 __anonstruct_Graph_4_vsize_g_0_11
      __anonstruct_Graph_4_vertices_g_0_11
      !__anonstruct_Edge_3_existent_0_edges_32
      __anonstruct_Edge_3_to_edges_32 __anonstruct_Edge_3_from_edges_32
      __anonstruct_Vertex_2_existent_vertices_31))
     /\
     (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
     "expl:Ensures clause"
     ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 173 10 33#
      "expl:Ensures clause"
      ((=)
      (all_count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
      __anonstruct_Graph_4_esize_g_0_11 __anonstruct_Graph_4_edges_g_0_11
      !__anonstruct_Edge_3_existent_0_edges_32
      __anonstruct_Edge_3_to_edges_32 __anonstruct_Edge_3_from_edges_32) (0)))
     /\
     (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 174 10 108#
     "expl:Ensures clause"
     (forall f2_12 : int.
      (forall t2_12 : int.
       (((not ((=) f2_12 (Int32.to_int f_0_0))) \/
        (not ((=) t2_12 (Int32.to_int t_0_0)))) ->
        ((=)
        (all_count g_0_0 f2_12 t2_12 __anonstruct_Graph_4_esize_g_0_11
        __anonstruct_Graph_4_edges_g_0_11
        !__anonstruct_Edge_3_existent_0_edges_32
        __anonstruct_Edge_3_to_edges_32 __anonstruct_Edge_3_from_edges_32)
        (all_count g_0_0 f2_12 t2_12 __anonstruct_Graph_4_esize_g_0_11
        __anonstruct_Graph_4_edges_g_0_11 (old
        !__anonstruct_Edge_3_existent_0_edges_32)
        __anonstruct_Edge_3_to_edges_32 __anonstruct_Edge_3_from_edges_32))))))))))))))
     } diverges  ->
   'Init:
   try
    begin
    (let c = ref (Unsafe_int32.any_  () ) in
    (let i = ref (Unsafe_int32.any_  () ) in
    (let l = ref (Unsafe_int32.any_  () ) in
    (let h = ref (Unsafe_int32.any_  () ) in
    (let h_0 = ref (Unsafe_int32.any_  () ) in
    begin
    (c :=
     (#"test_2_c.jc" 355 20 32# "expl:Integer cast"
     (Unsafe_int32.of_int (0))));
     'U__Before:
     begin
     'U__Before:
     try
      begin
      (i :=
       (#"test_2_c.jc" 357 23 35# "expl:Integer cast"
       (Unsafe_int32.of_int (0))));
       'LoopEntry:
       begin
       'LoopEntry:
       'Loop_1:
       loop
       invariant
         { ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 183 23 29#
            (Int32.(>=) !i (#"test_2_c.jc" 361 36 48# "expl:Integer cast"
            (Int32.of_int (0)))))
           &&
           ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 184 23 35#
            (Int32.(<=) !i (select !__anonstruct_Graph_4_ecnt_g_0_11 g_0_0)))
           &&
           ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 185 23 29#
            (Int32.(>=) !c (#"test_2_c.jc" 365 36 48# "expl:Integer cast"
            (Int32.of_int (0)))))
           &&
           ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 186 23 36#
            (Int32.(<=) !c (select __anonstruct_Graph_4_esize_g_0_11 g_0_0)))
           &&
           ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 188 23 37#
            (graph_valid g_0_0 __anonstruct_Vertex_2_vertices_31_alloc_table
            __anonstruct_Edge_3_edges_32_alloc_table
            __anonstruct_Graph_4_esize_g_0_11
            !__anonstruct_Graph_4_ecnt_g_0_11
            __anonstruct_Graph_4_edges_g_0_11
            __anonstruct_Graph_4_vsize_g_0_11
            __anonstruct_Graph_4_vertices_g_0_11
            !__anonstruct_Edge_3_existent_0_edges_32
            __anonstruct_Edge_3_to_edges_32 __anonstruct_Edge_3_from_edges_32
            __anonstruct_Vertex_2_existent_vertices_31))
           &&
           ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 190 23 48#
            ((=)
            (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0) (0)
            (Int32.to_int !i) __anonstruct_Graph_4_edges_g_0_11
            !__anonstruct_Edge_3_existent_0_edges_32
            __anonstruct_Edge_3_to_edges_32
            __anonstruct_Edge_3_from_edges_32) (0)))
           &&
           ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 192 23 151#
            (forall f2_11 : int.
             (forall t2_11 : int.
              (((not ((=) f2_11 (Int32.to_int f_0_0))) \/
               (not ((=) t2_11 (Int32.to_int t_0_0)))) ->
               ((=)
               (all_count g_0_0 f2_11 t2_11 __anonstruct_Graph_4_esize_g_0_11
               __anonstruct_Graph_4_edges_g_0_11
               !__anonstruct_Edge_3_existent_0_edges_32
               __anonstruct_Edge_3_to_edges_32
               __anonstruct_Edge_3_from_edges_32)
               (all_count g_0_0 f2_11 t2_11 __anonstruct_Graph_4_esize_g_0_11
               __anonstruct_Graph_4_edges_g_0_11 (at
               !__anonstruct_Edge_3_existent_0_edges_32 'Init)
               __anonstruct_Edge_3_to_edges_32
               __anonstruct_Edge_3_from_edges_32))))))
           &&
           ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 196 23 121#
            (forall k_11 : int.
             ((((<=) (Int32.to_int !i) k_11) /\
              ((<) k_11
              (Int32.to_int (select __anonstruct_Graph_4_esize_g_0_11 g_0_0))))
              ->
              (Int32.(=)
              (select !__anonstruct_Edge_3_existent_0_edges_32
              (shift (select __anonstruct_Graph_4_edges_g_0_11 g_0_0) k_11))
              (select (at !__anonstruct_Edge_3_existent_0_edges_32
              'U__Before)
              (shift (select __anonstruct_Graph_4_edges_g_0_11 g_0_0) k_11))))))
           &&
           ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 198 23 89#
            ((=)
            (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
            (Int32.to_int !i)
            (Int32.to_int (select __anonstruct_Graph_4_esize_g_0_11 g_0_0))
            __anonstruct_Graph_4_edges_g_0_11
            !__anonstruct_Edge_3_existent_0_edges_32
            __anonstruct_Edge_3_to_edges_32
            __anonstruct_Edge_3_from_edges_32)
            (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
            (Int32.to_int !i)
            (Int32.to_int (select __anonstruct_Graph_4_esize_g_0_11 g_0_0))
            __anonstruct_Graph_4_edges_g_0_11 (at
            !__anonstruct_Edge_3_existent_0_edges_32 'U__Before)
            __anonstruct_Edge_3_to_edges_32
            __anonstruct_Edge_3_from_edges_32)))
           &&
           ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 200 23 128#
            (forall m_17 : int.
             ((((<=) (0) m_17) /\ ((<) m_17 (Int32.to_int !i))) ->
              ((Int32.(=)
               (select __anonstruct_Edge_3_from_edges_32
               (shift (select __anonstruct_Graph_4_edges_g_0_11 g_0_0) m_17))
               f_0_0) ->
               ((Int32.(=)
                (select __anonstruct_Edge_3_to_edges_32
                (shift (select __anonstruct_Graph_4_edges_g_0_11 g_0_0) m_17))
                t_0_0) ->
                ((=)
                (Int32.to_int
                (select !__anonstruct_Edge_3_existent_0_edges_32
                (shift (select __anonstruct_Graph_4_edges_g_0_11 g_0_0) m_17)))
                (0)))))))
           &&
           (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 202 23 130#
           (forall k_12 : int.
            ((((<=) (Int32.to_int !c) k_12) /\ ((<) k_12 (Int32.to_int !i)))
             ->
             ((=)
             (Int32.to_int
             (select !__anonstruct_Edge_3_existent_0_edges_32
             (shift (select __anonstruct_Graph_4_edges_g_0_11 g_0_0) k_12)))
             (0))))))))))))))) } 
        begin
        any unit requires { true } ensures { true } ;
         try
          begin
          'LoopCurrent:
          begin
          'LoopCurrent:
          (if
          (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 208 20 31#
          (Unsafe_int32.(<)  !i
           (acc  !__anonstruct_Graph_4_ecnt_g_0_11 g_0_0 ) )) then ()
          else (raise (Goto_while_0_break_exc ())));
           begin
           begin
           (assert {
           (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 209 19 28#
           "expl:Assertion in line 209"
           (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 209 19 28#
           "expl:Assertion in line 209"
           ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 209 19 28#
            "expl:Assertion in line 209"
            ((<=) (offset_min __anonstruct_Graph_4_g_0_11_alloc_table g_0_0)
            (0)))
           /\
           (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 209 19 28#
           "expl:Assertion in line 209"
           ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 209 19 28#
            "expl:Assertion in line 209"
            ((>=) (offset_max __anonstruct_Graph_4_g_0_11_alloc_table g_0_0)
            (0)))
           /\
           (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 209 19 28#
           "expl:Assertion in line 209" ((=) true true))))))) }); () end;
            begin
            (assert {
            (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 210 19 33#
            "expl:Assertion in line 210"
            (graph_valid g_0_0 __anonstruct_Vertex_2_vertices_31_alloc_table
            __anonstruct_Edge_3_edges_32_alloc_table
            __anonstruct_Graph_4_esize_g_0_11
            !__anonstruct_Graph_4_ecnt_g_0_11
            __anonstruct_Graph_4_edges_g_0_11
            __anonstruct_Graph_4_vsize_g_0_11
            __anonstruct_Graph_4_vertices_g_0_11
            !__anonstruct_Edge_3_existent_0_edges_32
            __anonstruct_Edge_3_to_edges_32 __anonstruct_Edge_3_from_edges_32
            __anonstruct_Vertex_2_existent_vertices_31)) }); () end;
            'U__Pre1:
            begin
            'U__Pre1: ();
             (if
             (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 214 12 33#
             (Unsafe_int32.(=) 
              (acc  __anonstruct_Edge_3_from_edges_32
               (shift_  (acc  __anonstruct_Graph_4_edges_g_0_11 g_0_0 )
                (Unsafe_int32.to_int  !i ) ) ) f_0_0 ))
             then
              (if
              (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 214 37 56#
              (Unsafe_int32.(=) 
               (acc  __anonstruct_Edge_3_to_edges_32
                (shift_  (acc  __anonstruct_Graph_4_edges_g_0_11 g_0_0 )
                 (Unsafe_int32.to_int  !i ) ) ) t_0_0 ))
              then
               try
                begin
                (let _jessie_25 =
                (#"test_2_c.jc" 440 86 98# "expl:Integer cast"
                (Unsafe_int32.of_int (0))) in
                (let _jessie_26 =
                (acc  __anonstruct_Graph_4_edges_g_0_11 g_0_0 ) in
                (let _jessie_27 = (Unsafe_int32.to_int  !i ) in
                (let _jessie_28 = (shift_  _jessie_26 _jessie_27 ) in
                (upd  __anonstruct_Edge_3_existent_0_edges_32 _jessie_28
                 _jessie_25 )))));
                 begin
                 (assert {
                 (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 218 23 142#
                 "expl:Assertion in line 218"
                 (forall f2 : int.
                  (forall t2 : int.
                   (((not ((=) f2 (Int32.to_int f_0_0))) \/
                    (not ((=) t2 (Int32.to_int t_0_0)))) ->
                    ((=)
                    (count g_0_0 f2 t2 (Int32.to_int !i)
                    (Int.(+) (Int32.to_int !i) (1))
                    __anonstruct_Graph_4_edges_g_0_11
                    !__anonstruct_Edge_3_existent_0_edges_32
                    __anonstruct_Edge_3_to_edges_32
                    __anonstruct_Edge_3_from_edges_32)
                    (count g_0_0 f2 t2 (Int32.to_int !i)
                    (Int.(+) (Int32.to_int !i) (1))
                    __anonstruct_Graph_4_edges_g_0_11 (at
                    !__anonstruct_Edge_3_existent_0_edges_32 'U__Before)
                    __anonstruct_Edge_3_to_edges_32
                    __anonstruct_Edge_3_from_edges_32)))))) }); () end;
                 begin
                 (assert {
                 (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 219 23 52#
                 "expl:Assertion in line 219"
                 ((=)
                 (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                 (Int32.to_int !i) (Int.(+) (Int32.to_int !i) (1))
                 __anonstruct_Graph_4_edges_g_0_11
                 !__anonstruct_Edge_3_existent_0_edges_32
                 __anonstruct_Edge_3_to_edges_32
                 __anonstruct_Edge_3_from_edges_32) (0))) }); () end;
                 begin
                 (assert {
                 (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 220 23 139#
                 "expl:Assertion in line 220"
                 (forall m_12 : int.
                  ((((<=) (0) m_12) /\ ((<) m_12 (Int32.to_int !i))) ->
                   ((Int32.(=)
                    (select __anonstruct_Edge_3_from_edges_32
                    (shift (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                    m_12)) f_0_0) ->
                    ((Int32.(=)
                     (select __anonstruct_Edge_3_to_edges_32
                     (shift (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                     m_12)) t_0_0) ->
                     ((=)
                     (Int32.to_int
                     (select !__anonstruct_Edge_3_existent_0_edges_32
                     (shift (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                     m_12))) (0))))))) }); () end;
                 begin
                 (assert {
                 (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 221 23 139#
                 "expl:Assertion in line 221"
                 (forall m_13 : int.
                  ((((<=) (0) m_13) /\ ((<) m_13 (Int32.to_int !i))) ->
                   ((Int32.(=)
                    (select __anonstruct_Edge_3_from_edges_32
                    (shift (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                    m_13)) f_0_0) ->
                    ((Int32.(=)
                     (select __anonstruct_Edge_3_to_edges_32
                     (shift (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                     m_13)) t_0_0) ->
                     ((=)
                     (Int32.to_int
                     (select (at !__anonstruct_Edge_3_existent_0_edges_32
                     'U__Pre1)
                     (shift (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                     m_13))) (0))))))) }); () end;
                 begin
                 (l :=
                  (#"test_2_c.jc" 521 62 74# "expl:Integer cast"
                  (Unsafe_int32.of_int (0))));
                  'LoopEntry:
                  begin
                  'LoopEntry:
                  'Loop_2:
                  loop
                  invariant
                    { (((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 226 35 41#
                        (Int32.(>=) !l (#"test_2_c.jc" 530 62 74#
                        "expl:Integer cast" (Int32.of_int (0)))))
                       &&
                       ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 227 35 48#
                        (Int32.(<=) !l
                        (select __anonstruct_Graph_4_esize_g_0_11 g_0_0)))
                       &&
                       ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 228 35 44#
                        (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 228 35 44#
                        ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 228 35 44#
                         ((<=)
                         (offset_min __anonstruct_Graph_4_g_0_11_alloc_table
                         g_0_0) (0)))
                        /\
                        (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 228 35 44#
                        ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 228 35 44#
                         ((>=)
                         (offset_max __anonstruct_Graph_4_g_0_11_alloc_table
                         g_0_0) (0)))
                        /\
                        (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 228 35 44#
                        ((=) true true)))))))
                       &&
                       ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 229 35 73#
                        (if
                         ((<=) (0)
                         (Int.(-)
                         (Int32.to_int
                         (select __anonstruct_Graph_4_esize_g_0_11 g_0_0))
                         (1))) then
                         (((<=)
                          (offset_min
                          __anonstruct_Edge_3_edges_32_alloc_table
                          (select __anonstruct_Graph_4_edges_g_0_11 g_0_0))
                          (0))
                         /\
                         (((>=)
                          (offset_max
                          __anonstruct_Edge_3_edges_32_alloc_table
                          (select __anonstruct_Graph_4_edges_g_0_11 g_0_0))
                          (Int.(-)
                          (Int32.to_int
                          (select __anonstruct_Graph_4_esize_g_0_11 g_0_0))
                          (1)))
                         /\
                         (forall __framac_tmp6 : int.
                          ((((<=) (0) __framac_tmp6) /\
                           ((<=) __framac_tmp6
                           (Int.(-)
                           (Int32.to_int
                           (select __anonstruct_Graph_4_esize_g_0_11 g_0_0))
                           (1)))) -> ((=) true true))))) else
                         ((=) true true)))
                       &&
                       ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 230 35 49#
                        (graph_valid g_0_0
                        __anonstruct_Vertex_2_vertices_31_alloc_table
                        __anonstruct_Edge_3_edges_32_alloc_table
                        __anonstruct_Graph_4_esize_g_0_11
                        !__anonstruct_Graph_4_ecnt_g_0_11
                        __anonstruct_Graph_4_edges_g_0_11
                        __anonstruct_Graph_4_vsize_g_0_11
                        __anonstruct_Graph_4_vertices_g_0_11
                        !__anonstruct_Edge_3_existent_0_edges_32
                        __anonstruct_Edge_3_to_edges_32
                        __anonstruct_Edge_3_from_edges_32
                        __anonstruct_Vertex_2_existent_vertices_31))
                       &&
                       ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 232 35 203#
                        (forall j : int.
                         ((((<=) (0) j) /\
                          (((<) j (Int32.to_int !l)) /\
                          (not ((=) j (Int32.to_int !i))))) ->
                          ((=)
                          (count g_0_0 (Int32.to_int f_0_0)
                          (Int32.to_int t_0_0) j (Int.(+) j (1))
                          __anonstruct_Graph_4_edges_g_0_11 (at
                          !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                          __anonstruct_Edge_3_to_edges_32
                          __anonstruct_Edge_3_from_edges_32)
                          (count g_0_0 (Int32.to_int f_0_0)
                          (Int32.to_int t_0_0) j (Int.(+) j (1))
                          __anonstruct_Graph_4_edges_g_0_11
                          !__anonstruct_Edge_3_existent_0_edges_32
                          __anonstruct_Edge_3_to_edges_32
                          __anonstruct_Edge_3_from_edges_32)))))
                       &&
                       ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 236 35 168#
                        (((<=) (Int32.to_int !l)
                         (Int.(-) (Int32.to_int !i) (1))) ->
                         ((=)
                         (count g_0_0 (Int32.to_int f_0_0)
                         (Int32.to_int t_0_0) (0)
                         (Int.(+) (Int32.to_int !l) (1))
                         __anonstruct_Graph_4_edges_g_0_11 (at
                         !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                         __anonstruct_Edge_3_to_edges_32
                         __anonstruct_Edge_3_from_edges_32)
                         (Int.(+)
                         (count g_0_0 (Int32.to_int f_0_0)
                         (Int32.to_int t_0_0) (0) (Int32.to_int !l)
                         __anonstruct_Graph_4_edges_g_0_11 (at
                         !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                         __anonstruct_Edge_3_to_edges_32
                         __anonstruct_Edge_3_from_edges_32)
                         (count g_0_0 (Int32.to_int f_0_0)
                         (Int32.to_int t_0_0) (Int32.to_int !l)
                         (Int.(+) (Int32.to_int !l) (1))
                         __anonstruct_Graph_4_edges_g_0_11 (at
                         !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                         __anonstruct_Edge_3_to_edges_32
                         __anonstruct_Edge_3_from_edges_32)))))
                       &&
                       ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 239 35 168#
                        (((<=) (Int32.to_int !l)
                         (Int.(-) (Int32.to_int !i) (1))) ->
                         ((=)
                         (count g_0_0 (Int32.to_int f_0_0)
                         (Int32.to_int t_0_0) (0)
                         (Int.(+) (Int32.to_int !l) (1))
                         __anonstruct_Graph_4_edges_g_0_11
                         !__anonstruct_Edge_3_existent_0_edges_32
                         __anonstruct_Edge_3_to_edges_32
                         __anonstruct_Edge_3_from_edges_32)
                         (Int.(+)
                         (count g_0_0 (Int32.to_int f_0_0)
                         (Int32.to_int t_0_0) (0) (Int32.to_int !l)
                         __anonstruct_Graph_4_edges_g_0_11
                         !__anonstruct_Edge_3_existent_0_edges_32
                         __anonstruct_Edge_3_to_edges_32
                         __anonstruct_Edge_3_from_edges_32)
                         (count g_0_0 (Int32.to_int f_0_0)
                         (Int32.to_int t_0_0) (Int32.to_int !l)
                         (Int.(+) (Int32.to_int !l) (1))
                         __anonstruct_Graph_4_edges_g_0_11
                         !__anonstruct_Edge_3_existent_0_edges_32
                         __anonstruct_Edge_3_to_edges_32
                         __anonstruct_Edge_3_from_edges_32)))))
                       &&
                       ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 242 35 132#
                        ((Int32.(<=) !l !i) ->
                         ((=)
                         (count g_0_0 (Int32.to_int f_0_0)
                         (Int32.to_int t_0_0) (0) (Int32.to_int !l)
                         __anonstruct_Graph_4_edges_g_0_11 (at
                         !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                         __anonstruct_Edge_3_to_edges_32
                         __anonstruct_Edge_3_from_edges_32)
                         (count g_0_0 (Int32.to_int f_0_0)
                         (Int32.to_int t_0_0) (0) (Int32.to_int !l)
                         __anonstruct_Graph_4_edges_g_0_11
                         !__anonstruct_Edge_3_existent_0_edges_32
                         __anonstruct_Edge_3_to_edges_32
                         __anonstruct_Edge_3_from_edges_32))))
                       &&
                       ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 245 35 169#
                        (((>) (Int32.to_int !l)
                         (Int.(-) (Int32.to_int !i) (1))) ->
                         ((=)
                         (count g_0_0 (Int32.to_int f_0_0)
                         (Int32.to_int t_0_0) (0)
                         (Int.(+) (Int32.to_int !l) (1))
                         __anonstruct_Graph_4_edges_g_0_11 (at
                         !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                         __anonstruct_Edge_3_to_edges_32
                         __anonstruct_Edge_3_from_edges_32)
                         (Int.(+)
                         (count g_0_0 (Int32.to_int f_0_0)
                         (Int32.to_int t_0_0) (0) (Int32.to_int !l)
                         __anonstruct_Graph_4_edges_g_0_11 (at
                         !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                         __anonstruct_Edge_3_to_edges_32
                         __anonstruct_Edge_3_from_edges_32)
                         (count g_0_0 (Int32.to_int f_0_0)
                         (Int32.to_int t_0_0) (Int32.to_int !l)
                         (Int.(+) (Int32.to_int !l) (1))
                         __anonstruct_Graph_4_edges_g_0_11 (at
                         !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                         __anonstruct_Edge_3_to_edges_32
                         __anonstruct_Edge_3_from_edges_32)))))
                       &&
                       ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 248 35 173#
                        (((>) (Int32.to_int !l)
                         (Int.(-) (Int32.to_int !i) (1))) ->
                         ((=)
                         (count g_0_0 (Int32.to_int f_0_0)
                         (Int32.to_int t_0_0) (0)
                         (Int.(+) (Int32.to_int !l) (1))
                         __anonstruct_Graph_4_edges_g_0_11
                         !__anonstruct_Edge_3_existent_0_edges_32
                         __anonstruct_Edge_3_to_edges_32
                         __anonstruct_Edge_3_from_edges_32)
                         (Int.(+)
                         (count g_0_0 (Int32.to_int f_0_0)
                         (Int32.to_int t_0_0) (0) (Int32.to_int !l)
                         __anonstruct_Graph_4_edges_g_0_11
                         !__anonstruct_Edge_3_existent_0_edges_32
                         __anonstruct_Edge_3_to_edges_32
                         __anonstruct_Edge_3_from_edges_32)
                         (count g_0_0 (Int32.to_int f_0_0)
                         (Int32.to_int t_0_0) (Int32.to_int !l)
                         (Int.(+) (Int32.to_int !l) (1))
                         __anonstruct_Graph_4_edges_g_0_11
                         !__anonstruct_Edge_3_existent_0_edges_32
                         __anonstruct_Edge_3_to_edges_32
                         __anonstruct_Edge_3_from_edges_32)))))
                       &&
                       ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 251 35 365#
                        (forall j_0 : int.
                         ((((<=) (0) j_0) /\
                          ((<=) j_0 (Int.(-) (Int32.to_int !l) (1)))) ->
                          (forall f2_5 : int.
                           (forall t2_5 : int.
                            (((not ((=) f2_5 (Int32.to_int f_0_0))) \/
                             (not ((=) t2_5 (Int32.to_int t_0_0)))) ->
                             ((=)
                             (count g_0_0 f2_5 t2_5 (0) (Int.(+) j_0 (1))
                             __anonstruct_Graph_4_edges_g_0_11 (at
                             !__anonstruct_Edge_3_existent_0_edges_32
                             'U__Pre1) __anonstruct_Edge_3_to_edges_32
                             __anonstruct_Edge_3_from_edges_32)
                             (Int.(+)
                             (count g_0_0 f2_5 t2_5 (0) j_0
                             __anonstruct_Graph_4_edges_g_0_11 (at
                             !__anonstruct_Edge_3_existent_0_edges_32
                             'U__Pre1) __anonstruct_Edge_3_to_edges_32
                             __anonstruct_Edge_3_from_edges_32)
                             (count g_0_0 f2_5 t2_5 j_0 (Int.(+) j_0 (1))
                             __anonstruct_Graph_4_edges_g_0_11 (at
                             !__anonstruct_Edge_3_existent_0_edges_32
                             'U__Pre1) __anonstruct_Edge_3_to_edges_32
                             __anonstruct_Edge_3_from_edges_32)))))))))
                       &&
                       ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 258 35 406#
                        (forall j_1 : int.
                         ((((<=) (0) j_1) /\
                          (((>=) j_1 (Int.(-) (Int32.to_int !l) (1))) /\
                          ((<) j_1
                          (Int32.to_int
                          (select __anonstruct_Graph_4_esize_g_0_11 g_0_0)))))
                          ->
                          (forall f2_6 : int.
                           (forall t2_6 : int.
                            (((not ((=) f2_6 (Int32.to_int f_0_0))) \/
                             (not ((=) t2_6 (Int32.to_int t_0_0)))) ->
                             ((=)
                             (count g_0_0 f2_6 t2_6 (0) (Int.(+) j_1 (1))
                             __anonstruct_Graph_4_edges_g_0_11 (at
                             !__anonstruct_Edge_3_existent_0_edges_32
                             'U__Pre1) __anonstruct_Edge_3_to_edges_32
                             __anonstruct_Edge_3_from_edges_32)
                             (Int.(+)
                             (count g_0_0 f2_6 t2_6 (0) j_1
                             __anonstruct_Graph_4_edges_g_0_11 (at
                             !__anonstruct_Edge_3_existent_0_edges_32
                             'U__Pre1) __anonstruct_Edge_3_to_edges_32
                             __anonstruct_Edge_3_from_edges_32)
                             (count g_0_0 f2_6 t2_6 j_1 (Int.(+) j_1 (1))
                             __anonstruct_Graph_4_edges_g_0_11 (at
                             !__anonstruct_Edge_3_existent_0_edges_32
                             'U__Pre1) __anonstruct_Edge_3_to_edges_32
                             __anonstruct_Edge_3_from_edges_32)))))))))
                       &&
                       ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 265 35 385#
                        (forall j_2 : int.
                         ((((<=) (0) j_2) /\
                          ((<=) j_2 (Int.(-) (Int32.to_int !l) (1)))) ->
                          (forall f2_7 : int.
                           (forall t2_7 : int.
                            (((not ((=) f2_7 (Int32.to_int f_0_0))) \/
                             (not ((=) t2_7 (Int32.to_int t_0_0)))) ->
                             ((=)
                             (count g_0_0 f2_7 t2_7 (0) (Int.(+) j_2 (1))
                             __anonstruct_Graph_4_edges_g_0_11
                             !__anonstruct_Edge_3_existent_0_edges_32
                             __anonstruct_Edge_3_to_edges_32
                             __anonstruct_Edge_3_from_edges_32)
                             (Int.(+)
                             (count g_0_0 f2_7 t2_7 (0) j_2
                             __anonstruct_Graph_4_edges_g_0_11
                             !__anonstruct_Edge_3_existent_0_edges_32
                             __anonstruct_Edge_3_to_edges_32
                             __anonstruct_Edge_3_from_edges_32)
                             (count g_0_0 f2_7 t2_7 j_2 (Int.(+) j_2 (1))
                             __anonstruct_Graph_4_edges_g_0_11
                             !__anonstruct_Edge_3_existent_0_edges_32
                             __anonstruct_Edge_3_to_edges_32
                             __anonstruct_Edge_3_from_edges_32)))))))))
                       &&
                       ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 272 35 406#
                        (forall j_3 : int.
                         ((((<=) (0) j_3) /\
                          (((>=) j_3 (Int.(-) (Int32.to_int !l) (1))) /\
                          ((<) j_3
                          (Int32.to_int
                          (select __anonstruct_Graph_4_esize_g_0_11 g_0_0)))))
                          ->
                          (forall f2_8 : int.
                           (forall t2_8 : int.
                            (((not ((=) f2_8 (Int32.to_int f_0_0))) \/
                             (not ((=) t2_8 (Int32.to_int t_0_0)))) ->
                             ((=)
                             (count g_0_0 f2_8 t2_8 (0) (Int.(+) j_3 (1))
                             __anonstruct_Graph_4_edges_g_0_11
                             !__anonstruct_Edge_3_existent_0_edges_32
                             __anonstruct_Edge_3_to_edges_32
                             __anonstruct_Edge_3_from_edges_32)
                             (Int.(+)
                             (count g_0_0 f2_8 t2_8 (0) j_3
                             __anonstruct_Graph_4_edges_g_0_11
                             !__anonstruct_Edge_3_existent_0_edges_32
                             __anonstruct_Edge_3_to_edges_32
                             __anonstruct_Edge_3_from_edges_32)
                             (count g_0_0 f2_8 t2_8 j_3 (Int.(+) j_3 (1))
                             __anonstruct_Graph_4_edges_g_0_11
                             !__anonstruct_Edge_3_existent_0_edges_32
                             __anonstruct_Edge_3_to_edges_32
                             __anonstruct_Edge_3_from_edges_32)))))))))
                       &&
                       ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 279 35 354#
                        (forall j_4 : int.
                         ((((<=) (0) j_4) /\
                          ((<=) j_4 (Int.(-) (Int32.to_int !l) (1)))) ->
                          (forall f2_9 : int.
                           (forall t2_9 : int.
                            (((not ((=) f2_9 (Int32.to_int f_0_0))) \/
                             (not ((=) t2_9 (Int32.to_int t_0_0)))) ->
                             ((=)
                             (count g_0_0 f2_9 t2_9 j_4 (Int.(+) j_4 (1))
                             __anonstruct_Graph_4_edges_g_0_11
                             !__anonstruct_Edge_3_existent_0_edges_32
                             __anonstruct_Edge_3_to_edges_32
                             __anonstruct_Edge_3_from_edges_32)
                             (count g_0_0 f2_9 t2_9 j_4 (Int.(+) j_4 (1))
                             __anonstruct_Graph_4_edges_g_0_11 (at
                             !__anonstruct_Edge_3_existent_0_edges_32
                             'U__Pre1) __anonstruct_Edge_3_to_edges_32
                             __anonstruct_Edge_3_from_edges_32))))))))
                       &&
                       ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 286 35 342#
                        (forall j_5 : int.
                         ((((<=) (0) j_5) /\ ((<=) j_5 (Int32.to_int !l))) ->
                          (forall f2_10 : int.
                           (forall t2_10 : int.
                            (((not ((=) f2_10 (Int32.to_int f_0_0))) \/
                             (not ((=) t2_10 (Int32.to_int t_0_0)))) ->
                             ((=)
                             (count g_0_0 f2_10 t2_10 (0) j_5
                             __anonstruct_Graph_4_edges_g_0_11
                             !__anonstruct_Edge_3_existent_0_edges_32
                             __anonstruct_Edge_3_to_edges_32
                             __anonstruct_Edge_3_from_edges_32)
                             (count g_0_0 f2_10 t2_10 (0) j_5
                             __anonstruct_Graph_4_edges_g_0_11 (at
                             !__anonstruct_Edge_3_existent_0_edges_32
                             'U__Pre1) __anonstruct_Edge_3_to_edges_32
                             __anonstruct_Edge_3_from_edges_32))))))))
                       &&
                       (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 293 35 166#
                       (forall k_10 : int.
                        ((((<=) (Int32.to_int !c) k_10) /\
                         ((<) k_10 (Int32.to_int !i))) ->
                         ((=)
                         (Int32.to_int
                         (select !__anonstruct_Edge_3_existent_0_edges_32
                         (shift
                         (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                         k_10))) (0))))))))))))))))))))))
                      /\
                      (#"test_2_c.jc" 523 48 41765#
                      ((#"test_2_c.jc" 523 48 41765# "expl:Assigns clause"
                       (not_assigns __anonstruct_Edge_3_edges_32_alloc_table
                       __anonstruct_Edge_3_edges_32_alloc_table (at
                       !__anonstruct_Edge_3_existent_0_edges_32 'Loop_2)
                       !__anonstruct_Edge_3_existent_0_edges_32 pset_empty))
                      /\
                      (#"test_2_c.jc" 523 48 41765# "expl:Assigns clause"
                      (not_assigns __anonstruct_Graph_4_g_0_11_alloc_table
                      __anonstruct_Graph_4_g_0_11_alloc_table (at
                      !__anonstruct_Graph_4_ecnt_g_0_11 'Loop_2)
                      !__anonstruct_Graph_4_ecnt_g_0_11 pset_empty))))) } 
                    
                   begin
                   any unit requires { true } ensures { true } ;
                    try
                     begin
                     'LoopCurrent:
                     begin
                     'LoopCurrent:
                     (if
                     (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 302 23 35#
                     (Unsafe_int32.(<)  !l
                      (acc  __anonstruct_Graph_4_esize_g_0_11 g_0_0 ) ))
                     then () else (raise (Goto_while_1_break_exc ())));
                      begin
                      (l :=
                       (Unsafe_int32.(+)  !l
                        (#"test_2_c.jc" 905 68 80# "expl:Integer cast"
                        (Unsafe_int32.of_int (1))) ));
                       begin
                       (assert {
                       (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 304 31 149#
                       "expl:Assertion in line 304"
                       (forall f2_0 : int.
                        (forall t2_0 : int.
                         (((not ((=) f2_0 (Int32.to_int f_0_0))) \/
                          (not ((=) t2_0 (Int32.to_int t_0_0)))) ->
                          ((=)
                          (count g_0_0 f2_0 t2_0
                          (Int.(-) (Int32.to_int !l) (1)) (Int32.to_int !l)
                          __anonstruct_Graph_4_edges_g_0_11
                          !__anonstruct_Edge_3_existent_0_edges_32
                          __anonstruct_Edge_3_to_edges_32
                          __anonstruct_Edge_3_from_edges_32)
                          (count g_0_0 f2_0 t2_0
                          (Int.(-) (Int32.to_int !l) (1)) (Int32.to_int !l)
                          __anonstruct_Graph_4_edges_g_0_11 (at
                          !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                          __anonstruct_Edge_3_to_edges_32
                          __anonstruct_Edge_3_from_edges_32)))))) }); () end;
                       begin
                       (assert {
                       (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 305 31 180#
                       "expl:Assertion in line 305"
                       (forall f2_1 : int.
                        (forall t2_1 : int.
                         (((not ((=) f2_1 (Int32.to_int f_0_0))) \/
                          (not ((=) t2_1 (Int32.to_int t_0_0)))) ->
                          ((=)
                          (count g_0_0 f2_1 t2_1 (0) (Int32.to_int !l)
                          __anonstruct_Graph_4_edges_g_0_11
                          !__anonstruct_Edge_3_existent_0_edges_32
                          __anonstruct_Edge_3_to_edges_32
                          __anonstruct_Edge_3_from_edges_32)
                          (Int.(+)
                          (count g_0_0 f2_1 t2_1 (0)
                          (Int.(-) (Int32.to_int !l) (1))
                          __anonstruct_Graph_4_edges_g_0_11
                          !__anonstruct_Edge_3_existent_0_edges_32
                          __anonstruct_Edge_3_to_edges_32
                          __anonstruct_Edge_3_from_edges_32)
                          (count g_0_0 f2_1 t2_1
                          (Int.(-) (Int32.to_int !l) (1)) (Int32.to_int !l)
                          __anonstruct_Graph_4_edges_g_0_11
                          !__anonstruct_Edge_3_existent_0_edges_32
                          __anonstruct_Edge_3_to_edges_32
                          __anonstruct_Edge_3_from_edges_32))))))) }); () end;
                       begin
                       (assert {
                       (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 306 31 180#
                       "expl:Assertion in line 306"
                       (forall f2_2 : int.
                        (forall t2_2 : int.
                         (((not ((=) f2_2 (Int32.to_int f_0_0))) \/
                          (not ((=) t2_2 (Int32.to_int t_0_0)))) ->
                          ((=)
                          (count g_0_0 f2_2 t2_2 (0) (Int32.to_int !l)
                          __anonstruct_Graph_4_edges_g_0_11 (at
                          !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                          __anonstruct_Edge_3_to_edges_32
                          __anonstruct_Edge_3_from_edges_32)
                          (Int.(+)
                          (count g_0_0 f2_2 t2_2 (0)
                          (Int.(-) (Int32.to_int !l) (1))
                          __anonstruct_Graph_4_edges_g_0_11 (at
                          !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                          __anonstruct_Edge_3_to_edges_32
                          __anonstruct_Edge_3_from_edges_32)
                          (count g_0_0 f2_2 t2_2
                          (Int.(-) (Int32.to_int !l) (1)) (Int32.to_int !l)
                          __anonstruct_Graph_4_edges_g_0_11 (at
                          !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                          __anonstruct_Edge_3_to_edges_32
                          __anonstruct_Edge_3_from_edges_32))))))) }); () end;
                       begin
                       (assert {
                       (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 307 31 149#
                       "expl:Assertion in line 307"
                       (forall f2_3 : int.
                        (forall t2_3 : int.
                         (((not ((=) f2_3 (Int32.to_int f_0_0))) \/
                          (not ((=) t2_3 (Int32.to_int t_0_0)))) ->
                          ((=)
                          (count g_0_0 f2_3 t2_3 (0)
                          (Int.(-) (Int32.to_int !l) (1))
                          __anonstruct_Graph_4_edges_g_0_11
                          !__anonstruct_Edge_3_existent_0_edges_32
                          __anonstruct_Edge_3_to_edges_32
                          __anonstruct_Edge_3_from_edges_32)
                          (count g_0_0 f2_3 t2_3 (0)
                          (Int.(-) (Int32.to_int !l) (1))
                          __anonstruct_Graph_4_edges_g_0_11 (at
                          !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                          __anonstruct_Edge_3_to_edges_32
                          __anonstruct_Edge_3_from_edges_32)))))) }); () end;
                       begin
                       (assert {
                       (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 308 31 180#
                       "expl:Assertion in line 308"
                       (forall f2_4 : int.
                        (forall t2_4 : int.
                         (((not ((=) f2_4 (Int32.to_int f_0_0))) \/
                          (not ((=) t2_4 (Int32.to_int t_0_0)))) ->
                          ((=)
                          (count g_0_0 f2_4 t2_4 (0) (Int32.to_int !l)
                          __anonstruct_Graph_4_edges_g_0_11
                          !__anonstruct_Edge_3_existent_0_edges_32
                          __anonstruct_Edge_3_to_edges_32
                          __anonstruct_Edge_3_from_edges_32)
                          (Int.(+)
                          (count g_0_0 f2_4 t2_4 (0)
                          (Int.(-) (Int32.to_int !l) (1))
                          __anonstruct_Graph_4_edges_g_0_11 (at
                          !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                          __anonstruct_Edge_3_to_edges_32
                          __anonstruct_Edge_3_from_edges_32)
                          (count g_0_0 f2_4 t2_4
                          (Int.(-) (Int32.to_int !l) (1)) (Int32.to_int !l)
                          __anonstruct_Graph_4_edges_g_0_11 (at
                          !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                          __anonstruct_Edge_3_to_edges_32
                          __anonstruct_Edge_3_from_edges_32))))))) }); () end
                      end end; (raise (Loop_continue_exc ())) end with
                     Loop_continue_exc _jessie_6 -> () end end end;
                   (raise (Goto_while_1_break_exc ())) end end end with
                Goto_while_1_break_exc _jessie_3 ->
                'While_1_break:
                'While_1_break:
                begin
                ();
                 try
                  begin
                  (h :=
                   (#"test_2_c.jc" 1066 65 77# "expl:Integer cast"
                   (Unsafe_int32.of_int (0))));
                   'LoopEntry:
                   begin
                   'LoopEntry:
                   'Loop_3:
                   loop
                   invariant
                     { ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 316 35 46#
                        (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 316 35 46#
                        ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 316 35 41#
                         (Int32.(<=) (#"test_2_c.jc" 1072 65 77#
                         "expl:Integer cast" (Int32.of_int (0))) !h))
                        /\
                        (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 316 40 46#
                        (Int32.(<=) !h !i)))))
                       &&
                       ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 317 35 151#
                        (forall m_14 : int.
                         ((((<=) (0) m_14) /\ ((<) m_14 (Int32.to_int !i)))
                          ->
                          ((Int32.(=)
                           (select __anonstruct_Edge_3_from_edges_32
                           (shift
                           (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                           m_14)) f_0_0) ->
                           ((Int32.(=)
                            (select __anonstruct_Edge_3_to_edges_32
                            (shift
                            (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                            m_14)) t_0_0) ->
                            ((=)
                            (Int32.to_int
                            (select !__anonstruct_Edge_3_existent_0_edges_32
                            (shift
                            (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                            m_14))) (0)))))))
                       &&
                       ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 318 35 151#
                        (forall m_15 : int.
                         ((((<=) (0) m_15) /\ ((<) m_15 (Int32.to_int !i)))
                          ->
                          ((Int32.(=)
                           (select __anonstruct_Edge_3_from_edges_32
                           (shift
                           (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                           m_15)) f_0_0) ->
                           ((Int32.(=)
                            (select __anonstruct_Edge_3_to_edges_32
                            (shift
                            (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                            m_15)) t_0_0) ->
                            ((=)
                            (Int32.to_int
                            (select (at
                            !__anonstruct_Edge_3_existent_0_edges_32
                            'U__Pre1)
                            (shift
                            (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                            m_15))) (0)))))))
                       &&
                       (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 319 35 91#
                       ((=)
                       (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                       (0) (Int32.to_int !h)
                       __anonstruct_Graph_4_edges_g_0_11
                       !__anonstruct_Edge_3_existent_0_edges_32
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32)
                       (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                       (0) (Int32.to_int !h)
                       __anonstruct_Graph_4_edges_g_0_11 (at
                       !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32)))))) } 
                    begin
                    any unit requires { true } ensures { true } ;
                     try
                      begin
                      'LoopCurrent:
                      begin
                      'LoopCurrent:
                      (if
                      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 322 32 37#
                      (Unsafe_int32.(<)  !h !i )) then ()
                      else (raise (Goto_while_2_break_exc ())));
                       begin
                       begin
                       (assert {
                       (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 323 31 124#
                       "expl:Assertion in line 323"
                       ((=)
                       (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                       (0) (Int.(+) (Int32.to_int !h) (1))
                       __anonstruct_Graph_4_edges_g_0_11
                       !__anonstruct_Edge_3_existent_0_edges_32
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32)
                       (Int.(+)
                       (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                       (0) (Int32.to_int !h)
                       __anonstruct_Graph_4_edges_g_0_11
                       !__anonstruct_Edge_3_existent_0_edges_32
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32)
                       (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                       (Int32.to_int !h) (Int.(+) (Int32.to_int !h) (1))
                       __anonstruct_Graph_4_edges_g_0_11
                       !__anonstruct_Edge_3_existent_0_edges_32
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32)))) }); () end;
                        begin
                        (assert {
                        (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 324 31 124#
                        "expl:Assertion in line 324"
                        ((=)
                        (count g_0_0 (Int32.to_int f_0_0)
                        (Int32.to_int t_0_0) (0)
                        (Int.(+) (Int32.to_int !h) (1))
                        __anonstruct_Graph_4_edges_g_0_11 (at
                        !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                        __anonstruct_Edge_3_to_edges_32
                        __anonstruct_Edge_3_from_edges_32)
                        (Int.(+)
                        (count g_0_0 (Int32.to_int f_0_0)
                        (Int32.to_int t_0_0) (0) (Int32.to_int !h)
                        __anonstruct_Graph_4_edges_g_0_11 (at
                        !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                        __anonstruct_Edge_3_to_edges_32
                        __anonstruct_Edge_3_from_edges_32)
                        (count g_0_0 (Int32.to_int f_0_0)
                        (Int32.to_int t_0_0) (Int32.to_int !h)
                        (Int.(+) (Int32.to_int !h) (1))
                        __anonstruct_Graph_4_edges_g_0_11 (at
                        !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                        __anonstruct_Edge_3_to_edges_32
                        __anonstruct_Edge_3_from_edges_32)))) }); () end end;
                       (h :=
                        (Unsafe_int32.(+)  !h
                         (#"test_2_c.jc" 1192 68 80# "expl:Integer cast"
                         (Unsafe_int32.of_int (1))) )) end;
                       (raise (Loop_continue_exc ())) end with
                      Loop_continue_exc _jessie_8 -> () end end end;
                    (raise (Goto_while_2_break_exc ())) end end with
                  Goto_while_2_break_exc _jessie_1 ->
                  'While_2_break: 'While_2_break: () end;
                 try
                  begin
                  (h_0 :=
                   (Unsafe_int32.(+)  !i
                    (#"test_2_c.jc" 1201 68 80# "expl:Integer cast"
                    (Unsafe_int32.of_int (1))) ));
                   'LoopEntry:
                   begin
                   'LoopEntry:
                   'Loop_4:
                   loop
                   invariant
                     { ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 330 35 57#
                        (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 330 35 57#
                        ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 330 35 45#
                         ((<=) (Int.(+) (Int32.to_int !i) (1))
                         (Int32.to_int !h_0)))
                        /\
                        (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 330 44 57#
                        (Int32.(<=) !h_0
                        (select __anonstruct_Graph_4_esize_g_0_11 g_0_0))))))
                       &&
                       ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 331 35 223#
                        (forall m_16 : int.
                         ((((<=) (Int.(+) (Int32.to_int !i) (1)) m_16) /\
                          ((<) m_16
                          (Int32.to_int
                          (select __anonstruct_Graph_4_esize_g_0_11 g_0_0))))
                          ->
                          ((Int32.(=)
                           (select __anonstruct_Edge_3_from_edges_32
                           (shift
                           (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                           m_16)) f_0_0) ->
                           ((Int32.(=)
                            (select __anonstruct_Edge_3_to_edges_32
                            (shift
                            (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                            m_16)) t_0_0) ->
                            (Int32.(=)
                            (select (at
                            !__anonstruct_Edge_3_existent_0_edges_32
                            'U__Before)
                            (shift
                            (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                            m_16))
                            (select !__anonstruct_Edge_3_existent_0_edges_32
                            (shift
                            (select __anonstruct_Graph_4_edges_g_0_11 g_0_0)
                            m_16))))))))
                       &&
                       (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 333 35 95#
                       ((=)
                       (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                       (Int.(+) (Int32.to_int !i) (1)) (Int32.to_int !h_0)
                       __anonstruct_Graph_4_edges_g_0_11
                       !__anonstruct_Edge_3_existent_0_edges_32
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32)
                       (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                       (Int.(+) (Int32.to_int !i) (1)) (Int32.to_int !h_0)
                       __anonstruct_Graph_4_edges_g_0_11 (at
                       !__anonstruct_Edge_3_existent_0_edges_32 'U__Before)
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32))))) } 
                    begin
                    any unit requires { true } ensures { true } ;
                     try
                      begin
                      'LoopCurrent:
                      begin
                      'LoopCurrent:
                      (if
                      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 336 36 48#
                      (Unsafe_int32.(<)  !h_0
                       (acc  __anonstruct_Graph_4_esize_g_0_11 g_0_0 ) ))
                      then () else (raise (Goto_while_2_break_0_exc ())));
                       begin
                       begin
                       (assert {
                       (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 337 31 132#
                       "expl:Assertion in line 337"
                       ((=)
                       (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                       (Int.(+) (Int32.to_int !i) (1))
                       (Int.(+) (Int32.to_int !h_0) (1))
                       __anonstruct_Graph_4_edges_g_0_11
                       !__anonstruct_Edge_3_existent_0_edges_32
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32)
                       (Int.(+)
                       (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                       (Int.(+) (Int32.to_int !i) (1)) (Int32.to_int !h_0)
                       __anonstruct_Graph_4_edges_g_0_11
                       !__anonstruct_Edge_3_existent_0_edges_32
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32)
                       (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                       (Int32.to_int !h_0) (Int.(+) (Int32.to_int !h_0) (1))
                       __anonstruct_Graph_4_edges_g_0_11
                       !__anonstruct_Edge_3_existent_0_edges_32
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32)))) }); () end;
                        begin
                        (assert {
                        (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 338 31 138#
                        "expl:Assertion in line 338"
                        ((=)
                        (count g_0_0 (Int32.to_int f_0_0)
                        (Int32.to_int t_0_0) (Int.(+) (Int32.to_int !i) (1))
                        (Int.(+) (Int32.to_int !h_0) (1))
                        __anonstruct_Graph_4_edges_g_0_11 (at
                        !__anonstruct_Edge_3_existent_0_edges_32 'U__Before)
                        __anonstruct_Edge_3_to_edges_32
                        __anonstruct_Edge_3_from_edges_32)
                        (Int.(+)
                        (count g_0_0 (Int32.to_int f_0_0)
                        (Int32.to_int t_0_0) (Int.(+) (Int32.to_int !i) (1))
                        (Int32.to_int !h_0) __anonstruct_Graph_4_edges_g_0_11
                        (at !__anonstruct_Edge_3_existent_0_edges_32
                        'U__Before) __anonstruct_Edge_3_to_edges_32
                        __anonstruct_Edge_3_from_edges_32)
                        (count g_0_0 (Int32.to_int f_0_0)
                        (Int32.to_int t_0_0) (Int32.to_int !h_0)
                        (Int.(+) (Int32.to_int !h_0) (1))
                        __anonstruct_Graph_4_edges_g_0_11 (at
                        !__anonstruct_Edge_3_existent_0_edges_32 'U__Before)
                        __anonstruct_Edge_3_to_edges_32
                        __anonstruct_Edge_3_from_edges_32)))) }); () end end;
                       (h_0 :=
                        (Unsafe_int32.(+)  !h_0
                         (#"test_2_c.jc" 1322 68 80# "expl:Integer cast"
                         (Unsafe_int32.of_int (1))) )) end;
                       (raise (Loop_continue_exc ())) end with
                      Loop_continue_exc _jessie_10 -> () end end end;
                    (raise (Goto_while_2_break_0_exc ())) end end with
                  Goto_while_2_break_0_exc _jessie_2 ->
                  'While_2_break_0: 'While_2_break_0: () end;
                 begin
                 (assert {
                 (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 343 23 79#
                 "expl:Assertion in line 343"
                 ((=)
                 (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0) (0)
                 (Int32.to_int !i) __anonstruct_Graph_4_edges_g_0_11
                 !__anonstruct_Edge_3_existent_0_edges_32
                 __anonstruct_Edge_3_to_edges_32
                 __anonstruct_Edge_3_from_edges_32)
                 (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0) (0)
                 (Int32.to_int !i) __anonstruct_Graph_4_edges_g_0_11 (at
                 !__anonstruct_Edge_3_existent_0_edges_32 'U__Pre1)
                 __anonstruct_Edge_3_to_edges_32
                 __anonstruct_Edge_3_from_edges_32))) }); () end;
                 begin
                 (assert {
                 (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 344 23 98#
                 "expl:Assertion in line 344"
                 ((=)
                 (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0) (0)
                 (Int.(+) (Int32.to_int !i) (1))
                 __anonstruct_Graph_4_edges_g_0_11
                 !__anonstruct_Edge_3_existent_0_edges_32
                 __anonstruct_Edge_3_to_edges_32
                 __anonstruct_Edge_3_from_edges_32)
                 (Int.(+)
                 (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0) (0)
                 (Int32.to_int !i) __anonstruct_Graph_4_edges_g_0_11
                 !__anonstruct_Edge_3_existent_0_edges_32
                 __anonstruct_Edge_3_to_edges_32
                 __anonstruct_Edge_3_from_edges_32)
                 (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
                 (Int32.to_int !i) (Int.(+) (Int32.to_int !i) (1))
                 __anonstruct_Graph_4_edges_g_0_11
                 !__anonstruct_Edge_3_existent_0_edges_32
                 __anonstruct_Edge_3_to_edges_32
                 __anonstruct_Edge_3_from_edges_32)))) }); () end;
                 begin
                 (assert {
                 (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 345 23 52#
                 "expl:Assertion in line 345"
                 ((=)
                 (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0) (0)
                 (Int.(+) (Int32.to_int !i) (1))
                 __anonstruct_Graph_4_edges_g_0_11
                 !__anonstruct_Edge_3_existent_0_edges_32
                 __anonstruct_Edge_3_to_edges_32
                 __anonstruct_Edge_3_from_edges_32) (0))) }); () end;
                 begin
                 (assert {
                 (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 346 23 29#
                 "expl:Assertion in line 346"
                 (Int32.(>=) !c (#"test_2_c.jc" 1390 63 75#
                 "expl:Integer cast" (Int32.of_int (0))))) }); () end end end
              else ()) else ());
             (if
             (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 348 12 32#
             (Unsafe_int32.(<>) 
              (acc  !__anonstruct_Edge_3_existent_0_edges_32
               (shift_  (acc  __anonstruct_Graph_4_edges_g_0_11 g_0_0 )
                (Unsafe_int32.to_int  !i ) ) )
              (#"test_2_c.jc" 1396 34 46# "expl:Integer cast"
              (Unsafe_int32.of_int (0))) ))
             then
              'U__Pre2:
              begin
              'U__Pre2:
              begin
              (assert {
              (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 350 23 29#
              "expl:Assertion in line 350"
              (Int32.(>=) !i (#"test_2_c.jc" 1400 68 80# "expl:Integer cast"
              (Int32.of_int (0))))) }); () end;
               begin
               (assert {
               (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 351 23 29#
               "expl:Assertion in line 351"
               (Int32.(>=) !c (#"test_2_c.jc" 1406 68 80# "expl:Integer cast"
               (Int32.of_int (0))))) }); () end;
               begin
               (c :=
                (Unsafe_int32.(+)  !i
                 (#"test_2_c.jc" 1409 62 74# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ));
                begin
                (assert {
                (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 353 23 29#
                "expl:Assertion in line 353"
                (Int32.(>=) !c (#"test_2_c.jc" 1413 68 80#
                "expl:Integer cast" (Int32.of_int (0))))) }); () end;
                begin
                (assert {
                (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 355 23 35#
                "expl:Assertion in line 355"
                (Int32.(<=) !c
                (select !__anonstruct_Graph_4_ecnt_g_0_11 g_0_0))) }); () end
               end end else ());
             begin
             (assert {
             (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 359 19 25#
             "expl:Assertion in line 359"
             (Int32.(>=) !c (#"test_2_c.jc" 1426 66 78# "expl:Integer cast"
             (Int32.of_int (0))))) }); () end end end;
           (i :=
            (Unsafe_int32.(+)  !i
             (#"test_2_c.jc" 1430 56 68# "expl:Integer cast"
             (Unsafe_int32.of_int (1))) )) end;
           (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_12 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end end with Goto_while_0_break_exc _jessie_4 ->
      'While_0_break: 'While_0_break: () end;
      begin
      (assert {
      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 361 15 24#
      "expl:Assertion in line 361"
      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 361 15 24#
      "expl:Assertion in line 361"
      ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 361 15 24#
       "expl:Assertion in line 361"
       ((<=) (offset_min __anonstruct_Graph_4_g_0_11_alloc_table g_0_0) (0)))
      /\
      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 361 15 24#
      "expl:Assertion in line 361"
      ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 361 15 24#
       "expl:Assertion in line 361"
       ((>=) (offset_max __anonstruct_Graph_4_g_0_11_alloc_table g_0_0) (0)))
      /\
      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 361 15 24#
      "expl:Assertion in line 361" ((=) true true))))))) }); () end;
      begin
      (assert {
      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 362 15 29#
      "expl:Assertion in line 362"
      (graph_valid g_0_0 __anonstruct_Vertex_2_vertices_31_alloc_table
      __anonstruct_Edge_3_edges_32_alloc_table
      __anonstruct_Graph_4_esize_g_0_11 !__anonstruct_Graph_4_ecnt_g_0_11
      __anonstruct_Graph_4_edges_g_0_11 __anonstruct_Graph_4_vsize_g_0_11
      __anonstruct_Graph_4_vertices_g_0_11
      !__anonstruct_Edge_3_existent_0_edges_32
      __anonstruct_Edge_3_to_edges_32 __anonstruct_Edge_3_from_edges_32
      __anonstruct_Vertex_2_existent_vertices_31)) }); () end;
      begin
      (assert {
      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 363 15 21#
      "expl:Assertion in line 363"
      (Int32.(>=) !c (#"test_2_c.jc" 1453 58 70# "expl:Integer cast"
      (Int32.of_int (0))))) }); () end;
      begin
      (assert {
      (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 364 15 80#
      "expl:Assertion in line 364"
      (forall k_13 : int.
       ((((<=) (Int32.to_int !c) k_13) /\
        ((<) k_13
        (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_0_11 g_0_0)))) ->
        (Int32.(=)
        (select !__anonstruct_Edge_3_existent_0_edges_32
        (shift (select __anonstruct_Graph_4_edges_g_0_11 g_0_0) k_13))
        (#"test_2_c.jc" 1464 58 70# "expl:Integer cast" (Int32.of_int (0)))))))
      }); () end;
      begin
      (let _jessie_37 = !c in
      (let _jessie_38 = g_0_0 in
      (let _jessie_39 = (0) in
      (let _jessie_40 = _jessie_38 in
      (upd  __anonstruct_Graph_4_ecnt_g_0_11 _jessie_40 _jessie_37 )))));
       begin
       (assert {
       (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 366 15 39#
       "expl:Assertion in line 366"
       (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 366 15 39#
       "expl:Assertion in line 366"
       ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 366 15 39#
        "expl:Assertion in line 366"
        (Int32.(>=) (select __anonstruct_Graph_4_esize_g_0_11 g_0_0)
        (select !__anonstruct_Graph_4_ecnt_g_0_11 g_0_0)))
       /\
       (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 366 15 39#
       "expl:Assertion in line 366"
       (Int32.(>=) (select !__anonstruct_Graph_4_ecnt_g_0_11 g_0_0)
       (#"test_2_c.jc" 1472 56 68# "expl:Integer cast" (Int32.of_int (0))))))))
       }); () end;
       begin
       (assert {
       (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 367 15 38#
       "expl:Assertion in line 367"
       (edges_valid g_0_0
       (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_0_11 g_0_0))
       __anonstruct_Graph_4_edges_g_0_11 __anonstruct_Graph_4_vsize_g_0_11
       __anonstruct_Graph_4_vertices_g_0_11
       !__anonstruct_Edge_3_existent_0_edges_32
       __anonstruct_Edge_3_to_edges_32 __anonstruct_Edge_3_from_edges_32
       __anonstruct_Vertex_2_existent_vertices_31)) }); () end;
       begin
       (assert {
       (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 368 15 29#
       "expl:Assertion in line 368"
       (graph_valid g_0_0 __anonstruct_Vertex_2_vertices_31_alloc_table
       __anonstruct_Edge_3_edges_32_alloc_table
       __anonstruct_Graph_4_esize_g_0_11 !__anonstruct_Graph_4_ecnt_g_0_11
       __anonstruct_Graph_4_edges_g_0_11 __anonstruct_Graph_4_vsize_g_0_11
       __anonstruct_Graph_4_vertices_g_0_11
       !__anonstruct_Edge_3_existent_0_edges_32
       __anonstruct_Edge_3_to_edges_32 __anonstruct_Edge_3_from_edges_32
       __anonstruct_Vertex_2_existent_vertices_31)) }); () end;
       (raise Return) end end end))))); (raise Return) end with Return -> ()
    end
  
end

theory Logic_type_padding

  use why3.Bool.Bool 
  
  type padding 
  
end

theory Struct___anonstruct_Edge_3

  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function __anonstruct_Edge_3_tag  : (tag_id
  __anonstruct_Edge_3)
  
  axiom U___anonstruct_Edge_3_parenttag_bottom  :
  (parenttag __anonstruct_Edge_3_tag bottom_tag)
  
  axiom U___anonstruct_Edge_3_is_final  :
  (forall __anonstruct_Edge_3_tag_table : (tag_table __anonstruct_Edge_3).
   (forall p : (pointer __anonstruct_Edge_3).
    ((instanceof __anonstruct_Edge_3_tag_table p __anonstruct_Edge_3_tag) ->
     ((=) (typeof __anonstruct_Edge_3_tag_table p) __anonstruct_Edge_3_tag))))
  
  predicate frame_tag_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (old___anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3))
  =
     ((tag_extends old___anonstruct_Edge_3_tag_table
      __anonstruct_Edge_3_tag_table)
     /\
     (alloc_tag_block old___anonstruct_Edge_3_tag_table
     __anonstruct_Edge_3_tag_table p))
  
  predicate frame_free_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (old___anonstruct_Edge_3_alloc_table : (alloc_table
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_alloc_table : (alloc_table
  __anonstruct_Edge_3))
  =
     ((free_extends old___anonstruct_Edge_3_alloc_table
      __anonstruct_Edge_3_alloc_table)
     /\
     (free_block old___anonstruct_Edge_3_alloc_table
     __anonstruct_Edge_3_alloc_table p))
  
  predicate frame_alloc_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (n : int) (old___anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3)) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  =
     ((alloc_extends old___anonstruct_Edge_3_alloc_table
      __anonstruct_Edge_3_alloc_table)
     /\
     (alloc_block old___anonstruct_Edge_3_alloc_table
     __anonstruct_Edge_3_alloc_table p n))
  
  predicate fresh_tag_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (n : int) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3))
  = (tag_fresh __anonstruct_Edge_3_tag_table p)
  
  predicate fresh_alloc_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (n : int) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  = (alloc_fresh __anonstruct_Edge_3_alloc_table p)
  
  predicate container_of_singleton_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3)) = true
  
  predicate container_of_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (l : int) (r : int) (__anonstruct_Edge_3_tag_table :
  (tag_table __anonstruct_Edge_3)) = true
  
  predicate typeof_singleton_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3))
  = ((=) (typeof __anonstruct_Edge_3_tag_table p) __anonstruct_Edge_3_tag)
  
  predicate typeof_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (l : int) (r : int) (__anonstruct_Edge_3_tag_table :
  (tag_table __anonstruct_Edge_3))
  =
     (((=) (typeof __anonstruct_Edge_3_tag_table p) __anonstruct_Edge_3_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof __anonstruct_Edge_3_tag_table (shift p i))
       __anonstruct_Edge_3_tag))))
  
  predicate instanceof_singleton_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3))
  = (instanceof __anonstruct_Edge_3_tag_table p __anonstruct_Edge_3_tag)
  
  predicate instanceof_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (l : int) (r : int) (__anonstruct_Edge_3_tag_table :
  (tag_table __anonstruct_Edge_3))
  =
     ((instanceof __anonstruct_Edge_3_tag_table p __anonstruct_Edge_3_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof __anonstruct_Edge_3_tag_table (shift p i)
       __anonstruct_Edge_3_tag))))
  
  predicate right_valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (b : int) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  = ((>=) (offset_max __anonstruct_Edge_3_alloc_table p) b)
  
  predicate left_valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (a : int) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  = ((<=) (offset_min __anonstruct_Edge_3_alloc_table p) a)
  
  predicate strict_left_valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (a : int) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  = ((=) (offset_min __anonstruct_Edge_3_alloc_table p) a)
  
  predicate valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (a : int) (b : int) (__anonstruct_Edge_3_alloc_table
  : (alloc_table __anonstruct_Edge_3))
  =
     (((<=) (offset_min __anonstruct_Edge_3_alloc_table p) a) /\
     ((>=) (offset_max __anonstruct_Edge_3_alloc_table p) b))
  
  predicate strict_valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (a : int) (b : int) (__anonstruct_Edge_3_alloc_table
  : (alloc_table __anonstruct_Edge_3))
  =
     (((=) (offset_min __anonstruct_Edge_3_alloc_table p) a) /\
     ((=) (offset_max __anonstruct_Edge_3_alloc_table p) b))
  
  axiom U___anonstruct_Edge_3_int  :
  ((=) (int_of_tag __anonstruct_Edge_3_tag) (4))
  
end

module Struct___anonstruct_Edge_3_unsafe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Edge_3 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct___anonstruct_Edge_3
  (p : (pointer __anonstruct_Edge_3)) 
   (__anonstruct_Edge_3_alloc_table : ref (alloc_table
    __anonstruct_Edge_3)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !__anonstruct_Edge_3_alloc_table p)) }
    writes { __anonstruct_Edge_3_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Edge_3_alloc_table (old
       !__anonstruct_Edge_3_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Edge_3 p (old
       !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Edge_3 p
      (offset_max (old !__anonstruct_Edge_3_alloc_table) p)
      !__anonstruct_Edge_3_alloc_table))) }
  
  val allocate_struct___anonstruct_Edge_3_requires
  (n : int) 
   (__anonstruct_Edge_3_alloc_table : ref (alloc_table __anonstruct_Edge_3)) 
    (__anonstruct_Edge_3_tag_table : ref (tag_table __anonstruct_Edge_3)) :
     (pointer __anonstruct_Edge_3)
     requires { ((>=) n (0)) } writes { __anonstruct_Edge_3_alloc_table,
     __anonstruct_Edge_3_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Edge_3 result (0) (Int.(-) n (1))
        !__anonstruct_Edge_3_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Edge_3 result n (old
        !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Edge_3 result (old
        !__anonstruct_Edge_3_tag_table) !__anonstruct_Edge_3_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !__anonstruct_Edge_3_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !__anonstruct_Edge_3_tag_table))
       /\
       ((typeof_struct___anonstruct_Edge_3 result (0) n
        !__anonstruct_Edge_3_tag_table)
       /\
       (container_of_struct___anonstruct_Edge_3 result (0) n
       !__anonstruct_Edge_3_tag_table))))))) }
  
end

module Struct___anonstruct_Edge_3_safe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Edge_3 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct___anonstruct_Edge_3
  (p : (pointer __anonstruct_Edge_3)) 
   (__anonstruct_Edge_3_alloc_table : ref (alloc_table
    __anonstruct_Edge_3)) : unit
    requires { true } writes { __anonstruct_Edge_3_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Edge_3_alloc_table (old
       !__anonstruct_Edge_3_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Edge_3 p (old
       !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Edge_3 p
      (offset_max (old !__anonstruct_Edge_3_alloc_table) p)
      !__anonstruct_Edge_3_alloc_table))) }
  
  val allocate_struct___anonstruct_Edge_3
  (n : int) 
   (__anonstruct_Edge_3_alloc_table : ref (alloc_table __anonstruct_Edge_3)) 
    (__anonstruct_Edge_3_tag_table : ref (tag_table __anonstruct_Edge_3)) :
     (pointer __anonstruct_Edge_3)
     requires { true } writes { __anonstruct_Edge_3_alloc_table,
     __anonstruct_Edge_3_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Edge_3 result (0) (Int.(-) n (1))
        !__anonstruct_Edge_3_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Edge_3 result n (old
        !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Edge_3 result (old
        !__anonstruct_Edge_3_tag_table) !__anonstruct_Edge_3_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !__anonstruct_Edge_3_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !__anonstruct_Edge_3_tag_table))
       /\
       ((typeof_struct___anonstruct_Edge_3 result (0) n
        !__anonstruct_Edge_3_tag_table)
       /\
       (container_of_struct___anonstruct_Edge_3 result (0) n
       !__anonstruct_Edge_3_tag_table))))))) }
  
  val allocate_singleton_struct___anonstruct_Edge_3
  (__anonstruct_Edge_3_alloc_table : ref (alloc_table __anonstruct_Edge_3)) 
   (__anonstruct_Edge_3_tag_table : ref (tag_table __anonstruct_Edge_3)) :
    (pointer __anonstruct_Edge_3)
    requires { true } writes { __anonstruct_Edge_3_alloc_table,
    __anonstruct_Edge_3_tag_table }
    ensures {
      ((strict_valid_struct___anonstruct_Edge_3 result (0) (0)
       !__anonstruct_Edge_3_alloc_table)
      /\
      ((frame_alloc_struct___anonstruct_Edge_3 result (1) (old
       !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
      /\
      ((frame_tag_struct___anonstruct_Edge_3 result (old
       !__anonstruct_Edge_3_tag_table) !__anonstruct_Edge_3_tag_table)
      /\
      ((fresh_alloc_struct___anonstruct_Edge_3 result (0) (old
       !__anonstruct_Edge_3_alloc_table))
      /\
      ((fresh_tag_struct___anonstruct_Edge_3 result (0) (old
       !__anonstruct_Edge_3_tag_table))
      /\
      ((typeof_singleton_struct___anonstruct_Edge_3 result
       !__anonstruct_Edge_3_tag_table)
      /\
      (container_of_singleton_struct___anonstruct_Edge_3 result
      !__anonstruct_Edge_3_tag_table))))))) }
  
end

theory Struct___anonstruct_Graph_4

  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Root___anonstruct_Graph_4 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function __anonstruct_Graph_4_tag  : (tag_id
  __anonstruct_Graph_4)
  
  axiom U___anonstruct_Graph_4_parenttag_bottom  :
  (parenttag __anonstruct_Graph_4_tag bottom_tag)
  
  axiom U___anonstruct_Graph_4_is_final  :
  (forall __anonstruct_Graph_4_tag_table : (tag_table __anonstruct_Graph_4).
   (forall p : (pointer __anonstruct_Graph_4).
    ((instanceof __anonstruct_Graph_4_tag_table p __anonstruct_Graph_4_tag)
     ->
     ((=) (typeof __anonstruct_Graph_4_tag_table p) __anonstruct_Graph_4_tag))))
  
  predicate frame_tag_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (old___anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4))
  =
     ((tag_extends old___anonstruct_Graph_4_tag_table
      __anonstruct_Graph_4_tag_table)
     /\
     (alloc_tag_block old___anonstruct_Graph_4_tag_table
     __anonstruct_Graph_4_tag_table p))
  
  predicate frame_free_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (old___anonstruct_Graph_4_alloc_table : (alloc_table
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_alloc_table : (alloc_table
  __anonstruct_Graph_4))
  =
     ((free_extends old___anonstruct_Graph_4_alloc_table
      __anonstruct_Graph_4_alloc_table)
     /\
     (free_block old___anonstruct_Graph_4_alloc_table
     __anonstruct_Graph_4_alloc_table p))
  
  predicate frame_alloc_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (n : int) (old___anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4)) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  =
     ((alloc_extends old___anonstruct_Graph_4_alloc_table
      __anonstruct_Graph_4_alloc_table)
     /\
     (alloc_block old___anonstruct_Graph_4_alloc_table
     __anonstruct_Graph_4_alloc_table p n))
  
  predicate fresh_tag_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (n : int) (__anonstruct_Graph_4_tag_table :
  (tag_table __anonstruct_Graph_4))
  = (tag_fresh __anonstruct_Graph_4_tag_table p)
  
  predicate fresh_alloc_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (n : int) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  = (alloc_fresh __anonstruct_Graph_4_alloc_table p)
  
  predicate container_of_singleton_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4)) = true
  
  predicate container_of_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (l : int) (r : int) (__anonstruct_Graph_4_tag_table
  : (tag_table __anonstruct_Graph_4)) = true
  
  predicate typeof_singleton_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4))
  = ((=) (typeof __anonstruct_Graph_4_tag_table p) __anonstruct_Graph_4_tag)
  
  predicate typeof_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (l : int) (r : int) (__anonstruct_Graph_4_tag_table
  : (tag_table __anonstruct_Graph_4))
  =
     (((=) (typeof __anonstruct_Graph_4_tag_table p) __anonstruct_Graph_4_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof __anonstruct_Graph_4_tag_table (shift p i))
       __anonstruct_Graph_4_tag))))
  
  predicate instanceof_singleton_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4))
  = (instanceof __anonstruct_Graph_4_tag_table p __anonstruct_Graph_4_tag)
  
  predicate instanceof_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (l : int) (r : int) (__anonstruct_Graph_4_tag_table
  : (tag_table __anonstruct_Graph_4))
  =
     ((instanceof __anonstruct_Graph_4_tag_table p __anonstruct_Graph_4_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof __anonstruct_Graph_4_tag_table (shift p i)
       __anonstruct_Graph_4_tag))))
  
  predicate right_valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (b : int) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  = ((>=) (offset_max __anonstruct_Graph_4_alloc_table p) b)
  
  predicate left_valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (a : int) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  = ((<=) (offset_min __anonstruct_Graph_4_alloc_table p) a)
  
  predicate strict_left_valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (a : int) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  = ((=) (offset_min __anonstruct_Graph_4_alloc_table p) a)
  
  predicate valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (a : int) (b : int)
  (__anonstruct_Graph_4_alloc_table : (alloc_table __anonstruct_Graph_4))
  =
     (((<=) (offset_min __anonstruct_Graph_4_alloc_table p) a) /\
     ((>=) (offset_max __anonstruct_Graph_4_alloc_table p) b))
  
  predicate strict_valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (a : int) (b : int)
  (__anonstruct_Graph_4_alloc_table : (alloc_table __anonstruct_Graph_4))
  =
     (((=) (offset_min __anonstruct_Graph_4_alloc_table p) a) /\
     ((=) (offset_max __anonstruct_Graph_4_alloc_table p) b))
  
  axiom U___anonstruct_Graph_4_int  :
  ((=) (int_of_tag __anonstruct_Graph_4_tag) (5))
  
end

module Struct___anonstruct_Graph_4_unsafe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Graph_4 
  
  use import Root___anonstruct_Graph_4 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct___anonstruct_Graph_4
  (p : (pointer __anonstruct_Graph_4)) 
   (__anonstruct_Graph_4_alloc_table : ref (alloc_table
    __anonstruct_Graph_4)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !__anonstruct_Graph_4_alloc_table p)) }
    writes { __anonstruct_Graph_4_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Graph_4_alloc_table (old
       !__anonstruct_Graph_4_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Graph_4 p (old
       !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Graph_4 p
      (offset_max (old !__anonstruct_Graph_4_alloc_table) p)
      !__anonstruct_Graph_4_alloc_table))) }
  
  val allocate_struct___anonstruct_Graph_4_requires
  (n : int) 
   (__anonstruct_Graph_4_alloc_table : ref (alloc_table
    __anonstruct_Graph_4)) 
    (__anonstruct_Graph_4_tag_table : ref (tag_table __anonstruct_Graph_4)) :
     (pointer __anonstruct_Graph_4)
     requires { ((>=) n (0)) } writes { __anonstruct_Graph_4_alloc_table,
     __anonstruct_Graph_4_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Graph_4 result (0) (Int.(-) n (1))
        !__anonstruct_Graph_4_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Graph_4 result n (old
        !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Graph_4 result (old
        !__anonstruct_Graph_4_tag_table) !__anonstruct_Graph_4_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !__anonstruct_Graph_4_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !__anonstruct_Graph_4_tag_table))
       /\
       ((typeof_struct___anonstruct_Graph_4 result (0) n
        !__anonstruct_Graph_4_tag_table)
       /\
       (container_of_struct___anonstruct_Graph_4 result (0) n
       !__anonstruct_Graph_4_tag_table))))))) }
  
end

module Struct___anonstruct_Graph_4_safe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Graph_4 
  
  use import Root___anonstruct_Graph_4 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct___anonstruct_Graph_4
  (p : (pointer __anonstruct_Graph_4)) 
   (__anonstruct_Graph_4_alloc_table : ref (alloc_table
    __anonstruct_Graph_4)) : unit
    requires { true } writes { __anonstruct_Graph_4_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Graph_4_alloc_table (old
       !__anonstruct_Graph_4_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Graph_4 p (old
       !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Graph_4 p
      (offset_max (old !__anonstruct_Graph_4_alloc_table) p)
      !__anonstruct_Graph_4_alloc_table))) }
  
  val allocate_struct___anonstruct_Graph_4
  (n : int) 
   (__anonstruct_Graph_4_alloc_table : ref (alloc_table
    __anonstruct_Graph_4)) 
    (__anonstruct_Graph_4_tag_table : ref (tag_table __anonstruct_Graph_4)) :
     (pointer __anonstruct_Graph_4)
     requires { true } writes { __anonstruct_Graph_4_alloc_table,
     __anonstruct_Graph_4_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Graph_4 result (0) (Int.(-) n (1))
        !__anonstruct_Graph_4_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Graph_4 result n (old
        !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Graph_4 result (old
        !__anonstruct_Graph_4_tag_table) !__anonstruct_Graph_4_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !__anonstruct_Graph_4_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !__anonstruct_Graph_4_tag_table))
       /\
       ((typeof_struct___anonstruct_Graph_4 result (0) n
        !__anonstruct_Graph_4_tag_table)
       /\
       (container_of_struct___anonstruct_Graph_4 result (0) n
       !__anonstruct_Graph_4_tag_table))))))) }
  
  val allocate_singleton_struct___anonstruct_Graph_4
  (__anonstruct_Graph_4_alloc_table : ref (alloc_table
   __anonstruct_Graph_4)) 
   (__anonstruct_Graph_4_tag_table : ref (tag_table __anonstruct_Graph_4)) :
    (pointer __anonstruct_Graph_4)
    requires { true } writes { __anonstruct_Graph_4_alloc_table,
    __anonstruct_Graph_4_tag_table }
    ensures {
      ((strict_valid_struct___anonstruct_Graph_4 result (0) (0)
       !__anonstruct_Graph_4_alloc_table)
      /\
      ((frame_alloc_struct___anonstruct_Graph_4 result (1) (old
       !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
      /\
      ((frame_tag_struct___anonstruct_Graph_4 result (old
       !__anonstruct_Graph_4_tag_table) !__anonstruct_Graph_4_tag_table)
      /\
      ((fresh_alloc_struct___anonstruct_Graph_4 result (0) (old
       !__anonstruct_Graph_4_alloc_table))
      /\
      ((fresh_tag_struct___anonstruct_Graph_4 result (0) (old
       !__anonstruct_Graph_4_tag_table))
      /\
      ((typeof_singleton_struct___anonstruct_Graph_4 result
       !__anonstruct_Graph_4_tag_table)
      /\
      (container_of_singleton_struct___anonstruct_Graph_4 result
      !__anonstruct_Graph_4_tag_table))))))) }
  
end

theory Struct___anonstruct_Vertex_2

  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Root___anonstruct_Vertex_2 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function __anonstruct_Vertex_2_tag  : (tag_id
  __anonstruct_Vertex_2)
  
  axiom U___anonstruct_Vertex_2_parenttag_bottom  :
  (parenttag __anonstruct_Vertex_2_tag bottom_tag)
  
  axiom U___anonstruct_Vertex_2_is_final  :
  (forall __anonstruct_Vertex_2_tag_table : (tag_table
   __anonstruct_Vertex_2).
   (forall p : (pointer __anonstruct_Vertex_2).
    ((instanceof __anonstruct_Vertex_2_tag_table p __anonstruct_Vertex_2_tag)
     ->
     ((=) (typeof __anonstruct_Vertex_2_tag_table p)
     __anonstruct_Vertex_2_tag))))
  
  predicate frame_tag_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (old___anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2))
  =
     ((tag_extends old___anonstruct_Vertex_2_tag_table
      __anonstruct_Vertex_2_tag_table)
     /\
     (alloc_tag_block old___anonstruct_Vertex_2_tag_table
     __anonstruct_Vertex_2_tag_table p))
  
  predicate frame_free_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (old___anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  =
     ((free_extends old___anonstruct_Vertex_2_alloc_table
      __anonstruct_Vertex_2_alloc_table)
     /\
     (free_block old___anonstruct_Vertex_2_alloc_table
     __anonstruct_Vertex_2_alloc_table p))
  
  predicate frame_alloc_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (n : int) (old___anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  =
     ((alloc_extends old___anonstruct_Vertex_2_alloc_table
      __anonstruct_Vertex_2_alloc_table)
     /\
     (alloc_block old___anonstruct_Vertex_2_alloc_table
     __anonstruct_Vertex_2_alloc_table p n))
  
  predicate fresh_tag_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (n : int) (__anonstruct_Vertex_2_tag_table :
  (tag_table __anonstruct_Vertex_2))
  = (tag_fresh __anonstruct_Vertex_2_tag_table p)
  
  predicate fresh_alloc_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (n : int) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  = (alloc_fresh __anonstruct_Vertex_2_alloc_table p)
  
  predicate container_of_singleton_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2)) = true
  
  predicate container_of_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (l : int) (r : int)
  (__anonstruct_Vertex_2_tag_table : (tag_table __anonstruct_Vertex_2))
  = true
  
  predicate typeof_singleton_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2))
  =
     ((=) (typeof __anonstruct_Vertex_2_tag_table p)
     __anonstruct_Vertex_2_tag)
  
  predicate typeof_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (l : int) (r : int)
  (__anonstruct_Vertex_2_tag_table : (tag_table __anonstruct_Vertex_2))
  =
     (((=) (typeof __anonstruct_Vertex_2_tag_table p)
      __anonstruct_Vertex_2_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof __anonstruct_Vertex_2_tag_table (shift p i))
       __anonstruct_Vertex_2_tag))))
  
  predicate instanceof_singleton_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2))
  = (instanceof __anonstruct_Vertex_2_tag_table p __anonstruct_Vertex_2_tag)
  
  predicate instanceof_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (l : int) (r : int)
  (__anonstruct_Vertex_2_tag_table : (tag_table __anonstruct_Vertex_2))
  =
     ((instanceof __anonstruct_Vertex_2_tag_table p __anonstruct_Vertex_2_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof __anonstruct_Vertex_2_tag_table (shift p i)
       __anonstruct_Vertex_2_tag))))
  
  predicate right_valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (b : int) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  = ((>=) (offset_max __anonstruct_Vertex_2_alloc_table p) b)
  
  predicate left_valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (a : int) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  = ((<=) (offset_min __anonstruct_Vertex_2_alloc_table p) a)
  
  predicate strict_left_valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (a : int) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  = ((=) (offset_min __anonstruct_Vertex_2_alloc_table p) a)
  
  predicate valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (a : int) (b : int)
  (__anonstruct_Vertex_2_alloc_table : (alloc_table __anonstruct_Vertex_2))
  =
     (((<=) (offset_min __anonstruct_Vertex_2_alloc_table p) a) /\
     ((>=) (offset_max __anonstruct_Vertex_2_alloc_table p) b))
  
  predicate strict_valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (a : int) (b : int)
  (__anonstruct_Vertex_2_alloc_table : (alloc_table __anonstruct_Vertex_2))
  =
     (((=) (offset_min __anonstruct_Vertex_2_alloc_table p) a) /\
     ((=) (offset_max __anonstruct_Vertex_2_alloc_table p) b))
  
  axiom U___anonstruct_Vertex_2_int  :
  ((=) (int_of_tag __anonstruct_Vertex_2_tag) (6))
  
end

module Struct___anonstruct_Vertex_2_unsafe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Vertex_2 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct___anonstruct_Vertex_2
  (p : (pointer __anonstruct_Vertex_2)) 
   (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
    __anonstruct_Vertex_2)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !__anonstruct_Vertex_2_alloc_table p)) }
    writes { __anonstruct_Vertex_2_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Vertex_2_alloc_table (old
       !__anonstruct_Vertex_2_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Vertex_2 p (old
       !__anonstruct_Vertex_2_alloc_table)
       !__anonstruct_Vertex_2_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Vertex_2 p
      (offset_max (old !__anonstruct_Vertex_2_alloc_table) p)
      !__anonstruct_Vertex_2_alloc_table))) }
  
  val allocate_struct___anonstruct_Vertex_2_requires
  (n : int) 
   (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
    __anonstruct_Vertex_2)) 
    (__anonstruct_Vertex_2_tag_table : ref (tag_table
     __anonstruct_Vertex_2)) : (pointer __anonstruct_Vertex_2)
     requires { ((>=) n (0)) } writes { __anonstruct_Vertex_2_alloc_table,
     __anonstruct_Vertex_2_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Vertex_2 result (0) (Int.(-) n (1))
        !__anonstruct_Vertex_2_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Vertex_2 result n (old
        !__anonstruct_Vertex_2_alloc_table)
        !__anonstruct_Vertex_2_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Vertex_2 result (old
        !__anonstruct_Vertex_2_tag_table) !__anonstruct_Vertex_2_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !__anonstruct_Vertex_2_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !__anonstruct_Vertex_2_tag_table))
       /\
       ((typeof_struct___anonstruct_Vertex_2 result (0) n
        !__anonstruct_Vertex_2_tag_table)
       /\
       (container_of_struct___anonstruct_Vertex_2 result (0) n
       !__anonstruct_Vertex_2_tag_table))))))) }
  
end

module Struct___anonstruct_Vertex_2_safe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Vertex_2 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct___anonstruct_Vertex_2
  (p : (pointer __anonstruct_Vertex_2)) 
   (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
    __anonstruct_Vertex_2)) : unit
    requires { true } writes { __anonstruct_Vertex_2_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Vertex_2_alloc_table (old
       !__anonstruct_Vertex_2_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Vertex_2 p (old
       !__anonstruct_Vertex_2_alloc_table)
       !__anonstruct_Vertex_2_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Vertex_2 p
      (offset_max (old !__anonstruct_Vertex_2_alloc_table) p)
      !__anonstruct_Vertex_2_alloc_table))) }
  
  val allocate_struct___anonstruct_Vertex_2
  (n : int) 
   (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
    __anonstruct_Vertex_2)) 
    (__anonstruct_Vertex_2_tag_table : ref (tag_table
     __anonstruct_Vertex_2)) : (pointer __anonstruct_Vertex_2)
     requires { true } writes { __anonstruct_Vertex_2_alloc_table,
     __anonstruct_Vertex_2_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Vertex_2 result (0) (Int.(-) n (1))
        !__anonstruct_Vertex_2_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Vertex_2 result n (old
        !__anonstruct_Vertex_2_alloc_table)
        !__anonstruct_Vertex_2_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Vertex_2 result (old
        !__anonstruct_Vertex_2_tag_table) !__anonstruct_Vertex_2_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !__anonstruct_Vertex_2_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !__anonstruct_Vertex_2_tag_table))
       /\
       ((typeof_struct___anonstruct_Vertex_2 result (0) n
        !__anonstruct_Vertex_2_tag_table)
       /\
       (container_of_struct___anonstruct_Vertex_2 result (0) n
       !__anonstruct_Vertex_2_tag_table))))))) }
  
  val allocate_singleton_struct___anonstruct_Vertex_2
  (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
   __anonstruct_Vertex_2)) 
   (__anonstruct_Vertex_2_tag_table : ref (tag_table
    __anonstruct_Vertex_2)) : (pointer __anonstruct_Vertex_2)
    requires { true } writes { __anonstruct_Vertex_2_alloc_table,
    __anonstruct_Vertex_2_tag_table }
    ensures {
      ((strict_valid_struct___anonstruct_Vertex_2 result (0) (0)
       !__anonstruct_Vertex_2_alloc_table)
      /\
      ((frame_alloc_struct___anonstruct_Vertex_2 result (1) (old
       !__anonstruct_Vertex_2_alloc_table)
       !__anonstruct_Vertex_2_alloc_table)
      /\
      ((frame_tag_struct___anonstruct_Vertex_2 result (old
       !__anonstruct_Vertex_2_tag_table) !__anonstruct_Vertex_2_tag_table)
      /\
      ((fresh_alloc_struct___anonstruct_Vertex_2 result (0) (old
       !__anonstruct_Vertex_2_alloc_table))
      /\
      ((fresh_tag_struct___anonstruct_Vertex_2 result (0) (old
       !__anonstruct_Vertex_2_tag_table))
      /\
      ((typeof_singleton_struct___anonstruct_Vertex_2 result
       !__anonstruct_Vertex_2_tag_table)
      /\
      (container_of_singleton_struct___anonstruct_Vertex_2 result
      !__anonstruct_Vertex_2_tag_table))))))) }
  
end

theory Struct_voidP

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  use import core.Voidp_tag_id 
  
  predicate frame_tag_struct_voidP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_voidP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_voidP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_voidP (p : (pointer voidP)) (n : int)
  (voidP_tag_table : (tag_table voidP))
  = (tag_fresh voidP_tag_table p)
  
  predicate fresh_alloc_struct_voidP (p : (pointer voidP)) (n : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (alloc_fresh voidP_alloc_table p)
  
  predicate container_of_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_voidP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) voidP_tag)
  
  predicate typeof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) voidP_tag))))
  
  predicate instanceof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p voidP_tag)
  
  predicate instanceof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) voidP_tag))))
  
  predicate right_valid_struct_voidP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((>=) (offset_max voidP_alloc_table p) b)
  
  predicate left_valid_struct_voidP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((<=) (offset_min voidP_alloc_table p) a)
  
  predicate strict_left_valid_struct_voidP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((=) (offset_min voidP_alloc_table p) a)
  
  predicate valid_struct_voidP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  =
     (((<=) (offset_min voidP_alloc_table p) a) /\
     ((>=) (offset_max voidP_alloc_table p) b))
  
  predicate strict_valid_struct_voidP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  =
     (((=) (offset_min voidP_alloc_table p) a) /\
     ((=) (offset_max voidP_alloc_table p) b))
  
end

theory Struct_charP

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import Struct_voidP 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  use import core.Charp_tag_id 
  
  predicate frame_tag_struct_charP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_charP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_charP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_charP (p : (pointer voidP)) (n : int)
  (voidP_tag_table : (tag_table voidP))
  = (fresh_tag_struct_voidP p n voidP_tag_table)
  
  predicate fresh_alloc_struct_charP (p : (pointer voidP)) (n : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (fresh_alloc_struct_voidP p n voidP_alloc_table)
  
  predicate container_of_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_charP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) charP_tag)
  
  predicate typeof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) charP_tag))))
  
  predicate instanceof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p charP_tag)
  
  predicate instanceof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) charP_tag))))
  
  predicate right_valid_struct_charP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (right_valid_struct_voidP p b voidP_alloc_table)
  
  predicate left_valid_struct_charP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate strict_left_valid_struct_charP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (strict_left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate valid_struct_charP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (valid_struct_voidP p a b voidP_alloc_table)
  
  predicate strict_valid_struct_charP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  = (strict_valid_struct_voidP p a b voidP_alloc_table)
  
end

module Struct_charP_unsafe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_charP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_charP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_charP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_charP_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_charP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_charP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_charP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_charP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_charP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_charP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_charP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_charP result (0) (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_charP result (0) (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_charP result !voidP_tag_table) /\
      (container_of_singleton_struct_charP result !voidP_tag_table))))))) }
  
end

module Struct_voidP_unsafe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_voidP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_voidP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_voidP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_voidP_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_voidP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_voidP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_voidP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_voidP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_voidP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_voidP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_voidP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_voidP result (0) (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_voidP result (0) (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_voidP result !voidP_tag_table) /\
      (container_of_singleton_struct_voidP result !voidP_tag_table))))))) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint8.to_int n)) \/
     (Bit_int8_of_Bit_uint8.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { (Int8.in_bounds (Uint8.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Uint64.to_int n)) \/
     (Bit_uint32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { (Uint32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint64.to_int n)) \/
     (Bit_uint16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint64.to_int n)) \/
     (Bit_int8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { (Int8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires {
     ((Bit_int64.in_bounds (Uint64.to_int n)) \/
     (Bit_int64_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { (Int64.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint64.to_int n)) \/
     (Bit_int32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { (Int32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint64.to_int n)) \/
     (Bit_int16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { (Int16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint32.to_int n)) \/
     (Bit_uint16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint32.to_int n)) \/
     (Bit_int8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { (Int8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint32.to_int n)) \/
     (Bit_int32_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { (Int32.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint32.to_int n)) \/
     (Bit_int16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { (Int16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint16.to_int n)) \/
     (Bit_int8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { (Int8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint16.to_int n)) \/
     (Bit_int16_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { (Int16.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Int64.to_int n)) \/
     (Bit_int32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { (Int32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int64.to_int n)) \/
     (Bit_int16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { (Int16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int32.to_int n)) \/
     (Bit_int16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { (Int16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint64.to_int n)) \/
     (Bit_uint8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint32.to_int n)) \/
     (Bit_uint8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint16.to_int n)) \/
     (Bit_uint8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int8.to_int n)) \/
     (Bit_uint8_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { (Uint8.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int64.to_int n)) \/
     (Bit_uint8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { (Uint8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int32.to_int n)) \/
     (Bit_uint8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { (Uint8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int16.to_int n)) \/
     (Bit_uint8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { (Uint8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int8.to_int n)) \/
     (Bit_uint64_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { (Uint64.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true } ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int64.to_int n)) \/
     (Bit_uint64_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { (Uint64.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int32.to_int n)) \/
     (Bit_uint64_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { (Uint64.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int16.to_int n)) \/
     (Bit_uint64_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { (Uint64.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int8.to_int n)) \/
     (Bit_uint32_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { (Uint32.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true } ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int64.to_int n)) \/
     (Bit_uint32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { (Uint32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int32.to_int n)) \/
     (Bit_uint32_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { (Uint32.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int16.to_int n)) \/
     (Bit_uint32_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { (Uint32.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int8.to_int n)) \/
     (Bit_uint16_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { (Uint16.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true } ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int64.to_int n)) \/
     (Bit_uint16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { (Uint16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int32.to_int n)) \/
     (Bit_uint16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { (Uint16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int16.to_int n)) \/
     (Bit_uint16_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { (Uint16.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int64.to_int n)) \/
     (Bit_int8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { (Int8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int32.to_int n)) \/
     (Bit_int8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { (Int8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int16.to_int n)) \/
     (Bit_int8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { (Int8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

module Function_remove_edge

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_graph_valid 
  
  use import Logic_all_count 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  use import Lemma_zero_after_ecnt_lemma 
  
  use import Lemma_count_zero_lemma 
  
  use import Lemma_count_split_lemma 
  
  use import Lemma_count_split_2_lemma 
  
  use import Lemma_count_one_lemma 
  
  use import Lemma_count_lemma 
  
  use import Lemma_count_double_split_lemma 
  
  use import Lemma_all_count_lemma 
  
  val remove_edge
  (g_0_0 : (pointer __anonstruct_Graph_4)) 
   (f_0_0 : Int32.t) 
    (t_0_0 : Int32.t) 
     (__anonstruct_Graph_4_ecnt_g_0_11 : ref (memory __anonstruct_Graph_4
      Int32.t)) 
      (__anonstruct_Edge_3_existent_0_edges_32 : ref (memory
       __anonstruct_Edge_3 Int32.t)) 
       (__anonstruct_Vertex_2_vertices_31_alloc_table : (alloc_table
        __anonstruct_Vertex_2)) 
        (__anonstruct_Graph_4_g_0_11_alloc_table : (alloc_table
         __anonstruct_Graph_4)) 
         (__anonstruct_Edge_3_edges_32_alloc_table : (alloc_table
          __anonstruct_Edge_3)) 
          (__anonstruct_Edge_3_edges_32_tag_table : (tag_table
           __anonstruct_Edge_3)) 
           (__anonstruct_Graph_4_esize_g_0_11 : (memory __anonstruct_Graph_4
            Int32.t)) 
            (__anonstruct_Graph_4_edges_g_0_11 : (memory __anonstruct_Graph_4
             (pointer __anonstruct_Edge_3))) 
             (__anonstruct_Graph_4_vsize_g_0_11 : (memory
              __anonstruct_Graph_4 Int32.t)) 
              (__anonstruct_Graph_4_vertices_g_0_11 : (memory
               __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
               (__anonstruct_Edge_3_to_edges_32 : (memory __anonstruct_Edge_3
                Int32.t)) 
                (__anonstruct_Edge_3_from_edges_32 : (memory
                 __anonstruct_Edge_3 Int32.t)) 
                 (__anonstruct_Vertex_2_existent_vertices_31 : (memory
                  __anonstruct_Vertex_2 Int32.t)) : unit
                  requires { true } reads {
                  __anonstruct_Edge_3_existent_0_edges_32,
                  __anonstruct_Graph_4_ecnt_g_0_11 } writes {
                  __anonstruct_Edge_3_existent_0_edges_32,
                  __anonstruct_Graph_4_ecnt_g_0_11 }
                  ensures {
                    (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
                    "expl:Ensures clause"
                    (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
                    "expl:Ensures clause"
                    ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
                     "expl:Ensures clause"
                     (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
                     "expl:Ensures clause"
                     ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
                      "expl:Ensures clause"
                      ((<=)
                      (offset_min __anonstruct_Graph_4_g_0_11_alloc_table
                      g_0_0) (0)))
                     /\
                     (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
                     "expl:Ensures clause"
                     ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
                      "expl:Ensures clause"
                      ((>=)
                      (offset_max __anonstruct_Graph_4_g_0_11_alloc_table
                      g_0_0) (0)))
                     /\
                     (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
                     "expl:Ensures clause" ((=) true true)))))))
                    /\
                    (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
                    "expl:Ensures clause"
                    ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 172 10 24#
                     "expl:Ensures clause"
                     (graph_valid g_0_0
                     __anonstruct_Vertex_2_vertices_31_alloc_table
                     __anonstruct_Edge_3_edges_32_alloc_table
                     __anonstruct_Graph_4_esize_g_0_11
                     !__anonstruct_Graph_4_ecnt_g_0_11
                     __anonstruct_Graph_4_edges_g_0_11
                     __anonstruct_Graph_4_vsize_g_0_11
                     __anonstruct_Graph_4_vertices_g_0_11
                     !__anonstruct_Edge_3_existent_0_edges_32
                     __anonstruct_Edge_3_to_edges_32
                     __anonstruct_Edge_3_from_edges_32
                     __anonstruct_Vertex_2_existent_vertices_31))
                    /\
                    (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
                    "expl:Ensures clause"
                    ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 173 10 33#
                     "expl:Ensures clause"
                     ((=)
                     (all_count g_0_0 (Int32.to_int f_0_0)
                     (Int32.to_int t_0_0) __anonstruct_Graph_4_esize_g_0_11
                     __anonstruct_Graph_4_edges_g_0_11
                     !__anonstruct_Edge_3_existent_0_edges_32
                     __anonstruct_Edge_3_to_edges_32
                     __anonstruct_Edge_3_from_edges_32) (0)))
                    /\
                    (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 174 10 108#
                    "expl:Ensures clause"
                    (forall f2_12 : int.
                     (forall t2_12 : int.
                      (((not ((=) f2_12 (Int32.to_int f_0_0))) \/
                       (not ((=) t2_12 (Int32.to_int t_0_0)))) ->
                       ((=)
                       (all_count g_0_0 f2_12 t2_12
                       __anonstruct_Graph_4_esize_g_0_11
                       __anonstruct_Graph_4_edges_g_0_11
                       !__anonstruct_Edge_3_existent_0_edges_32
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32)
                       (all_count g_0_0 f2_12 t2_12
                       __anonstruct_Graph_4_esize_g_0_11
                       __anonstruct_Graph_4_edges_g_0_11 (old
                       !__anonstruct_Edge_3_existent_0_edges_32)
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32))))))))))))) }
  
end

module Function_remove_edge_safe

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_vertex 
  
  use import Logic_graph_valid 
  
  use import Logic_all_count 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_LF__Axiomatic__count_not_existent_lemma 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  use import Lemma_zero_after_ecnt_lemma 
  
  use import Lemma_count_zero_lemma 
  
  use import Lemma_count_split_lemma 
  
  use import Lemma_count_split_2_lemma 
  
  use import Lemma_count_one_lemma 
  
  use import Lemma_count_lemma 
  
  use import Lemma_count_double_split_lemma 
  
  use import Lemma_all_count_lemma 
  
  val remove_edge
  (g_0_0 : (pointer __anonstruct_Graph_4)) 
   (f_0_0 : Int32.t) 
    (t_0_0 : Int32.t) 
     (__anonstruct_Graph_4_ecnt_g_0_11 : ref (memory __anonstruct_Graph_4
      Int32.t)) 
      (__anonstruct_Edge_3_existent_0_edges_32 : ref (memory
       __anonstruct_Edge_3 Int32.t)) 
       (__anonstruct_Vertex_2_vertices_31_alloc_table : (alloc_table
        __anonstruct_Vertex_2)) 
        (__anonstruct_Graph_4_g_0_11_alloc_table : (alloc_table
         __anonstruct_Graph_4)) 
         (__anonstruct_Edge_3_edges_32_alloc_table : (alloc_table
          __anonstruct_Edge_3)) 
          (__anonstruct_Edge_3_edges_32_tag_table : (tag_table
           __anonstruct_Edge_3)) 
           (__anonstruct_Graph_4_esize_g_0_11 : (memory __anonstruct_Graph_4
            Int32.t)) 
            (__anonstruct_Graph_4_edges_g_0_11 : (memory __anonstruct_Graph_4
             (pointer __anonstruct_Edge_3))) 
             (__anonstruct_Graph_4_vsize_g_0_11 : (memory
              __anonstruct_Graph_4 Int32.t)) 
              (__anonstruct_Graph_4_vertices_g_0_11 : (memory
               __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
               (__anonstruct_Edge_3_to_edges_32 : (memory __anonstruct_Edge_3
                Int32.t)) 
                (__anonstruct_Edge_3_from_edges_32 : (memory
                 __anonstruct_Edge_3 Int32.t)) 
                 (__anonstruct_Vertex_2_existent_vertices_31 : (memory
                  __anonstruct_Vertex_2 Int32.t)) : unit
                  requires {
                    ("expl:Internal"
                    (#"test_2_c.jc" 310 12 833# "expl:Requires clause"
                    ((#"test_2_c.jc" 310 12 833# "expl:Requires clause"
                     _LF__Predicate__count_not_existent_lemma)
                    /\
                    (#"test_2_c.jc" 310 12 833# "expl:Requires clause"
                    ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 166 11 20#
                     "expl:Requires clause"
                     (#"test_2_c.jc" 310 12 833# "expl:Requires clause"
                     ((#"test_2_c.jc" 310 12 833# "expl:Requires clause"
                      ((<=)
                      (offset_min __anonstruct_Graph_4_g_0_11_alloc_table
                      g_0_0) (0)))
                     /\
                     (#"test_2_c.jc" 310 12 833# "expl:Requires clause"
                     ((#"test_2_c.jc" 310 12 833# "expl:Requires clause"
                      ((>=)
                      (offset_max __anonstruct_Graph_4_g_0_11_alloc_table
                      g_0_0) (0)))
                     /\
                     (#"test_2_c.jc" 310 12 833# "expl:Requires clause"
                     ((=) true true)))))))
                    /\
                    (#"test_2_c.jc" 310 12 833# "expl:Requires clause"
                    ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 166 24 38#
                     "expl:Requires clause"
                     (graph_valid g_0_0
                     __anonstruct_Vertex_2_vertices_31_alloc_table
                     __anonstruct_Edge_3_edges_32_alloc_table
                     __anonstruct_Graph_4_esize_g_0_11
                     !__anonstruct_Graph_4_ecnt_g_0_11
                     __anonstruct_Graph_4_edges_g_0_11
                     __anonstruct_Graph_4_vsize_g_0_11
                     __anonstruct_Graph_4_vertices_g_0_11
                     !__anonstruct_Edge_3_existent_0_edges_32
                     __anonstruct_Edge_3_to_edges_32
                     __anonstruct_Edge_3_from_edges_32
                     __anonstruct_Vertex_2_existent_vertices_31))
                    /\
                    (#"test_2_c.jc" 310 12 833# "expl:Requires clause"
                    ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 167 11 26#
                     "expl:Requires clause"
                     (is_vertex g_0_0 (Int32.to_int f_0_0)
                     __anonstruct_Graph_4_vsize_g_0_11))
                    /\
                    (#"test_2_c.jc" 310 12 833# "expl:Requires clause"
                    ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 168 11 26#
                     "expl:Requires clause"
                     (is_vertex g_0_0 (Int32.to_int t_0_0)
                     __anonstruct_Graph_4_vsize_g_0_11))
                    /\
                    (#"test_2_c.jc" 310 12 833# "expl:Requires clause"
                    ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 169 11 34#
                     "expl:Requires clause"
                     (not
                     ((=)
                     (Int32.to_int
                     (select __anonstruct_Vertex_2_existent_vertices_31
                     (shift
                     (select __anonstruct_Graph_4_vertices_g_0_11 g_0_0)
                     (Int32.to_int f_0_0)))) (0))))
                    /\
                    (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 170 11 34#
                    "expl:Requires clause"
                    (not
                    ((=)
                    (Int32.to_int
                    (select __anonstruct_Vertex_2_existent_vertices_31
                    (shift
                    (select __anonstruct_Graph_4_vertices_g_0_11 g_0_0)
                    (Int32.to_int t_0_0)))) (0))))))))))))))))) }
                  reads { __anonstruct_Edge_3_existent_0_edges_32,
                  __anonstruct_Graph_4_ecnt_g_0_11 } writes {
                  __anonstruct_Edge_3_existent_0_edges_32,
                  __anonstruct_Graph_4_ecnt_g_0_11 }
                  ensures {
                    (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
                    "expl:Ensures clause"
                    (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
                    "expl:Ensures clause"
                    ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
                     "expl:Ensures clause"
                     (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
                     "expl:Ensures clause"
                     ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
                      "expl:Ensures clause"
                      ((<=)
                      (offset_min __anonstruct_Graph_4_g_0_11_alloc_table
                      g_0_0) (0)))
                     /\
                     (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
                     "expl:Ensures clause"
                     ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
                      "expl:Ensures clause"
                      ((>=)
                      (offset_max __anonstruct_Graph_4_g_0_11_alloc_table
                      g_0_0) (0)))
                     /\
                     (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
                     "expl:Ensures clause" ((=) true true)))))))
                    /\
                    (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
                    "expl:Ensures clause"
                    ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 172 10 24#
                     "expl:Ensures clause"
                     (graph_valid g_0_0
                     __anonstruct_Vertex_2_vertices_31_alloc_table
                     __anonstruct_Edge_3_edges_32_alloc_table
                     __anonstruct_Graph_4_esize_g_0_11
                     !__anonstruct_Graph_4_ecnt_g_0_11
                     __anonstruct_Graph_4_edges_g_0_11
                     __anonstruct_Graph_4_vsize_g_0_11
                     __anonstruct_Graph_4_vertices_g_0_11
                     !__anonstruct_Edge_3_existent_0_edges_32
                     __anonstruct_Edge_3_to_edges_32
                     __anonstruct_Edge_3_from_edges_32
                     __anonstruct_Vertex_2_existent_vertices_31))
                    /\
                    (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 171 10 19#
                    "expl:Ensures clause"
                    ((#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 173 10 33#
                     "expl:Ensures clause"
                     ((=)
                     (all_count g_0_0 (Int32.to_int f_0_0)
                     (Int32.to_int t_0_0) __anonstruct_Graph_4_esize_g_0_11
                     __anonstruct_Graph_4_edges_g_0_11
                     !__anonstruct_Edge_3_existent_0_edges_32
                     __anonstruct_Edge_3_to_edges_32
                     __anonstruct_Edge_3_from_edges_32) (0)))
                    /\
                    (#"/home/tsirleo/University/DeductiveVerification/Tests/test_2/test_2.c" 174 10 108#
                    "expl:Ensures clause"
                    (forall f2_12 : int.
                     (forall t2_12 : int.
                      (((not ((=) f2_12 (Int32.to_int f_0_0))) \/
                       (not ((=) t2_12 (Int32.to_int t_0_0)))) ->
                       ((=)
                       (all_count g_0_0 f2_12 t2_12
                       __anonstruct_Graph_4_esize_g_0_11
                       __anonstruct_Graph_4_edges_g_0_11
                       !__anonstruct_Edge_3_existent_0_edges_32
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32)
                       (all_count g_0_0 f2_12 t2_12
                       __anonstruct_Graph_4_esize_g_0_11
                       __anonstruct_Graph_4_edges_g_0_11 (old
                       !__anonstruct_Edge_3_existent_0_edges_32)
                       __anonstruct_Edge_3_to_edges_32
                       __anonstruct_Edge_3_from_edges_32))))))))))))) }
  
end
