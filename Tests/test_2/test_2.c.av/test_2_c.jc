
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag __anonstruct_Vertex_2 = {
  padding padding_1: 32; 
  int32 existent: 32;
}

type __anonstruct_Vertex_2 = [__anonstruct_Vertex_2]

tag __anonstruct_Edge_3 = {
  int32 from: 32; 
  int32 to: 32; 
  int32 existent_0: 32;
}

type __anonstruct_Edge_3 = [__anonstruct_Edge_3]

tag __anonstruct_Graph_4 = {
  __anonstruct_Vertex_2[..] vertices: 64; 
  int32 vsize: 32; 
  padding padding_2: 32; 
  __anonstruct_Edge_3[..] edges: 64; 
  int32 ecnt: 32; 
  int32 esize: 32;
}

type __anonstruct_Graph_4 = [__anonstruct_Graph_4]

predicate is_vertex{L}(__anonstruct_Graph_4[..] g, integer v) =
\at(((0 <= v) && (v < (g.vsize :> integer))),L)

predicate edge_valid{L}(__anonstruct_Graph_4[..] g_0, integer k_1) =
\at(((! ((g_0.edges + k_1).existent_0 == 0)) ==>
      (((is_vertex{L}(g_0, ((g_0.edges + k_1).from :> integer)) &&
          is_vertex{L}(g_0, ((g_0.edges + k_1).to :> integer))) &&
         (! ((g_0.vertices + ((g_0.edges + k_1).from :> integer)).existent ==
              0))) &&
        (! ((g_0.vertices + ((g_0.edges + k_1).to :> integer)).existent == 0)))),L)

predicate edges_valid{L}(__anonstruct_Graph_4[..] g_1, integer n_1) =
\at((\forall integer k_2;
      (((0 <= k_2) && (k_2 < n_1)) ==> edge_valid{L}(g_1, k_2))),L)

predicate graph_valid{L}(__anonstruct_Graph_4[..] g_2) =
\at(((((((((g_2.vsize > (0 :> int32)) && (g_2.esize > (0 :> int32))) &&
           (g_2.esize >= g_2.ecnt)) &&
          (g_2.ecnt >= (0 :> int32))) &&
         \at((if (\at(0,L) <= \at(((g_2.vsize :> integer) - 1),L)) then 
             (((\offset_min(\at(g_2.vertices,L)) <= \at(0,L)) &&
                (\offset_max(\at(g_2.vertices,L)) >=
                  \at(((g_2.vsize :> integer) - 1),L))) &&
               (\forall integer __framac_tmp2;
                 (((\at(0,L) <= __framac_tmp2) &&
                    (__framac_tmp2 <= \at(((g_2.vsize :> integer) - 1),L))) ==>
                   true))) else true),L)) &&
        \at((if (\at(0,L) <= \at(((g_2.esize :> integer) - 1),L)) then 
            (((\offset_min(\at(g_2.edges,L)) <= \at(0,L)) &&
               (\offset_max(\at(g_2.edges,L)) >=
                 \at(((g_2.esize :> integer) - 1),L))) &&
              (\forall integer __framac_tmp1;
                (((\at(0,L) <= __framac_tmp1) &&
                   (__framac_tmp1 <= \at(((g_2.esize :> integer) - 1),L))) ==>
                  true))) else true),L)) &&
       edges_valid{L}(g_2, (g_2.ecnt :> integer))) &&
      (\forall integer k_3;
        ((((g_2.ecnt :> integer) <= k_3) && (k_3 < (g_2.esize :> integer))) ==>
          ((g_2.edges + k_3).existent_0 == 0)))),L)

axiomatic EdgesCount {

  logic integer count{L}(__anonstruct_Graph_4[..] g_3, integer f, integer t,
                         integer m, integer n_2)
   
  axiom count_zero{L} :
  (_C_1 : (\forall __anonstruct_Graph_4[..] g_4;
            (\forall integer f_0;
              (\forall integer t_0;
                (\forall integer m_0;
                  (\forall integer n_3;
                    ((m_0 >= n_3) ==>
                      (count{L}(g_4, f_0, t_0, m_0, n_3) == 0))))))))
   
  predicate count_one_p{L}(__anonstruct_Graph_4[..] g_5, integer f_1,
                           integer t_1, integer m_1) =
  (count{L}(g_5, f_1, t_1, m_1, (m_1 + 1)) ==
    (if (((((g_5.edges + m_1).existent_0 :> integer) != 0) &&
           (((g_5.edges + m_1).from :> integer) == f_1)) &&
          (((g_5.edges + m_1).to :> integer) == t_1)) then 1 else 0))
   
  axiom count_one{L} :
  (_C_2 : (\forall __anonstruct_Graph_4[..] g_6;
            (\forall integer f_2;
              (\forall integer t_2;
                (\forall integer m_2;
                  count_one_p{L}(g_6, f_2, t_2, m_2))))))
   
  predicate count_split_p{L}(__anonstruct_Graph_4[..] g_7, integer f_3,
                             integer t_3, integer m_3, integer n_4,
                             integer k_4) =
  (count{L}(g_7, f_3, t_3, m_3, k_4) ==
    (count{L}(g_7, f_3, t_3, m_3, n_4) + count{L}(g_7, f_3, t_3, n_4, k_4)))
   
  axiom count_split{L} :
  (_C_3 : (\forall __anonstruct_Graph_4[..] g_8;
            (\forall integer f_4;
              (\forall integer t_4;
                (\forall integer m_4;
                  (\forall integer n_5;
                    (\forall integer k_5;
                      (((m_4 <= n_5) && (n_5 <= k_5)) ==>
                        count_split_p{L}(g_8, f_4, t_4, m_4, n_5, k_5)))))))))
  
}

logic integer all_count{L}(__anonstruct_Graph_4[..] g_9, integer f_5,
                           integer t_5) =
\at(count{L}(g_9, f_5, t_5, 0, (g_9.esize :> integer)),L)

lemma count_zero_lemma{L} :
(_C_4 : (\forall __anonstruct_Graph_4[..] g_10;
          (\forall integer f_6;
            (\forall integer t_6;
              (\forall integer m_5;
                (\forall integer n_6;
                  ((m_5 >= n_6) ==>
                    (count{L}(g_10, f_6, t_6, m_5, n_6) == 0))))))))

lemma count_one_lemma{L} :
(_C_5 : (\forall __anonstruct_Graph_4[..] g_11;
          (\forall integer f_7;
            (\forall integer t_7;
              (\forall integer m_6;
                (count_one_p{L}(g_11, f_7, t_7, m_6) &&
                  (count{L}(g_11, f_7, t_7, m_6, (m_6 + 1)) ==
                    (if ((((g_11.edges + m_6).existent_0 != (0 :> int32)) &&
                           (((g_11.edges + m_6).from :> integer) == f_7)) &&
                          (((g_11.edges + m_6).to :> integer) == t_7)) then 1 else 0))))))))

lemma count_split_lemma{L} :
(_C_6 : (\forall __anonstruct_Graph_4[..] g_12;
          (\forall integer f_8;
            (\forall integer t_8;
              (\forall integer m_7;
                (\forall integer n_7;
                  (\forall integer k_6;
                    (((m_7 <= n_7) && (n_7 <= k_6)) ==>
                      (count_split_p{L}(g_12, f_8, t_8, m_7, n_7, k_6) &&
                        (count{L}(g_12, f_8, t_8, m_7, k_6) ==
                          (count{L}(g_12, f_8, t_8, m_7, n_7) +
                            count{L}(g_12, f_8, t_8, n_7, k_6))))))))))))

lemma count_split_2_lemma{L} :
(_C_7 : (\forall __anonstruct_Graph_4[..] g_13;
          (\forall integer f_9;
            (\forall integer t_9;
              (\forall integer m_8;
                (\forall integer n_8;
                  ((m_8 <= n_8) ==>
                    (count{L}(g_13, f_9, t_9, m_8, (n_8 + 1)) ==
                      (count{L}(g_13, f_9, t_9, m_8, n_8) +
                        count{L}(g_13, f_9, t_9, n_8, (n_8 + 1)))))))))))

lemma count_double_split_lemma{L} :
(_C_8 : (\forall __anonstruct_Graph_4[..] g_14;
          (\forall integer f_10;
            (\forall integer t_10;
              (\forall integer m_9;
                (\forall integer n_9;
                  (\forall integer k_7;
                    (((m_9 <= k_7) && (k_7 <= (n_9 - 1))) ==>
                      (count{L}(g_14, f_10, t_10, m_9, n_9) ==
                        ((count{L}(g_14, f_10, t_10, m_9, k_7) +
                           count{L}(g_14, f_10, t_10, k_7, (k_7 + 1))) +
                          count{L}(g_14, f_10, t_10, (k_7 + 1), n_9)))))))))))

lemma all_count_lemma{L} :
(_C_9 : (\forall __anonstruct_Graph_4[..] g_15;
          (\forall integer k_8;
            (\forall integer f_11;
              (\forall integer t_11;
                ((((0 :> int32) <= g_15.ecnt) && (g_15.ecnt <= g_15.esize)) ==>
                  (((all_count{L}(g_15, f_11, t_11) ==
                      count{L}(g_15, f_11, t_11, 0, (g_15.esize :> integer))) &&
                     (all_count{L}(g_15, f_11, t_11) ==
                       (count{L}(g_15, f_11, t_11, 0, (g_15.ecnt :> integer)) +
                         count{L}(g_15, f_11, t_11, (g_15.ecnt :> integer),
                                  (g_15.esize :> integer))))) &&
                    (count{L}(g_15, f_11, t_11, 0, (g_15.esize :> integer)) ==
                      (count{L}(g_15, f_11, t_11, 0, (g_15.ecnt :> integer)) +
                        count{L}(g_15, f_11, t_11, (g_15.ecnt :> integer),
                                 (g_15.esize :> integer)))))))))))

lemma zero_after_ecnt_lemma{L} :
(_C_10 : (\forall __anonstruct_Graph_4[..] g_16;
           (\forall integer f_12;
             (\forall integer t_12;
               (\forall integer m_10;
                 (graph_valid{L}(g_16) ==>
                   ((((g_16.ecnt :> integer) <= (m_10 - 1)) &&
                      ((m_10 - 1) < (g_16.esize :> integer))) ==>
                     ((count{L}(g_16, f_12, t_12, (m_10 - 1), m_10) == 0) &&
                       ((g_16.edges + (m_10 - 1)).existent_0 == (0 :> int32))))))))))

lemma count_lemma{L} :
(_C_11 : (\forall __anonstruct_Graph_4[..] g_17;
           (\forall integer f_13;
             (\forall integer t_13;
               (\forall integer m_11;
                 (((0 <= (m_11 - 1)) &&
                    ((m_11 - 1) <= (g_17.ecnt :> integer))) ==>
                   (count{L}(g_17, f_13, t_13, 0, m_11) ==
                     (count{L}(g_17, f_13, t_13, 0, (m_11 - 1)) +
                       count{L}(g_17, f_13, t_13, (m_11 - 1), m_11)))))))))

unit count_not_existent_lemma(__anonstruct_Graph_4[..] g, int32 f, int32 t,
                              int32 k)
  requires ((_C_20 : \at((((\offset_min(\at(g,Here)) <= \at(0,Here)) &&
                            (\offset_max(\at(g,Here)) >= \at(0,Here))) &&
                           true),Here)) &&
             ((_C_21 : graph_valid{Here}(g)) &&
               (_C_22 : ((_C_23 : (g.ecnt <= k)) && (_C_24 : (k <= g.esize))))));
  decreases (_C_25 : ((k :> integer) - (g.ecnt :> integer)));
behavior default:
  assigns \nothing;
  allocates \nothing;
  ensures (_C_19 : (count{Here}(\at(g,Old), (\at(f,Old) :> integer),
                                (\at(t,Old) :> integer),
                                (\at(g,Old).ecnt :> integer),
                                (\at(k,Old) :> integer)) ==
                     0));
{  
   {  (if (_C_18 : (k > (_C_17 : g.ecnt))) then 
      {  
         {  
            (assert for default: (_C_12 : (astraver : (count{Here}(g,
                                                                   (f :> integer),
                                                                   (t :> integer),
                                                                   ((k :> integer) -
                                                                    1),
                                                                   (k :> integer)) ==
                                                        0))));
            ()
         };
         
         {  
            (assert for default: (_C_13 : (astraver : (count{Here}(g,
                                                                   (f :> integer),
                                                                   (t :> integer),
                                                                   (g.ecnt :> integer),
                                                                   (k :> integer)) ==
                                                        (count{Here}(
                                                          g, (f :> integer),
                                                          (t :> integer),
                                                          (g.ecnt :> integer),
                                                          ((k :> integer) -
                                                            1)) +
                                                          count{Here}(
                                                          g, (f :> integer),
                                                          (t :> integer),
                                                          ((k :> integer) -
                                                            1),
                                                          (k :> integer)))))));
            ()
         };
         (_C_16 : count_not_existent_lemma(g, f, t,
                                           (_C_15 : ((_C_14 : (k -
                                                                (1 :> int32))) :> int32))))
      } else ());
      
      (return ())
   }
}

axiomatic LF__Axiomatic__count_not_existent_lemma {

  axiom LF__Lemma__count_not_existent_lemma{Here} :
  (_C_26 : (\forall __anonstruct_Graph_4[..] g_18;
             (\forall int32 f_14;
               (\forall int32 t_14;
                 (\forall int32 k_9;
                   (((\at((((\offset_min(\at(g_18,Here)) <= \at(0,Here)) &&
                             (\offset_max(\at(g_18,Here)) >= \at(0,Here))) &&
                            true),Here) &&
                       graph_valid{Here}(g_18)) &&
                      ((g_18.ecnt <= k_9) && (k_9 <= g_18.esize))) ==>
                     (count{Here}(g_18, (f_14 :> integer), (t_14 :> integer),
                                  (g_18.ecnt :> integer), (k_9 :> integer)) ==
                       0)))))))
   
  predicate _LF__Predicate__count_not_existent_lemma() =
  true
  
}

unit remove_edge(__anonstruct_Graph_4[..] g_0, int32 f_0, int32 t_0)
  requires (_LF__Predicate__count_not_existent_lemma() &&
             ((_C_156 : ((_C_157 : \at((((\offset_min(\at(g_0,Here)) <=
                                           \at(0,Here)) &&
                                          (\offset_max(\at(g_0,Here)) >=
                                            \at(0,Here))) &&
                                         true),Here)) &&
                          (_C_158 : graph_valid{Here}(g_0)))) &&
               ((_C_159 : is_vertex{Here}(g_0, (f_0 :> integer))) &&
                 ((_C_160 : is_vertex{Here}(g_0, (t_0 :> integer))) &&
                   ((_C_161 : (! ((g_0.vertices + (f_0 :> integer)).existent ==
                                   0))) &&
                     (_C_162 : (! ((g_0.vertices + (t_0 :> integer)).existent ==
                                    0))))))));
behavior default:
  ensures (_C_149 : ((_C_150 : \at(\at((((\offset_min(\at(g_0,Old)) <=
                                           \at(0,Old)) &&
                                          (\offset_max(\at(g_0,Old)) >=
                                            \at(0,Old))) &&
                                         true),Here),Old)) &&
                      ((_C_152 : graph_valid{Here}(\at(g_0,Old))) &&
                        ((_C_154 : (all_count{Here}(\at(g_0,Old),
                                                    (\at(f_0,Old) :> integer),
                                                    (\at(t_0,Old) :> integer)) ==
                                     0)) &&
                          (_C_155 : (\forall integer f2_12;
                                      (\forall integer t2_12;
                                        (((! (f2_12 ==
                                               (\at(f_0,Old) :> integer))) ||
                                           (! (t2_12 ==
                                                (\at(t_0,Old) :> integer)))) ==>
                                          (all_count{Here}(\at(g_0,Old),
                                                           f2_12, t2_12) ==
                                            all_count{Old}(\at(g_0,Old),
                                                           f2_12, t2_12))))))))));
{  
   (var int32 c);
   
   (var int32 i);
   
   (var int32 l);
   
   (var int32 h);
   
   (var int32 h_0);
   
   {  (_C_27 : (c = (0 :> int32)));
      (_Before : 
      {  (_C_28 : (i = (0 :> int32)));
         (LoopEntry : 
         loop 
         behavior default:
           invariant (_C_40 : (i >= (0 :> int32)));
         behavior default:
           invariant (_C_39 : (i <= g_0.ecnt));
         behavior default:
           invariant (_C_38 : (c >= (0 :> int32)));
         behavior default:
           invariant (_C_37 : (c <= g_0.esize));
         behavior default:
           invariant (_C_36 : graph_valid{Here}(g_0));
         behavior default:
           invariant (_C_35 : (count{Here}(g_0, (f_0 :> integer),
                                           (t_0 :> integer), 0,
                                           (i :> integer)) ==
                                0));
         behavior default:
           invariant (_C_34 : (\forall integer f2_11;
                                (\forall integer t2_11;
                                  (((! (f2_11 == (f_0 :> integer))) ||
                                     (! (t2_11 == (t_0 :> integer)))) ==>
                                    (all_count{Here}(g_0, f2_11, t2_11) ==
                                      all_count{Pre}(g_0, f2_11, t2_11))))));
         behavior default:
           invariant (_C_33 : (\forall integer k_11;
                                ((((i :> integer) <= k_11) &&
                                   (k_11 < (g_0.esize :> integer))) ==>
                                  ((g_0.edges + k_11).existent_0 ==
                                    \at((g_0.edges + k_11).existent_0,_Before)))));
         behavior default:
           invariant (_C_32 : (count{Here}(g_0, (f_0 :> integer),
                                           (t_0 :> integer), (i :> integer),
                                           (g_0.esize :> integer)) ==
                                count{_Before}(g_0, (f_0 :> integer),
                                               (t_0 :> integer),
                                               (i :> integer),
                                               (g_0.esize :> integer))));
         behavior default:
           invariant (_C_31 : (\forall integer m_17;
                                (((0 <= m_17) && (m_17 < (i :> integer))) ==>
                                  (((g_0.edges + m_17).from == f_0) ==>
                                    (((g_0.edges + m_17).to == t_0) ==>
                                      ((g_0.edges + m_17).existent_0 == 0))))));
         behavior default:
           invariant (_C_30 : (\forall integer k_12;
                                ((((c :> integer) <= k_12) &&
                                   (k_12 < (i :> integer))) ==>
                                  ((g_0.edges + k_12).existent_0 == 0))));
         variant (_C_29 : ((g_0.ecnt :> integer) - (i :> integer)));
         while (true)
         {  
            {  (LoopCurrent : (if (_C_42 : (i < (_C_41 : g_0.ecnt))) then () else 
                              (goto while_0_break)));
               
               {  
                  {  
                     (assert for default: (_C_43 : (astraver : \at((((\offset_min(
                                                                    \at(g_0,Here)) <=
                                                                    \at(0,Here)) &&
                                                                    (\offset_max(
                                                                    \at(g_0,Here)) >=
                                                                    \at(0,Here))) &&
                                                                    true),Here))));
                     ()
                  };
                  
                  {  
                     (assert for default: (_C_44 : (astraver : graph_valid{Here}(
                                                   g_0))));
                     ()
                  };
                  (_Pre1 : ());
                  (if (_C_124 : ((_C_123 : (_C_122 : ((_C_121 : g_0.edges) +
                                                       i)).from) ==
                                  f_0)) then (if (_C_120 : ((_C_119 : 
                                                            (_C_118 : 
                                                            ((_C_117 : g_0.edges) +
                                                              i)).to) ==
                                                             t_0)) then 
                                             {  (_C_48 : ((_C_47 : (_C_46 : 
                                                                   ((_C_45 : g_0.edges) +
                                                                    i)).existent_0) = (0 :> int32)));
                                                
                                                {  
                                                   (assert for default: 
                                                   (_C_49 : (astraver : 
                                                            (\forall integer f2;
                                                              (\forall integer t2;
                                                                (((! 
                                                                  (f2 ==
                                                                    (f_0 :> integer))) ||
                                                                   (! 
                                                                   (t2 ==
                                                                    (t_0 :> integer)))) ==>
                                                                  (count{Here}(
                                                                    g_0, f2,
                                                                    t2,
                                                                    (i :> integer),
                                                                    ((i :> integer) +
                                                                    1)) ==
                                                                    count{_Before}(
                                                                    g_0, f2,
                                                                    t2,
                                                                    (i :> integer),
                                                                    ((i :> integer) +
                                                                    1)))))))));
                                                   ()
                                                };
                                                
                                                {  
                                                   (assert for default: 
                                                   (_C_50 : (astraver : 
                                                            (count{Here}(
                                                              g_0,
                                                              (f_0 :> integer),
                                                              (t_0 :> integer),
                                                              (i :> integer),
                                                              ((i :> integer) +
                                                                1)) ==
                                                              0))));
                                                   ()
                                                };
                                                
                                                {  
                                                   (assert for default: 
                                                   (_C_51 : (astraver : 
                                                            (\forall integer m_12;
                                                              (((0 <= m_12) &&
                                                                 (m_12 <
                                                                   (i :> integer))) ==>
                                                                (((g_0.edges +
                                                                    m_12).from ==
                                                                   f_0) ==>
                                                                  (((g_0.edges +
                                                                    m_12).to ==
                                                                    t_0) ==>
                                                                    \at(
                                                                    ((g_0.edges +
                                                                    m_12).existent_0 ==
                                                                    0),Here))))))));
                                                   ()
                                                };
                                                
                                                {  
                                                   (assert for default: 
                                                   (_C_52 : (astraver : 
                                                            (\forall integer m_13;
                                                              (((0 <= m_13) &&
                                                                 (m_13 <
                                                                   (i :> integer))) ==>
                                                                (((g_0.edges +
                                                                    m_13).from ==
                                                                   f_0) ==>
                                                                  (((g_0.edges +
                                                                    m_13).to ==
                                                                    t_0) ==>
                                                                    \at(
                                                                    ((g_0.edges +
                                                                    m_13).existent_0 ==
                                                                    0),_Pre1))))))));
                                                   ()
                                                };
                                                (_C_53 : (l = (0 :> int32)));
                                                (LoopEntry : 
                                                loop 
                                                behavior default:
                                                  
                                                  assigns \nothing;
                                                behavior default:
                                                  invariant (_C_72 : 
                                                            (l >=
                                                              (0 :> int32)));
                                                behavior default:
                                                  invariant (_C_71 : 
                                                            (l <=
                                                              g_0.esize));
                                                behavior default:
                                                  invariant (_C_70 : 
                                                            \at((((\offset_min(
                                                                    \at(g_0,Here)) <=
                                                                    \at(0,Here)) &&
                                                                   (\offset_max(
                                                                    \at(g_0,Here)) >=
                                                                    \at(0,Here))) &&
                                                                  true),Here));
                                                behavior default:
                                                  invariant (_C_69 : 
                                                            \at((if (\at(0,Here) <=
                                                                    \at(
                                                                    ((g_0.esize :> integer) -
                                                                    1),Here)) then 
                                                                (((\offset_min(
                                                                    \at(g_0.edges,Here)) <=
                                                                    \at(0,Here)) &&
                                                                   (\offset_max(
                                                                    \at(g_0.edges,Here)) >=
                                                                    \at(
                                                                    ((g_0.esize :> integer) -
                                                                    1),Here))) &&
                                                                  (\forall integer __framac_tmp6;
                                                                    (((\at(0,Here) <=
                                                                    __framac_tmp6) &&
                                                                    (__framac_tmp6 <=
                                                                    \at(
                                                                    ((g_0.esize :> integer) -
                                                                    1),Here))) ==>
                                                                    true))) else true),Here));
                                                behavior default:
                                                  invariant (_C_68 : graph_valid{Here}(
                                                            g_0));
                                                behavior default:
                                                  invariant (_C_67 : 
                                                            (\forall integer j;
                                                              ((((0 <= j) &&
                                                                  (j <
                                                                    (l :> integer))) &&
                                                                 (! (j ==
                                                                    (i :> integer)))) ==>
                                                                (count{_Pre1}(
                                                                  g_0,
                                                                  (f_0 :> integer),
                                                                  (t_0 :> integer),
                                                                  j, 
                                                                  (j + 1)) ==
                                                                  count{Here}(
                                                                  g_0,
                                                                  (f_0 :> integer),
                                                                  (t_0 :> integer),
                                                                  j, 
                                                                  (j + 1))))));
                                                behavior default:
                                                  invariant (_C_66 : 
                                                            (((l :> integer) <=
                                                               ((i :> integer) -
                                                                 1)) ==>
                                                              (count{_Pre1}(
                                                                g_0,
                                                                (f_0 :> integer),
                                                                (t_0 :> integer),
                                                                0,
                                                                ((l :> integer) +
                                                                  1)) ==
                                                                (count{_Pre1}(
                                                                  g_0,
                                                                  (f_0 :> integer),
                                                                  (t_0 :> integer),
                                                                  0,
                                                                  (l :> integer)) +
                                                                  count{_Pre1}(
                                                                  g_0,
                                                                  (f_0 :> integer),
                                                                  (t_0 :> integer),
                                                                  (l :> integer),
                                                                  ((l :> integer) +
                                                                    1))))));
                                                behavior default:
                                                  invariant (_C_65 : 
                                                            (((l :> integer) <=
                                                               ((i :> integer) -
                                                                 1)) ==>
                                                              (count{Here}(
                                                                g_0,
                                                                (f_0 :> integer),
                                                                (t_0 :> integer),
                                                                0,
                                                                ((l :> integer) +
                                                                  1)) ==
                                                                (count{Here}(
                                                                  g_0,
                                                                  (f_0 :> integer),
                                                                  (t_0 :> integer),
                                                                  0,
                                                                  (l :> integer)) +
                                                                  count{Here}(
                                                                  g_0,
                                                                  (f_0 :> integer),
                                                                  (t_0 :> integer),
                                                                  (l :> integer),
                                                                  ((l :> integer) +
                                                                    1))))));
                                                behavior default:
                                                  invariant (_C_64 : 
                                                            ((l <= i) ==>
                                                              (count{_Pre1}(
                                                                g_0,
                                                                (f_0 :> integer),
                                                                (t_0 :> integer),
                                                                0,
                                                                (l :> integer)) ==
                                                                count{Here}(
                                                                g_0,
                                                                (f_0 :> integer),
                                                                (t_0 :> integer),
                                                                0,
                                                                (l :> integer)))));
                                                behavior default:
                                                  invariant (_C_63 : 
                                                            (((l :> integer) >
                                                               ((i :> integer) -
                                                                 1)) ==>
                                                              (count{_Pre1}(
                                                                g_0,
                                                                (f_0 :> integer),
                                                                (t_0 :> integer),
                                                                0,
                                                                ((l :> integer) +
                                                                  1)) ==
                                                                (count{_Pre1}(
                                                                  g_0,
                                                                  (f_0 :> integer),
                                                                  (t_0 :> integer),
                                                                  0,
                                                                  (l :> integer)) +
                                                                  count{_Pre1}(
                                                                  g_0,
                                                                  (f_0 :> integer),
                                                                  (t_0 :> integer),
                                                                  (l :> integer),
                                                                  ((l :> integer) +
                                                                    1))))));
                                                behavior default:
                                                  invariant (_C_62 : 
                                                            (((l :> integer) >
                                                               ((i :> integer) -
                                                                 1)) ==>
                                                              (count{Here}(
                                                                g_0,
                                                                (f_0 :> integer),
                                                                (t_0 :> integer),
                                                                0,
                                                                ((l :> integer) +
                                                                  1)) ==
                                                                (count{Here}(
                                                                  g_0,
                                                                  (f_0 :> integer),
                                                                  (t_0 :> integer),
                                                                  0,
                                                                  (l :> integer)) +
                                                                  count{Here}(
                                                                  g_0,
                                                                  (f_0 :> integer),
                                                                  (t_0 :> integer),
                                                                  (l :> integer),
                                                                  ((l :> integer) +
                                                                    1))))));
                                                behavior default:
                                                  invariant (_C_61 : 
                                                            (\forall integer j_0;
                                                              (((0 <= j_0) &&
                                                                 (j_0 <=
                                                                   ((l :> integer) -
                                                                    1))) ==>
                                                                (\forall integer f2_5;
                                                                  (\forall integer t2_5;
                                                                    (((! 
                                                                    (f2_5 ==
                                                                    (f_0 :> integer))) ||
                                                                    (! 
                                                                    (t2_5 ==
                                                                    (t_0 :> integer)))) ==>
                                                                    (count{_Pre1}(
                                                                    g_0,
                                                                    f2_5,
                                                                    t2_5, 0,
                                                                    (j_0 + 1)) ==
                                                                    (count{_Pre1}(
                                                                    g_0,
                                                                    f2_5,
                                                                    t2_5, 0,
                                                                    j_0) +
                                                                    count{_Pre1}(
                                                                    g_0,
                                                                    f2_5,
                                                                    t2_5,
                                                                    j_0,
                                                                    (j_0 + 1))))))))));
                                                behavior default:
                                                  invariant (_C_60 : 
                                                            (\forall integer j_1;
                                                              ((((0 <= j_1) &&
                                                                  (j_1 >=
                                                                    ((l :> integer) -
                                                                    1))) &&
                                                                 (j_1 <
                                                                   (g_0.esize :> integer))) ==>
                                                                (\forall integer f2_6;
                                                                  (\forall integer t2_6;
                                                                    (((! 
                                                                    (f2_6 ==
                                                                    (f_0 :> integer))) ||
                                                                    (! 
                                                                    (t2_6 ==
                                                                    (t_0 :> integer)))) ==>
                                                                    (count{_Pre1}(
                                                                    g_0,
                                                                    f2_6,
                                                                    t2_6, 0,
                                                                    (j_1 + 1)) ==
                                                                    (count{_Pre1}(
                                                                    g_0,
                                                                    f2_6,
                                                                    t2_6, 0,
                                                                    j_1) +
                                                                    count{_Pre1}(
                                                                    g_0,
                                                                    f2_6,
                                                                    t2_6,
                                                                    j_1,
                                                                    (j_1 + 1))))))))));
                                                behavior default:
                                                  invariant (_C_59 : 
                                                            (\forall integer j_2;
                                                              (((0 <= j_2) &&
                                                                 (j_2 <=
                                                                   ((l :> integer) -
                                                                    1))) ==>
                                                                (\forall integer f2_7;
                                                                  (\forall integer t2_7;
                                                                    (((! 
                                                                    (f2_7 ==
                                                                    (f_0 :> integer))) ||
                                                                    (! 
                                                                    (t2_7 ==
                                                                    (t_0 :> integer)))) ==>
                                                                    (count{Here}(
                                                                    g_0,
                                                                    f2_7,
                                                                    t2_7, 0,
                                                                    (j_2 + 1)) ==
                                                                    (count{Here}(
                                                                    g_0,
                                                                    f2_7,
                                                                    t2_7, 0,
                                                                    j_2) +
                                                                    count{Here}(
                                                                    g_0,
                                                                    f2_7,
                                                                    t2_7,
                                                                    j_2,
                                                                    (j_2 + 1))))))))));
                                                behavior default:
                                                  invariant (_C_58 : 
                                                            (\forall integer j_3;
                                                              ((((0 <= j_3) &&
                                                                  (j_3 >=
                                                                    ((l :> integer) -
                                                                    1))) &&
                                                                 (j_3 <
                                                                   (g_0.esize :> integer))) ==>
                                                                (\forall integer f2_8;
                                                                  (\forall integer t2_8;
                                                                    (((! 
                                                                    (f2_8 ==
                                                                    (f_0 :> integer))) ||
                                                                    (! 
                                                                    (t2_8 ==
                                                                    (t_0 :> integer)))) ==>
                                                                    (count{Here}(
                                                                    g_0,
                                                                    f2_8,
                                                                    t2_8, 0,
                                                                    (j_3 + 1)) ==
                                                                    (count{Here}(
                                                                    g_0,
                                                                    f2_8,
                                                                    t2_8, 0,
                                                                    j_3) +
                                                                    count{Here}(
                                                                    g_0,
                                                                    f2_8,
                                                                    t2_8,
                                                                    j_3,
                                                                    (j_3 + 1))))))))));
                                                behavior default:
                                                  invariant (_C_57 : 
                                                            (\forall integer j_4;
                                                              (((0 <= j_4) &&
                                                                 (j_4 <=
                                                                   ((l :> integer) -
                                                                    1))) ==>
                                                                (\forall integer f2_9;
                                                                  (\forall integer t2_9;
                                                                    (((! 
                                                                    (f2_9 ==
                                                                    (f_0 :> integer))) ||
                                                                    (! 
                                                                    (t2_9 ==
                                                                    (t_0 :> integer)))) ==>
                                                                    (count{Here}(
                                                                    g_0,
                                                                    f2_9,
                                                                    t2_9,
                                                                    j_4,
                                                                    (j_4 + 1)) ==
                                                                    count{_Pre1}(
                                                                    g_0,
                                                                    f2_9,
                                                                    t2_9,
                                                                    j_4,
                                                                    (j_4 + 1)))))))));
                                                behavior default:
                                                  invariant (_C_56 : 
                                                            (\forall integer j_5;
                                                              (((0 <= j_5) &&
                                                                 (j_5 <=
                                                                   (l :> integer))) ==>
                                                                (\forall integer f2_10;
                                                                  (\forall integer t2_10;
                                                                    (((! 
                                                                    (f2_10 ==
                                                                    (f_0 :> integer))) ||
                                                                    (! 
                                                                    (t2_10 ==
                                                                    (t_0 :> integer)))) ==>
                                                                    (count{Here}(
                                                                    g_0,
                                                                    f2_10,
                                                                    t2_10, 0,
                                                                    j_5) ==
                                                                    count{_Pre1}(
                                                                    g_0,
                                                                    f2_10,
                                                                    t2_10, 0,
                                                                    j_5))))))));
                                                behavior default:
                                                  invariant (_C_55 : 
                                                            (\forall integer k_10;
                                                              ((((c :> integer) <=
                                                                  k_10) &&
                                                                 (k_10 <
                                                                   (i :> integer))) ==>
                                                                ((g_0.edges +
                                                                   k_10).existent_0 ==
                                                                  0))));
                                                variant (_C_54 : ((g_0.esize :> integer) -
                                                                   (l :> integer)));
                                                while (true)
                                                {  
                                                   {  (LoopCurrent : 
                                                      (if (_C_74 : (l <
                                                                    (_C_73 : g_0.esize))) then () else 
                                                      (goto while_1_break)));
                                                      
                                                      {  (_C_77 : (l = 
                                                         (_C_76 : ((_C_75 : 
                                                                   (l +
                                                                    (1 :> int32))) :> int32))));
                                                         
                                                         {  
                                                            (assert for default: 
                                                            (_C_78 : 
                                                            (astraver : 
                                                            (\forall integer f2_0;
                                                              (\forall integer t2_0;
                                                                (((! 
                                                                  (f2_0 ==
                                                                    (f_0 :> integer))) ||
                                                                   (! 
                                                                   (t2_0 ==
                                                                    (t_0 :> integer)))) ==>
                                                                  (count{Here}(
                                                                    g_0,
                                                                    f2_0,
                                                                    t2_0,
                                                                    ((l :> integer) -
                                                                    1),
                                                                    (l :> integer)) ==
                                                                    count{_Pre1}(
                                                                    g_0,
                                                                    f2_0,
                                                                    t2_0,
                                                                    ((l :> integer) -
                                                                    1),
                                                                    (l :> integer)))))))));
                                                            ()
                                                         };
                                                         
                                                         {  
                                                            (assert for default: 
                                                            (_C_79 : 
                                                            (astraver : 
                                                            (\forall integer f2_1;
                                                              (\forall integer t2_1;
                                                                (((! 
                                                                  (f2_1 ==
                                                                    (f_0 :> integer))) ||
                                                                   (! 
                                                                   (t2_1 ==
                                                                    (t_0 :> integer)))) ==>
                                                                  (count{Here}(
                                                                    g_0,
                                                                    f2_1,
                                                                    t2_1, 0,
                                                                    (l :> integer)) ==
                                                                    (count{Here}(
                                                                    g_0,
                                                                    f2_1,
                                                                    t2_1, 0,
                                                                    ((l :> integer) -
                                                                    1)) +
                                                                    count{Here}(
                                                                    g_0,
                                                                    f2_1,
                                                                    t2_1,
                                                                    ((l :> integer) -
                                                                    1),
                                                                    (l :> integer))))))))));
                                                            ()
                                                         };
                                                         
                                                         {  
                                                            (assert for default: 
                                                            (_C_80 : 
                                                            (astraver : 
                                                            (\forall integer f2_2;
                                                              (\forall integer t2_2;
                                                                (((! 
                                                                  (f2_2 ==
                                                                    (f_0 :> integer))) ||
                                                                   (! 
                                                                   (t2_2 ==
                                                                    (t_0 :> integer)))) ==>
                                                                  (count{_Pre1}(
                                                                    g_0,
                                                                    f2_2,
                                                                    t2_2, 0,
                                                                    (l :> integer)) ==
                                                                    (count{_Pre1}(
                                                                    g_0,
                                                                    f2_2,
                                                                    t2_2, 0,
                                                                    ((l :> integer) -
                                                                    1)) +
                                                                    count{_Pre1}(
                                                                    g_0,
                                                                    f2_2,
                                                                    t2_2,
                                                                    ((l :> integer) -
                                                                    1),
                                                                    (l :> integer))))))))));
                                                            ()
                                                         };
                                                         
                                                         {  
                                                            (assert for default: 
                                                            (_C_81 : 
                                                            (astraver : 
                                                            (\forall integer f2_3;
                                                              (\forall integer t2_3;
                                                                (((! 
                                                                  (f2_3 ==
                                                                    (f_0 :> integer))) ||
                                                                   (! 
                                                                   (t2_3 ==
                                                                    (t_0 :> integer)))) ==>
                                                                  (count{Here}(
                                                                    g_0,
                                                                    f2_3,
                                                                    t2_3, 0,
                                                                    ((l :> integer) -
                                                                    1)) ==
                                                                    count{_Pre1}(
                                                                    g_0,
                                                                    f2_3,
                                                                    t2_3, 0,
                                                                    ((l :> integer) -
                                                                    1)))))))));
                                                            ()
                                                         };
                                                         
                                                         {  
                                                            (assert for default: 
                                                            (_C_82 : 
                                                            (astraver : 
                                                            (\forall integer f2_4;
                                                              (\forall integer t2_4;
                                                                (((! 
                                                                  (f2_4 ==
                                                                    (f_0 :> integer))) ||
                                                                   (! 
                                                                   (t2_4 ==
                                                                    (t_0 :> integer)))) ==>
                                                                  (count{Here}(
                                                                    g_0,
                                                                    f2_4,
                                                                    t2_4, 0,
                                                                    (l :> integer)) ==
                                                                    (count{_Pre1}(
                                                                    g_0,
                                                                    f2_4,
                                                                    t2_4, 0,
                                                                    ((l :> integer) -
                                                                    1)) +
                                                                    count{_Pre1}(
                                                                    g_0,
                                                                    f2_4,
                                                                    t2_4,
                                                                    ((l :> integer) -
                                                                    1),
                                                                    (l :> integer))))))))));
                                                            ()
                                                         }
                                                      }
                                                   }
                                                });
                                                (while_1_break : ());
                                                
                                                {  (_C_83 : (h = (0 :> int32)));
                                                   (LoopEntry : 
                                                   loop 
                                                   behavior default:
                                                     invariant (_C_88 : 
                                                               ((_C_89 : 
                                                                ((0 :> int32) <=
                                                                  h)) &&
                                                                 (_C_90 : 
                                                                 (h <=
                                                                   i))));
                                                   behavior default:
                                                     invariant (_C_87 : 
                                                               (\forall integer m_14;
                                                                 (((0 <=
                                                                    m_14) &&
                                                                    (m_14 <
                                                                    (i :> integer))) ==>
                                                                   (((g_0.edges +
                                                                    m_14).from ==
                                                                    f_0) ==>
                                                                    (((g_0.edges +
                                                                    m_14).to ==
                                                                    t_0) ==>
                                                                    \at(
                                                                    ((g_0.edges +
                                                                    m_14).existent_0 ==
                                                                    0),Here))))));
                                                   behavior default:
                                                     invariant (_C_86 : 
                                                               (\forall integer m_15;
                                                                 (((0 <=
                                                                    m_15) &&
                                                                    (m_15 <
                                                                    (i :> integer))) ==>
                                                                   (((g_0.edges +
                                                                    m_15).from ==
                                                                    f_0) ==>
                                                                    (((g_0.edges +
                                                                    m_15).to ==
                                                                    t_0) ==>
                                                                    \at(
                                                                    ((g_0.edges +
                                                                    m_15).existent_0 ==
                                                                    0),_Pre1))))));
                                                   behavior default:
                                                     invariant (_C_85 : 
                                                               (count{Here}(
                                                                 g_0,
                                                                 (f_0 :> integer),
                                                                 (t_0 :> integer),
                                                                 0,
                                                                 (h :> integer)) ==
                                                                 count{_Pre1}(
                                                                 g_0,
                                                                 (f_0 :> integer),
                                                                 (t_0 :> integer),
                                                                 0,
                                                                 (h :> integer))));
                                                   variant (_C_84 : ((i :> integer) -
                                                                    (h :> integer)));
                                                   while (true)
                                                   {  
                                                      {  (LoopCurrent : 
                                                         (if (_C_91 : 
                                                             (h < i)) then () else 
                                                         (goto while_2_break)));
                                                         
                                                         {  
                                                            {  
                                                               (assert for default: 
                                                               (_C_92 : 
                                                               (astraver : 
                                                               (count{Here}(
                                                                 g_0,
                                                                 (f_0 :> integer),
                                                                 (t_0 :> integer),
                                                                 0,
                                                                 ((h :> integer) +
                                                                   1)) ==
                                                                 (count{Here}(
                                                                   g_0,
                                                                   (f_0 :> integer),
                                                                   (t_0 :> integer),
                                                                   0,
                                                                   (h :> integer)) +
                                                                   count{Here}(
                                                                   g_0,
                                                                   (f_0 :> integer),
                                                                   (t_0 :> integer),
                                                                   (h :> integer),
                                                                   ((h :> integer) +
                                                                    1)))))));
                                                               ()
                                                            };
                                                            
                                                            {  
                                                               (assert for default: 
                                                               (_C_93 : 
                                                               (astraver : 
                                                               (count{_Pre1}(
                                                                 g_0,
                                                                 (f_0 :> integer),
                                                                 (t_0 :> integer),
                                                                 0,
                                                                 ((h :> integer) +
                                                                   1)) ==
                                                                 (count{_Pre1}(
                                                                   g_0,
                                                                   (f_0 :> integer),
                                                                   (t_0 :> integer),
                                                                   0,
                                                                   (h :> integer)) +
                                                                   count{_Pre1}(
                                                                   g_0,
                                                                   (f_0 :> integer),
                                                                   (t_0 :> integer),
                                                                   (h :> integer),
                                                                   ((h :> integer) +
                                                                    1)))))));
                                                               ()
                                                            }
                                                         };
                                                         (_C_96 : (h = 
                                                         (_C_95 : ((_C_94 : 
                                                                   (h +
                                                                    (1 :> int32))) :> int32))))
                                                      }
                                                   });
                                                   (while_2_break : ())
                                                };
                                                
                                                {  (_C_99 : (h_0 = (_C_98 : (
                                                                   (_C_97 : 
                                                                   (i +
                                                                    (1 :> int32))) :> int32))));
                                                   (LoopEntry : 
                                                   loop 
                                                   behavior default:
                                                     invariant (_C_103 : 
                                                               ((_C_104 : 
                                                                (((i :> integer) +
                                                                   1) <=
                                                                  (h_0 :> integer))) &&
                                                                 (_C_105 : 
                                                                 (h_0 <=
                                                                   g_0.esize))));
                                                   behavior default:
                                                     invariant (_C_102 : 
                                                               (\forall integer m_16;
                                                                 (((((i :> integer) +
                                                                    1) <=
                                                                    m_16) &&
                                                                    (m_16 <
                                                                    (g_0.esize :> integer))) ==>
                                                                   (((g_0.edges +
                                                                    m_16).from ==
                                                                    f_0) ==>
                                                                    (((g_0.edges +
                                                                    m_16).to ==
                                                                    t_0) ==>
                                                                    (\at(
                                                                    (g_0.edges +
                                                                    m_16).existent_0,_Before) ==
                                                                    \at(
                                                                    (g_0.edges +
                                                                    m_16).existent_0,Here)))))));
                                                   behavior default:
                                                     invariant (_C_101 : 
                                                               (count{Here}(
                                                                 g_0,
                                                                 (f_0 :> integer),
                                                                 (t_0 :> integer),
                                                                 ((i :> integer) +
                                                                   1),
                                                                 (h_0 :> integer)) ==
                                                                 count{_Before}(
                                                                 g_0,
                                                                 (f_0 :> integer),
                                                                 (t_0 :> integer),
                                                                 ((i :> integer) +
                                                                   1),
                                                                 (h_0 :> integer))));
                                                   variant (_C_100 : 
                                                           ((g_0.esize :> integer) -
                                                             (h_0 :> integer)));
                                                   while (true)
                                                   {  
                                                      {  (LoopCurrent : 
                                                         (if (_C_107 : 
                                                             (h_0 <
                                                               (_C_106 : g_0.esize))) then () else 
                                                         (goto while_2_break_0)));
                                                         
                                                         {  
                                                            {  
                                                               (assert for default: 
                                                               (_C_108 : 
                                                               (astraver : 
                                                               (count{Here}(
                                                                 g_0,
                                                                 (f_0 :> integer),
                                                                 (t_0 :> integer),
                                                                 ((i :> integer) +
                                                                   1),
                                                                 ((h_0 :> integer) +
                                                                   1)) ==
                                                                 (count{Here}(
                                                                   g_0,
                                                                   (f_0 :> integer),
                                                                   (t_0 :> integer),
                                                                   ((i :> integer) +
                                                                    1),
                                                                   (h_0 :> integer)) +
                                                                   count{Here}(
                                                                   g_0,
                                                                   (f_0 :> integer),
                                                                   (t_0 :> integer),
                                                                   (h_0 :> integer),
                                                                   ((h_0 :> integer) +
                                                                    1)))))));
                                                               ()
                                                            };
                                                            
                                                            {  
                                                               (assert for default: 
                                                               (_C_109 : 
                                                               (astraver : 
                                                               (count{_Before}(
                                                                 g_0,
                                                                 (f_0 :> integer),
                                                                 (t_0 :> integer),
                                                                 ((i :> integer) +
                                                                   1),
                                                                 ((h_0 :> integer) +
                                                                   1)) ==
                                                                 (count{_Before}(
                                                                   g_0,
                                                                   (f_0 :> integer),
                                                                   (t_0 :> integer),
                                                                   ((i :> integer) +
                                                                    1),
                                                                   (h_0 :> integer)) +
                                                                   count{_Before}(
                                                                   g_0,
                                                                   (f_0 :> integer),
                                                                   (t_0 :> integer),
                                                                   (h_0 :> integer),
                                                                   ((h_0 :> integer) +
                                                                    1)))))));
                                                               ()
                                                            }
                                                         };
                                                         (_C_112 : (h_0 = 
                                                         (_C_111 : ((_C_110 : 
                                                                    (h_0 +
                                                                    (1 :> int32))) :> int32))))
                                                      }
                                                   });
                                                   (while_2_break_0 : ())
                                                };
                                                
                                                {  
                                                   (assert for default: 
                                                   (_C_113 : (astraver : 
                                                             (count{Here}(
                                                               g_0,
                                                               (f_0 :> integer),
                                                               (t_0 :> integer),
                                                               0,
                                                               (i :> integer)) ==
                                                               count{_Pre1}(
                                                               g_0,
                                                               (f_0 :> integer),
                                                               (t_0 :> integer),
                                                               0,
                                                               (i :> integer))))));
                                                   ()
                                                };
                                                
                                                {  
                                                   (assert for default: 
                                                   (_C_114 : (astraver : 
                                                             (count{Here}(
                                                               g_0,
                                                               (f_0 :> integer),
                                                               (t_0 :> integer),
                                                               0,
                                                               ((i :> integer) +
                                                                 1)) ==
                                                               (count{Here}(
                                                                 g_0,
                                                                 (f_0 :> integer),
                                                                 (t_0 :> integer),
                                                                 0,
                                                                 (i :> integer)) +
                                                                 count{Here}(
                                                                 g_0,
                                                                 (f_0 :> integer),
                                                                 (t_0 :> integer),
                                                                 (i :> integer),
                                                                 ((i :> integer) +
                                                                   1)))))));
                                                   ()
                                                };
                                                
                                                {  
                                                   (assert for default: 
                                                   (_C_115 : (astraver : 
                                                             (count{Here}(
                                                               g_0,
                                                               (f_0 :> integer),
                                                               (t_0 :> integer),
                                                               0,
                                                               ((i :> integer) +
                                                                 1)) ==
                                                               0))));
                                                   ()
                                                };
                                                
                                                {  
                                                   (assert for default: 
                                                   (_C_116 : (astraver : 
                                                             (c >=
                                                               (0 :> int32)))));
                                                   ()
                                                }
                                             } else ()) else ());
                  (if (_C_135 : (((_C_134 : (_C_133 : ((_C_132 : g_0.edges) +
                                                        i)).existent_0) :> int32) !=
                                  (0 :> int32))) then 
                  {  (_Pre2 : 
                     {  
                        (assert for default: (_C_125 : (astraver : (i >=
                                                                    (0 :> int32)))));
                        ()
                     });
                     
                     {  
                        (assert for default: (_C_126 : (astraver : (c >=
                                                                    (0 :> int32)))));
                        ()
                     };
                     (_C_129 : (c = (_C_128 : ((_C_127 : (i + (1 :> int32))) :> int32))));
                     
                     {  
                        (assert for default: (_C_130 : (astraver : (c >=
                                                                    (0 :> int32)))));
                        ()
                     };
                     
                     {  
                        (assert for default: (_C_131 : (astraver : (c <=
                                                                    g_0.ecnt))));
                        ()
                     }
                  } else ());
                  
                  {  
                     (assert for default: (_C_136 : (astraver : (c >=
                                                                  (0 :> int32)))));
                     ()
                  }
               };
               (_C_139 : (i = (_C_138 : ((_C_137 : (i + (1 :> int32))) :> int32))))
            }
         });
         (while_0_break : ())
      });
      
      {  
         (assert for default: (_C_140 : (astraver : \at((((\offset_min(
                                                            \at(g_0,Here)) <=
                                                            \at(0,Here)) &&
                                                           (\offset_max(
                                                             \at(g_0,Here)) >=
                                                             \at(0,Here))) &&
                                                          true),Here))));
         ()
      };
      
      {  
         (assert for default: (_C_141 : (astraver : graph_valid{Here}(g_0))));
         ()
      };
      
      {  
         (assert for default: (_C_142 : (astraver : (c >= (0 :> int32)))));
         ()
      };
      
      {  
         (assert for default: (_C_143 : (astraver : (\forall integer k_13;
                                                      ((((c :> integer) <=
                                                          k_13) &&
                                                         (k_13 <
                                                           (g_0.ecnt :> integer))) ==>
                                                        ((g_0.edges + k_13).existent_0 ==
                                                          (0 :> int32)))))));
         ()
      };
      (_C_145 : ((_C_144 : g_0.ecnt) = c));
      
      {  
         (assert for default: (_C_146 : (astraver : ((g_0.esize >= g_0.ecnt) &&
                                                      (g_0.ecnt >=
                                                        (0 :> int32))))));
         ()
      };
      
      {  
         (assert for default: (_C_147 : (astraver : edges_valid{Here}(
                                        g_0, (g_0.ecnt :> integer)))));
         ()
      };
      
      {  
         (assert for default: (_C_148 : (astraver : graph_valid{Here}(g_0))));
         ()
      };
      
      (return ())
   }
}
