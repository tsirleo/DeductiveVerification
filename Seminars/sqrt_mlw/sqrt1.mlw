(* Для mutable по классике нужно завести тип:
    type int_var = { mutable val : int }
    let sqrt(x : int) : int = 
        let y1 : int_var = { val = x } in
        ...
    CVC4 1.7 noBV справляется со всем, кроме s6 и итогового sqrt. (Только один солвер!)
    В s6 допишем рекурсивную реализацию. Для работы рекурсии нужно ключевое слово rec. Полностью переварить эту математику сможет только Z3.
    Теперь нужно будет доказать только 2 часть in_variant sqrt.
    Lemma 2:
        x⩾0 /\ y2=x11/2 /\ (x=0->y1=y21=0) /\ (x>0->y1>0/\y21>0) /\ (y21⩾y1->(y1=sqrt(x))) /\ ...

        x>0 /\ y1 > y21 > 0, y21 ⩾ sqrt(x) -?-> (x/y21 + y21)/2⩾sqrt(x)
        При a,b∈ℕ a/2⩾b <=> a⩾2*b.
        x/y21 ⩾ 2sqrt(x) - y21 <=> x⩾2sqrt(x)y21-y21² <= x-(sqrt(x))²+(sqrt(x)-y21)²⩾0 <= x⩾(sqrt(x))²
    ДОКАЗАЛИ!!!

    Как упростить:
        1) Избавиться от кучи дублирующихся кванторов, сделав s параметром лемм. Для передачи можно завести локальную переменную, получаемую тупейшим вычислением корня.
            Альтернатива: добавим для sqrt новый функциональный символ.
*)

module Sqrt
    use import int.Int
    type int_var = { mutable v : int; }
    function square(x: int) : int = x*x
    predicate is_sqrt(x y : int) = square(y) <= x < square(y+1)
	predicate sqrt_x_less_y(x y : int) = forall s. is_sqrt x s -> s <= y
    predicate my_invariant(x y1 y2 : int) = (x=0 -> y1=y2=0) /\ (x>0 -> (y1 > 0 /\ y2 > 0)) /\ (y2 >= y1 -> is_sqrt x y1) /\ (forall s . is_sqrt x s -> y2 >= s)

    predicate is_div(x y res : int) = 0 <= x - res * y < y (* res точно окажется положительным, когда предусловия деления выполнены *)
    val div (x y : int) : int
        requires {x >= 0 /\ y > 0}
        ensures {is_div x y result}

    (*let s1(a : int) : unit
        ensures {a >= 0}
        requires {forall s. is_sqrt a s -> s >= 0}
        = ()

	let s2(x y : int) : unit
        ensures {x >= 0}
        requires {sqrt_x_less_y x y -> (forall s. is_sqrt x s -> 0 <= s <= y)}
        = ()

	let s3(x y : int) : unit
        ensures {x >= 0}
        requires {sqrt_x_less_y x y -> (forall s. is_sqrt x s -> square(s+1) <= square(y+1))}
        = ()

	let s4(x y : int) : unit
        ensures {x >= 0}
        requires {sqrt_x_less_y x y -> (forall s. is_sqrt x s -> x < square(y+1))}
        = ()

	let s5(x y : int) : unit
        ensures {x >= 0}
        requires {sqrt_x_less_y x y -> ((exists s. is_sqrt x s) -> x < square(y+1))}
        = ()*)

	let rec sqrt_exists(x : int) : unit (*s6*)
        variant {x} (* для док-ва завершаемости рекурсии *)
        requires {x >= 0}
        ensures {exists s. is_sqrt x s}
        = if x = 0 then () else sqrt_exists (x - 1)
	(* predicate phiSqrt(n : int) = n >= 0 /\ (exists s. is_sqrt n s)
	predicate psiSqrt(n s : int) = is_sqrt n s *)

    let lemma_1(a b: int): unit
        requires {a >= 0}
        ensures {sqrt_x_less_y a b -> (a < square(b+1))}
        = (*s1 a; s2 a b; s3 a b; s4 a b; s5 a b; s6 a; ()*)
        assert {forall s. is_sqrt a s -> s >= 0};
        assert {sqrt_x_less_y a b -> (forall s. is_sqrt a s -> 0 <= s <= b)};
        assert {sqrt_x_less_y a b -> (forall s. is_sqrt a s -> square(s+1) <= square(b+1))};
        assert {sqrt_x_less_y a b -> (forall s. is_sqrt a s -> a < square(b+1))};
        assert {sqrt_x_less_y a b -> ((exists s. is_sqrt a s) -> a < square(b+1))};
        sqrt_exists a

    predicate div_eqv_mult(a b c r : int) = a >= 0 /\ c > 0 /\ is_div a c r -> (r >= b <-> a >= b * c)
    let lemma_2(x y y11 y12: int) : unit
        requires {x >= 0}
        requires {y > 0}
        requires {forall s. is_sqrt x s -> y >= s}
        requires {is_div x y y11}
        requires {is_div (y11 + y) 2 y12}
        ensures {forall s. is_sqrt x s -> y12 >= s}
        = assert { forall t. square t >= 0};
        assert { forall s. is_sqrt x s -> x - square s >= 0};
        assert { forall s. is_sqrt x s -> square (s - y) >= 0};
        assert { forall s. is_sqrt x s -> x - square s + square (s - y) >= 0};
        assert { forall s. is_sqrt x s -> x >= 2 * s * y - square y};
        (*assert { forall a b c r. a >= 0 /\ c > 0 /\ is_div a c r -> (r >= b <-> a >= b * c)};*) (* Но на триггер нужны все 4 подкванторных переменных => не применится! => добавляем новый пользовательский символ "насильственно" *)
        assert { forall a b c r. div_eqv_mult a b c r};
        assert { forall s. is_sqrt x s -> div_eqv_mult x (2 * s - y) y y11};
        assert { forall s. is_sqrt x s -> y11 >= 2 * s - y};
        assert { forall s. is_sqrt x s -> y11 + y >= 2 * s};
        assert { forall s. is_sqrt x s -> y12 >= s};
        ()

    let sqrt(x : int) : int
        requires {x >= 0}
        ensures {is_sqrt x result}
    = 
        let y1 : int_var = { v = x } in
        let y2 : int_var = { v = 0 } in
        y2.v <- div (x+1) 2;
        while y2.v < y1.v do
            invariant {my_invariant x y1.v y2.v} (* индуктивное утверждение *)
            variant {y1.v} (* оценочная функция *)
            y1.v <- div x y2.v;
            let ghost y11 = y1.v in
                y1.v <- div (y1.v+y2.v) 2;
                y1.v <- (let tmp : int = y2.v in
                    y2.v <- y1.v;
                    tmp); (* ; относится ко внешнему выражению, кажется... *)
                (*let ghost s = ... in*)
                lemma_1 x y1.v; (* s *)
                lemma_2 x y1.v y11 y2.v (* s *)
        done;
        y1.v
end